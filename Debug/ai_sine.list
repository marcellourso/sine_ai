
ai_sine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008054  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  08008240  08008240  00009240  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d48  08008d48  0000a860  2**0
                  CONTENTS
  4 .ARM          00000008  08008d48  08008d48  00009d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d50  08008d50  0000a860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d50  08008d50  00009d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d54  08008d54  00009d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000860  20000000  08008d58  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000860  080095b8  0000a860  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20000ba4  080095b8  0000aba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a860  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3b4  00000000  00000000  0000a890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200b  00000000  00000000  00015c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  00017c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000623  00000000  00000000  00018488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023802  00000000  00000000  00018aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b81b  00000000  00000000  0003c2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d50d3  00000000  00000000  00047ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0011cb9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003240  00000000  00000000  0011cc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011fe64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000860 	.word	0x20000860
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800820c 	.word	0x0800820c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000864 	.word	0x20000864
 800020c:	0800820c 	.word	0x0800820c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	f5ad 6dce 	sub.w	sp, sp, #1648	@ 0x670
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  char buf[50];
  int buf_len=0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3668 	str.w	r3, [r7, #1640]	@ 0x668
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fbad 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f909 	bl	8001100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 f9cd 	bl	800128c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ef2:	f000 f9a1 	bl	8001238 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000ef6:	f000 f975 	bl	80011e4 <MX_USART2_UART_Init>
  MX_X_CUBE_AI_Init();
 8000efa:	f002 f9b3 	bl	8003264 <MX_X_CUBE_AI_Init>


  /* USER CODE BEGIN 2 */
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8000efe:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8000f02:	4976      	ldr	r1, [pc, #472]	@ (80010dc <main+0x204>)
 8000f04:	4618      	mov	r0, r3
 8000f06:	f005 f8f3 	bl	80060f0 <siprintf>
 8000f0a:	f8c7 0668 	str.w	r0, [r7, #1640]	@ 0x668
  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000f0e:	f8d7 3668 	ldr.w	r3, [r7, #1640]	@ 0x668
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	f507 61c4 	add.w	r1, r7, #1568	@ 0x620
 8000f18:	2364      	movs	r3, #100	@ 0x64
 8000f1a:	4871      	ldr	r0, [pc, #452]	@ (80010e0 <main+0x208>)
 8000f1c:	f001 fd20 	bl	8002960 <HAL_UART_Transmit>

  /* AI buffer IO handlers */
    ai_buffer *ai_input;
    ai_buffer *ai_output;
    // handler del network la rete neurale sine_model
    ai_handle network = AI_HANDLE_NULL;
 8000f20:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8000f24:	f5a3 63bb 	sub.w	r3, r3, #1496	@ 0x5d8
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
    ai_error err;
    ai_network_report report;


    /** @brief Initialize network */
          const ai_handle acts[] = { activations };
 8000f2c:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8000f30:	f2a3 636c 	subw	r3, r3, #1644	@ 0x66c
 8000f34:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 8000f38:	601a      	str	r2, [r3, #0]

          err = ai_sine_model_create_and_init(&network, acts, NULL);
 8000f3a:	1d39      	adds	r1, r7, #4
 8000f3c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000f40:	2200      	movs	r2, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 fb54 	bl	80035f0 <ai_sine_model_create_and_init>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8000f4e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000f52:	601a      	str	r2, [r3, #0]
          if (err.type != AI_ERROR_NONE) {
 8000f54:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8000f58:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d011      	beq.n	8000f86 <main+0xae>
    		  buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000f62:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8000f66:	495f      	ldr	r1, [pc, #380]	@ (80010e4 <main+0x20c>)
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f005 f8c1 	bl	80060f0 <siprintf>
 8000f6e:	f8c7 0668 	str.w	r0, [r7, #1640]	@ 0x668
    		  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000f72:	f8d7 3668 	ldr.w	r3, [r7, #1640]	@ 0x668
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	f507 61c4 	add.w	r1, r7, #1568	@ 0x620
 8000f7c:	2364      	movs	r3, #100	@ 0x64
 8000f7e:	4858      	ldr	r0, [pc, #352]	@ (80010e0 <main+0x208>)
 8000f80:	f001 fcee 	bl	8002960 <HAL_UART_Transmit>
 8000f84:	e010      	b.n	8000fa8 <main+0xd0>
              //return -1;
          }
          else
          {
    		  buf_len = sprintf(buf, "success in create NN instance\r\n");
 8000f86:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8000f8a:	4957      	ldr	r1, [pc, #348]	@ (80010e8 <main+0x210>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f005 f8af 	bl	80060f0 <siprintf>
 8000f92:	f8c7 0668 	str.w	r0, [r7, #1640]	@ 0x668
    		  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000f96:	f8d7 3668 	ldr.w	r3, [r7, #1640]	@ 0x668
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	f507 61c4 	add.w	r1, r7, #1568	@ 0x620
 8000fa0:	2364      	movs	r3, #100	@ 0x64
 8000fa2:	484f      	ldr	r0, [pc, #316]	@ (80010e0 <main+0x208>)
 8000fa4:	f001 fcdc 	bl	8002960 <HAL_UART_Transmit>
          }


          if (ai_sine_model_get_report(network, &report) != true) {
 8000fa8:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8000fac:	f5a3 63bb 	sub.w	r3, r3, #1496	@ 0x5d8
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f107 0208 	add.w	r2, r7, #8
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 fa8b 	bl	80034d4 <ai_sine_model_get_report>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f083 0301 	eor.w	r3, r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d010      	beq.n	8000fec <main+0x114>
        	  buf_len = sprintf(buf, "ai get report error\r\n");
 8000fca:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8000fce:	4947      	ldr	r1, [pc, #284]	@ (80010ec <main+0x214>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f005 f88d 	bl	80060f0 <siprintf>
 8000fd6:	f8c7 0668 	str.w	r0, [r7, #1640]	@ 0x668
        	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000fda:	f8d7 3668 	ldr.w	r3, [r7, #1640]	@ 0x668
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	f507 61c4 	add.w	r1, r7, #1568	@ 0x620
 8000fe4:	2364      	movs	r3, #100	@ 0x64
 8000fe6:	483e      	ldr	r0, [pc, #248]	@ (80010e0 <main+0x208>)
 8000fe8:	f001 fcba 	bl	8002960 <HAL_UART_Transmit>
          }

          // prepara l'inferenza riferiamoci al report che contiene tutti i parametri
          ai_input = &report.inputs[0];
 8000fec:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8000ff0:	f5a3 63cd 	sub.w	r3, r3, #1640	@ 0x668
 8000ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ff6:	f8c7 3664 	str.w	r3, [r7, #1636]	@ 0x664
          ai_output = &report.outputs[0];
 8000ffa:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8000ffe:	f5a3 63cd 	sub.w	r3, r3, #1640	@ 0x668
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	f8c7 3660 	str.w	r3, [r7, #1632]	@ 0x660

          //link inputs and outputs to the model
          ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001008:	f8d7 3664 	ldr.w	r3, [r7, #1636]	@ 0x664
 800100c:	4a38      	ldr	r2, [pc, #224]	@ (80010f0 <main+0x218>)
 800100e:	605a      	str	r2, [r3, #4]
          ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001010:	f8d7 3660 	ldr.w	r3, [r7, #1632]	@ 0x660
 8001014:	4a37      	ldr	r2, [pc, #220]	@ (80010f4 <main+0x21c>)
 8001016:	605a      	str	r2, [r3, #4]


          // stabiliamo il numero di batch, di solito 1
          ai_i32 nbatch;

          float x = 1.5;
 8001018:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800101c:	f207 625c 	addw	r2, r7, #1628	@ 0x65c
 8001020:	6013      	str	r3, [r2, #0]

          for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
 8001028:	e00d      	b.n	8001046 <main+0x16e>
          			  {
          				((ai_float *)in_data)[i] = (ai_float)x;
 800102a:	f8d7 366c 	ldr.w	r3, [r7, #1644]	@ 0x66c
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4a2f      	ldr	r2, [pc, #188]	@ (80010f0 <main+0x218>)
 8001032:	4413      	add	r3, r2
 8001034:	f207 625c 	addw	r2, r7, #1628	@ 0x65c
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	601a      	str	r2, [r3, #0]
          for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 800103c:	f8d7 366c 	ldr.w	r3, [r7, #1644]	@ 0x66c
 8001040:	3301      	adds	r3, #1
 8001042:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
 8001046:	f8d7 366c 	ldr.w	r3, [r7, #1644]	@ 0x66c
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0ed      	beq.n	800102a <main+0x152>
          			  }

          nbatch = ai_sine_model_run(network, &ai_input[0], &ai_output[0]);
 800104e:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8001052:	f5a3 63bb 	sub.w	r3, r3, #1496	@ 0x5d8
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f8d7 2660 	ldr.w	r2, [r7, #1632]	@ 0x660
 800105c:	f8d7 1664 	ldr.w	r1, [r7, #1636]	@ 0x664
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fbb3 	bl	80037cc <ai_sine_model_run>
 8001066:	f8c7 0658 	str.w	r0, [r7, #1624]	@ 0x658

          if (nbatch != 1) {
 800106a:	f8d7 3658 	ldr.w	r3, [r7, #1624]	@ 0x658
 800106e:	2b01      	cmp	r3, #1
 8001070:	d010      	beq.n	8001094 <main+0x1bc>
          			  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001072:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8001076:	4920      	ldr	r1, [pc, #128]	@ (80010f8 <main+0x220>)
 8001078:	4618      	mov	r0, r3
 800107a:	f005 f839 	bl	80060f0 <siprintf>
 800107e:	f8c7 0668 	str.w	r0, [r7, #1640]	@ 0x668
          			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001082:	f8d7 3668 	ldr.w	r3, [r7, #1640]	@ 0x668
 8001086:	b29a      	uxth	r2, r3
 8001088:	f507 61c4 	add.w	r1, r7, #1568	@ 0x620
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	4814      	ldr	r0, [pc, #80]	@ (80010e0 <main+0x208>)
 8001090:	f001 fc66 	bl	8002960 <HAL_UART_Transmit>
          			}

          float y_val=0;
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	f207 6254 	addw	r2, r7, #1620	@ 0x654
 800109c:	6013      	str	r3, [r2, #0]
          y_val = ((float *)out_data)[0];
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <main+0x21c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f207 6254 	addw	r2, r7, #1620	@ 0x654
 80010a6:	6013      	str	r3, [r2, #0]

          buf_len = sprintf(buf, "%f \r\n",y_val);
 80010a8:	f207 6354 	addw	r3, r7, #1620	@ 0x654
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	f7ff fa6b 	bl	8000588 <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	f507 60c4 	add.w	r0, r7, #1568	@ 0x620
 80010ba:	4910      	ldr	r1, [pc, #64]	@ (80010fc <main+0x224>)
 80010bc:	f005 f818 	bl	80060f0 <siprintf>
 80010c0:	f8c7 0668 	str.w	r0, [r7, #1640]	@ 0x668

          HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80010c4:	f8d7 3668 	ldr.w	r3, [r7, #1640]	@ 0x668
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	f507 61c4 	add.w	r1, r7, #1568	@ 0x620
 80010ce:	2364      	movs	r3, #100	@ 0x64
 80010d0:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <main+0x208>)
 80010d2:	f001 fc45 	bl	8002960 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80010d6:	f002 f8d3 	bl	8003280 <MX_X_CUBE_AI_Process>
 80010da:	e7fc      	b.n	80010d6 <main+0x1fe>
 80010dc:	08008240 	.word	0x08008240
 80010e0:	2000087c 	.word	0x2000087c
 80010e4:	0800825c 	.word	0x0800825c
 80010e8:	08008284 	.word	0x08008284
 80010ec:	080082a4 	.word	0x080082a4
 80010f0:	2000090c 	.word	0x2000090c
 80010f4:	20000910 	.word	0x20000910
 80010f8:	080082bc 	.word	0x080082bc
 80010fc:	080082e0 	.word	0x080082e0

08001100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b094      	sub	sp, #80	@ 0x50
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	2234      	movs	r2, #52	@ 0x34
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f005 f8e6 	bl	80062e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <SystemClock_Config+0xdc>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	4a2b      	ldr	r2, [pc, #172]	@ (80011dc <SystemClock_Config+0xdc>)
 800112e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001132:	6413      	str	r3, [r2, #64]	@ 0x40
 8001134:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <SystemClock_Config+0xdc>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <SystemClock_Config+0xe0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a25      	ldr	r2, [pc, #148]	@ (80011e0 <SystemClock_Config+0xe0>)
 800114a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <SystemClock_Config+0xe0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	2301      	movs	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2310      	movs	r3, #16
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001170:	2308      	movs	r3, #8
 8001172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001174:	23b4      	movs	r3, #180	@ 0xb4
 8001176:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001178:	2302      	movs	r3, #2
 800117a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800117c:	2302      	movs	r3, #2
 800117e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001180:	2302      	movs	r3, #2
 8001182:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4618      	mov	r0, r3
 800118a:	f001 f8fb 	bl	8002384 <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001194:	f000 f8e8 	bl	8001368 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001198:	f000 fd5a 	bl	8001c50 <HAL_PWREx_EnableOverDrive>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011a2:	f000 f8e1 	bl	8001368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	230f      	movs	r3, #15
 80011a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2302      	movs	r3, #2
 80011ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	2105      	movs	r1, #5
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fd93 	bl	8001cf0 <HAL_RCC_ClockConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80011d0:	f000 f8ca 	bl	8001368 <Error_Handler>
  }
}
 80011d4:	bf00      	nop
 80011d6:	3750      	adds	r7, #80	@ 0x50
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	@ (8001234 <MX_USART2_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 800121c:	f001 fb50 	bl	80028c0 <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f000 f89f 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000087c 	.word	0x2000087c
 8001234:	40004400 	.word	0x40004400

08001238 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <MX_USART3_UART_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001270:	f001 fb26 	bl	80028c0 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 f875 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200008c4 	.word	0x200008c4
 8001288:	40004800 	.word	0x40004800

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b2d      	ldr	r3, [pc, #180]	@ (800135c <MX_GPIO_Init+0xd0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a2c      	ldr	r2, [pc, #176]	@ (800135c <MX_GPIO_Init+0xd0>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <MX_GPIO_Init+0xd0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b26      	ldr	r3, [pc, #152]	@ (800135c <MX_GPIO_Init+0xd0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a25      	ldr	r2, [pc, #148]	@ (800135c <MX_GPIO_Init+0xd0>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b23      	ldr	r3, [pc, #140]	@ (800135c <MX_GPIO_Init+0xd0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <MX_GPIO_Init+0xd0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a1e      	ldr	r2, [pc, #120]	@ (800135c <MX_GPIO_Init+0xd0>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <MX_GPIO_Init+0xd0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_GPIO_Init+0xd0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a17      	ldr	r2, [pc, #92]	@ (800135c <MX_GPIO_Init+0xd0>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <MX_GPIO_Init+0xd0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2120      	movs	r1, #32
 8001316:	4812      	ldr	r0, [pc, #72]	@ (8001360 <MX_GPIO_Init+0xd4>)
 8001318:	f000 fc80 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800131c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <MX_GPIO_Init+0xd8>)
 8001332:	f000 fadf 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001336:	2320      	movs	r3, #32
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4804      	ldr	r0, [pc, #16]	@ (8001360 <MX_GPIO_Init+0xd4>)
 800134e:	f000 fad1 	bl	80018f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	@ 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020800 	.word	0x40020800

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <Error_Handler+0x8>

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <HAL_MspInit+0x4c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001388:	6453      	str	r3, [r2, #68]	@ 0x44
 800138a:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <HAL_MspInit+0x4c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013b2:	2007      	movs	r0, #7
 80013b4:	f000 fa6a 	bl	800188c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	@ 0x30
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a41      	ldr	r2, [pc, #260]	@ (80014e8 <HAL_UART_MspInit+0x124>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d12c      	bne.n	8001440 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	4b40      	ldr	r3, [pc, #256]	@ (80014ec <HAL_UART_MspInit+0x128>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	4a3f      	ldr	r2, [pc, #252]	@ (80014ec <HAL_UART_MspInit+0x128>)
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f6:	4b3d      	ldr	r3, [pc, #244]	@ (80014ec <HAL_UART_MspInit+0x128>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <HAL_UART_MspInit+0x128>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a38      	ldr	r2, [pc, #224]	@ (80014ec <HAL_UART_MspInit+0x128>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b36      	ldr	r3, [pc, #216]	@ (80014ec <HAL_UART_MspInit+0x128>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800141e:	230c      	movs	r3, #12
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800142e:	2307      	movs	r3, #7
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	482d      	ldr	r0, [pc, #180]	@ (80014f0 <HAL_UART_MspInit+0x12c>)
 800143a:	f000 fa5b 	bl	80018f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800143e:	e04f      	b.n	80014e0 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a2b      	ldr	r2, [pc, #172]	@ (80014f4 <HAL_UART_MspInit+0x130>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d14a      	bne.n	80014e0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <HAL_UART_MspInit+0x128>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	4a26      	ldr	r2, [pc, #152]	@ (80014ec <HAL_UART_MspInit+0x128>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001458:	6413      	str	r3, [r2, #64]	@ 0x40
 800145a:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <HAL_UART_MspInit+0x128>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_UART_MspInit+0x128>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a1f      	ldr	r2, [pc, #124]	@ (80014ec <HAL_UART_MspInit+0x128>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <HAL_UART_MspInit+0x128>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_UART_MspInit+0x128>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a18      	ldr	r2, [pc, #96]	@ (80014ec <HAL_UART_MspInit+0x128>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <HAL_UART_MspInit+0x128>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800149e:	2320      	movs	r3, #32
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014ae:	2307      	movs	r3, #7
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	480f      	ldr	r0, [pc, #60]	@ (80014f8 <HAL_UART_MspInit+0x134>)
 80014ba:	f000 fa1b 	bl	80018f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014d0:	2307      	movs	r3, #7
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4808      	ldr	r0, [pc, #32]	@ (80014fc <HAL_UART_MspInit+0x138>)
 80014dc:	f000 fa0a 	bl	80018f4 <HAL_GPIO_Init>
}
 80014e0:	bf00      	nop
 80014e2:	3730      	adds	r7, #48	@ 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40004400 	.word	0x40004400
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40004800 	.word	0x40004800
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020400 	.word	0x40020400

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <NMI_Handler+0x4>

08001508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <MemManage_Handler+0x4>

08001518 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <UsageFault_Handler+0x4>

08001528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001556:	f000 f8c7 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001568:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <_sbrk+0x5c>)
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <_sbrk+0x60>)
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001574:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800157c:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <_sbrk+0x64>)
 800157e:	4a12      	ldr	r2, [pc, #72]	@ (80015c8 <_sbrk+0x68>)
 8001580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	429a      	cmp	r2, r3
 800158e:	d207      	bcs.n	80015a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001590:	f004 ff08 	bl	80063a4 <__errno>
 8001594:	4603      	mov	r3, r0
 8001596:	220c      	movs	r2, #12
 8001598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800159e:	e009      	b.n	80015b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a0:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a6:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <_sbrk+0x64>)
 80015b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20020000 	.word	0x20020000
 80015c0:	00000800 	.word	0x00000800
 80015c4:	20000914 	.word	0x20000914
 80015c8:	20000ba8 	.word	0x20000ba8

080015cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <SystemInit+0x20>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <SystemInit+0x20>)
 80015d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001628 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015f4:	f7ff ffea 	bl	80015cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fa:	490d      	ldr	r1, [pc, #52]	@ (8001630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001610:	4c0a      	ldr	r4, [pc, #40]	@ (800163c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800161e:	f004 fec7 	bl	80063b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff fc59 	bl	8000ed8 <main>
  bx  lr    
 8001626:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	20000860 	.word	0x20000860
  ldr r2, =_sidata
 8001634:	08008d58 	.word	0x08008d58
  ldr r2, =_sbss
 8001638:	20000860 	.word	0x20000860
  ldr r4, =_ebss
 800163c:	20000ba4 	.word	0x20000ba4

08001640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <HAL_Init+0x40>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <HAL_Init+0x40>)
 800165a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800165e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <HAL_Init+0x40>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f90d 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fe7c 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f917 	bl	80018da <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016c4:	f000 f8ed 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	@ (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008
 800170c:	20000918 	.word	0x20000918

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	@ (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000918 	.word	0x20000918

08001728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001750:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175a:	4a04      	ldr	r2, [pc, #16]	@ (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	60d3      	str	r3, [r2, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <__NVIC_GetPriorityGrouping+0x18>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f003 0307 	and.w	r3, r3, #7
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	@ (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	@ (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	@ 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff47 	bl	8001728 <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff5c 	bl	8001770 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff8e 	bl	80017e0 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5d 	bl	800178c <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffb0 	bl	8001848 <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	@ 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	e165      	b.n	8001bdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 8154 	bne.w	8001bd6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d005      	beq.n	8001946 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001942:	2b02      	cmp	r3, #2
 8001944:	d130      	bne.n	80019a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800197c:	2201      	movs	r2, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 0201 	and.w	r2, r3, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d017      	beq.n	80019e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d123      	bne.n	8001a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	08da      	lsrs	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3208      	adds	r2, #8
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80ae 	beq.w	8001bd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf4 <HAL_GPIO_Init+0x300>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf4 <HAL_GPIO_Init+0x300>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf4 <HAL_GPIO_Init+0x300>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a96:	4a58      	ldr	r2, [pc, #352]	@ (8001bf8 <HAL_GPIO_Init+0x304>)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4f      	ldr	r2, [pc, #316]	@ (8001bfc <HAL_GPIO_Init+0x308>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d025      	beq.n	8001b0e <HAL_GPIO_Init+0x21a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c00 <HAL_GPIO_Init+0x30c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01f      	beq.n	8001b0a <HAL_GPIO_Init+0x216>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4d      	ldr	r2, [pc, #308]	@ (8001c04 <HAL_GPIO_Init+0x310>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d019      	beq.n	8001b06 <HAL_GPIO_Init+0x212>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4c      	ldr	r2, [pc, #304]	@ (8001c08 <HAL_GPIO_Init+0x314>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x20e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4b      	ldr	r2, [pc, #300]	@ (8001c0c <HAL_GPIO_Init+0x318>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x20a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4a      	ldr	r2, [pc, #296]	@ (8001c10 <HAL_GPIO_Init+0x31c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x206>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a49      	ldr	r2, [pc, #292]	@ (8001c14 <HAL_GPIO_Init+0x320>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x202>
 8001af2:	2306      	movs	r3, #6
 8001af4:	e00c      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001af6:	2307      	movs	r3, #7
 8001af8:	e00a      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001afa:	2305      	movs	r3, #5
 8001afc:	e008      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001afe:	2304      	movs	r3, #4
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001b02:	2303      	movs	r3, #3
 8001b04:	e004      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	f002 0203 	and.w	r2, r2, #3
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b20:	4935      	ldr	r1, [pc, #212]	@ (8001bf8 <HAL_GPIO_Init+0x304>)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c18 <HAL_GPIO_Init+0x324>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b52:	4a31      	ldr	r2, [pc, #196]	@ (8001c18 <HAL_GPIO_Init+0x324>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b58:	4b2f      	ldr	r3, [pc, #188]	@ (8001c18 <HAL_GPIO_Init+0x324>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b7c:	4a26      	ldr	r2, [pc, #152]	@ (8001c18 <HAL_GPIO_Init+0x324>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b82:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <HAL_GPIO_Init+0x324>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c18 <HAL_GPIO_Init+0x324>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <HAL_GPIO_Init+0x324>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd0:	4a11      	ldr	r2, [pc, #68]	@ (8001c18 <HAL_GPIO_Init+0x324>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	f67f ae96 	bls.w	8001910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3724      	adds	r7, #36	@ 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40013800 	.word	0x40013800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40021400 	.word	0x40021400
 8001c14:	40021800 	.word	0x40021800
 8001c18:	40013c00 	.word	0x40013c00

08001c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c2c:	787b      	ldrb	r3, [r7, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c38:	e003      	b.n	8001c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	041a      	lsls	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ce0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	4a1f      	ldr	r2, [pc, #124]	@ (8001ce0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c7c:	f7ff fd48 	bl	8001710 <HAL_GetTick>
 8001c80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c82:	e009      	b.n	8001c98 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c84:	f7ff fd44 	bl	8001710 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c92:	d901      	bls.n	8001c98 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e01f      	b.n	8001cd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c98:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca4:	d1ee      	bne.n	8001c84 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ca6:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cac:	f7ff fd30 	bl	8001710 <HAL_GetTick>
 8001cb0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cb2:	e009      	b.n	8001cc8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cb4:	f7ff fd2c 	bl	8001710 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cc2:	d901      	bls.n	8001cc8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e007      	b.n	8001cd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cc8:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001cd4:	d1ee      	bne.n	8001cb4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	420e0040 	.word	0x420e0040
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	420e0044 	.word	0x420e0044

08001cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0cc      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b68      	ldr	r3, [pc, #416]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d90c      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b65      	ldr	r3, [pc, #404]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0b8      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d44:	4b59      	ldr	r3, [pc, #356]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a58      	ldr	r2, [pc, #352]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d5c:	4b53      	ldr	r3, [pc, #332]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a52      	ldr	r2, [pc, #328]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d68:	4b50      	ldr	r3, [pc, #320]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	494d      	ldr	r1, [pc, #308]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d044      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4b47      	ldr	r3, [pc, #284]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d119      	bne.n	8001dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e07f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d003      	beq.n	8001dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dae:	4b3f      	ldr	r3, [pc, #252]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e06f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e067      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dce:	4b37      	ldr	r3, [pc, #220]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f023 0203 	bic.w	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4934      	ldr	r1, [pc, #208]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de0:	f7ff fc96 	bl	8001710 <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de8:	f7ff fc92 	bl	8001710 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e04f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 020c 	and.w	r2, r3, #12
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1eb      	bne.n	8001de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e10:	4b25      	ldr	r3, [pc, #148]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d20c      	bcs.n	8001e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e032      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4916      	ldr	r1, [pc, #88]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e62:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	490e      	ldr	r1, [pc, #56]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e76:	f000 f855 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	490a      	ldr	r1, [pc, #40]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	5ccb      	ldrb	r3, [r1, r3]
 8001e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8e:	4a09      	ldr	r2, [pc, #36]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fbf6 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	08008478 	.word	0x08008478
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4903      	ldr	r1, [pc, #12]	@ (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	08008488 	.word	0x08008488

08001efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f00:	f7ff ffdc 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0b5b      	lsrs	r3, r3, #13
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4903      	ldr	r1, [pc, #12]	@ (8001f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	08008488 	.word	0x08008488

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f28:	b0ae      	sub	sp, #184	@ 0xb8
 8001f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f4a:	4bcb      	ldr	r3, [pc, #812]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	f200 8206 	bhi.w	8002364 <HAL_RCC_GetSysClockFreq+0x440>
 8001f58:	a201      	add	r2, pc, #4	@ (adr r2, 8001f60 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	08001f95 	.word	0x08001f95
 8001f64:	08002365 	.word	0x08002365
 8001f68:	08002365 	.word	0x08002365
 8001f6c:	08002365 	.word	0x08002365
 8001f70:	08001f9d 	.word	0x08001f9d
 8001f74:	08002365 	.word	0x08002365
 8001f78:	08002365 	.word	0x08002365
 8001f7c:	08002365 	.word	0x08002365
 8001f80:	08001fa5 	.word	0x08001fa5
 8001f84:	08002365 	.word	0x08002365
 8001f88:	08002365 	.word	0x08002365
 8001f8c:	08002365 	.word	0x08002365
 8001f90:	08002195 	.word	0x08002195
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4bb9      	ldr	r3, [pc, #740]	@ (800227c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001f9a:	e1e7      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f9c:	4bb8      	ldr	r3, [pc, #736]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fa2:	e1e3      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fa4:	4bb4      	ldr	r3, [pc, #720]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb0:	4bb1      	ldr	r3, [pc, #708]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d071      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbc:	4bae      	ldr	r3, [pc, #696]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001fc8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001fe2:	4622      	mov	r2, r4
 8001fe4:	462b      	mov	r3, r5
 8001fe6:	f04f 0000 	mov.w	r0, #0
 8001fea:	f04f 0100 	mov.w	r1, #0
 8001fee:	0159      	lsls	r1, r3, #5
 8001ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff4:	0150      	lsls	r0, r2, #5
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	1a51      	subs	r1, r2, r1
 8001ffe:	6439      	str	r1, [r7, #64]	@ 0x40
 8002000:	4629      	mov	r1, r5
 8002002:	eb63 0301 	sbc.w	r3, r3, r1
 8002006:	647b      	str	r3, [r7, #68]	@ 0x44
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002014:	4649      	mov	r1, r9
 8002016:	018b      	lsls	r3, r1, #6
 8002018:	4641      	mov	r1, r8
 800201a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800201e:	4641      	mov	r1, r8
 8002020:	018a      	lsls	r2, r1, #6
 8002022:	4641      	mov	r1, r8
 8002024:	1a51      	subs	r1, r2, r1
 8002026:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002028:	4649      	mov	r1, r9
 800202a:	eb63 0301 	sbc.w	r3, r3, r1
 800202e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800203c:	4649      	mov	r1, r9
 800203e:	00cb      	lsls	r3, r1, #3
 8002040:	4641      	mov	r1, r8
 8002042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002046:	4641      	mov	r1, r8
 8002048:	00ca      	lsls	r2, r1, #3
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	4603      	mov	r3, r0
 8002050:	4622      	mov	r2, r4
 8002052:	189b      	adds	r3, r3, r2
 8002054:	633b      	str	r3, [r7, #48]	@ 0x30
 8002056:	462b      	mov	r3, r5
 8002058:	460a      	mov	r2, r1
 800205a:	eb42 0303 	adc.w	r3, r2, r3
 800205e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800206c:	4629      	mov	r1, r5
 800206e:	024b      	lsls	r3, r1, #9
 8002070:	4621      	mov	r1, r4
 8002072:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002076:	4621      	mov	r1, r4
 8002078:	024a      	lsls	r2, r1, #9
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002082:	2200      	movs	r2, #0
 8002084:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002088:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800208c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002090:	f7fe fdaa 	bl	8000be8 <__aeabi_uldivmod>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4613      	mov	r3, r2
 800209a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800209e:	e067      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a0:	4b75      	ldr	r3, [pc, #468]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x354>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	2200      	movs	r2, #0
 80020a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80020b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020ba:	2300      	movs	r3, #0
 80020bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80020c2:	4622      	mov	r2, r4
 80020c4:	462b      	mov	r3, r5
 80020c6:	f04f 0000 	mov.w	r0, #0
 80020ca:	f04f 0100 	mov.w	r1, #0
 80020ce:	0159      	lsls	r1, r3, #5
 80020d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d4:	0150      	lsls	r0, r2, #5
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4621      	mov	r1, r4
 80020dc:	1a51      	subs	r1, r2, r1
 80020de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80020e0:	4629      	mov	r1, r5
 80020e2:	eb63 0301 	sbc.w	r3, r3, r1
 80020e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80020f4:	4649      	mov	r1, r9
 80020f6:	018b      	lsls	r3, r1, #6
 80020f8:	4641      	mov	r1, r8
 80020fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020fe:	4641      	mov	r1, r8
 8002100:	018a      	lsls	r2, r1, #6
 8002102:	4641      	mov	r1, r8
 8002104:	ebb2 0a01 	subs.w	sl, r2, r1
 8002108:	4649      	mov	r1, r9
 800210a:	eb63 0b01 	sbc.w	fp, r3, r1
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800211a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800211e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002122:	4692      	mov	sl, r2
 8002124:	469b      	mov	fp, r3
 8002126:	4623      	mov	r3, r4
 8002128:	eb1a 0303 	adds.w	r3, sl, r3
 800212c:	623b      	str	r3, [r7, #32]
 800212e:	462b      	mov	r3, r5
 8002130:	eb4b 0303 	adc.w	r3, fp, r3
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002142:	4629      	mov	r1, r5
 8002144:	028b      	lsls	r3, r1, #10
 8002146:	4621      	mov	r1, r4
 8002148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800214c:	4621      	mov	r1, r4
 800214e:	028a      	lsls	r2, r1, #10
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002158:	2200      	movs	r2, #0
 800215a:	673b      	str	r3, [r7, #112]	@ 0x70
 800215c:	677a      	str	r2, [r7, #116]	@ 0x74
 800215e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002162:	f7fe fd41 	bl	8000be8 <__aeabi_uldivmod>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4613      	mov	r3, r2
 800216c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002170:	4b41      	ldr	r3, [pc, #260]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x354>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	0c1b      	lsrs	r3, r3, #16
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	3301      	adds	r3, #1
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002192:	e0eb      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002194:	4b38      	ldr	r3, [pc, #224]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x354>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800219c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a0:	4b35      	ldr	r3, [pc, #212]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x354>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d06b      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ac:	4b32      	ldr	r3, [pc, #200]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	2200      	movs	r2, #0
 80021b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021be:	663b      	str	r3, [r7, #96]	@ 0x60
 80021c0:	2300      	movs	r3, #0
 80021c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80021c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80021c8:	4622      	mov	r2, r4
 80021ca:	462b      	mov	r3, r5
 80021cc:	f04f 0000 	mov.w	r0, #0
 80021d0:	f04f 0100 	mov.w	r1, #0
 80021d4:	0159      	lsls	r1, r3, #5
 80021d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021da:	0150      	lsls	r0, r2, #5
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4621      	mov	r1, r4
 80021e2:	1a51      	subs	r1, r2, r1
 80021e4:	61b9      	str	r1, [r7, #24]
 80021e6:	4629      	mov	r1, r5
 80021e8:	eb63 0301 	sbc.w	r3, r3, r1
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80021fa:	4659      	mov	r1, fp
 80021fc:	018b      	lsls	r3, r1, #6
 80021fe:	4651      	mov	r1, sl
 8002200:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002204:	4651      	mov	r1, sl
 8002206:	018a      	lsls	r2, r1, #6
 8002208:	4651      	mov	r1, sl
 800220a:	ebb2 0801 	subs.w	r8, r2, r1
 800220e:	4659      	mov	r1, fp
 8002210:	eb63 0901 	sbc.w	r9, r3, r1
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002220:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002224:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002228:	4690      	mov	r8, r2
 800222a:	4699      	mov	r9, r3
 800222c:	4623      	mov	r3, r4
 800222e:	eb18 0303 	adds.w	r3, r8, r3
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	462b      	mov	r3, r5
 8002236:	eb49 0303 	adc.w	r3, r9, r3
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002248:	4629      	mov	r1, r5
 800224a:	024b      	lsls	r3, r1, #9
 800224c:	4621      	mov	r1, r4
 800224e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002252:	4621      	mov	r1, r4
 8002254:	024a      	lsls	r2, r1, #9
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800225e:	2200      	movs	r2, #0
 8002260:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002262:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002264:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002268:	f7fe fcbe 	bl	8000be8 <__aeabi_uldivmod>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4613      	mov	r3, r2
 8002272:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002276:	e065      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x420>
 8002278:	40023800 	.word	0x40023800
 800227c:	00f42400 	.word	0x00f42400
 8002280:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002284:	4b3d      	ldr	r3, [pc, #244]	@ (800237c <HAL_RCC_GetSysClockFreq+0x458>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	2200      	movs	r2, #0
 800228c:	4618      	mov	r0, r3
 800228e:	4611      	mov	r1, r2
 8002290:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002294:	653b      	str	r3, [r7, #80]	@ 0x50
 8002296:	2300      	movs	r3, #0
 8002298:	657b      	str	r3, [r7, #84]	@ 0x54
 800229a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800229e:	4642      	mov	r2, r8
 80022a0:	464b      	mov	r3, r9
 80022a2:	f04f 0000 	mov.w	r0, #0
 80022a6:	f04f 0100 	mov.w	r1, #0
 80022aa:	0159      	lsls	r1, r3, #5
 80022ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b0:	0150      	lsls	r0, r2, #5
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4641      	mov	r1, r8
 80022b8:	1a51      	subs	r1, r2, r1
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	4649      	mov	r1, r9
 80022be:	eb63 0301 	sbc.w	r3, r3, r1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80022d0:	4659      	mov	r1, fp
 80022d2:	018b      	lsls	r3, r1, #6
 80022d4:	4651      	mov	r1, sl
 80022d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022da:	4651      	mov	r1, sl
 80022dc:	018a      	lsls	r2, r1, #6
 80022de:	4651      	mov	r1, sl
 80022e0:	1a54      	subs	r4, r2, r1
 80022e2:	4659      	mov	r1, fp
 80022e4:	eb63 0501 	sbc.w	r5, r3, r1
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	00eb      	lsls	r3, r5, #3
 80022f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022f6:	00e2      	lsls	r2, r4, #3
 80022f8:	4614      	mov	r4, r2
 80022fa:	461d      	mov	r5, r3
 80022fc:	4643      	mov	r3, r8
 80022fe:	18e3      	adds	r3, r4, r3
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	464b      	mov	r3, r9
 8002304:	eb45 0303 	adc.w	r3, r5, r3
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002316:	4629      	mov	r1, r5
 8002318:	028b      	lsls	r3, r1, #10
 800231a:	4621      	mov	r1, r4
 800231c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002320:	4621      	mov	r1, r4
 8002322:	028a      	lsls	r2, r1, #10
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800232c:	2200      	movs	r2, #0
 800232e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002330:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002332:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002336:	f7fe fc57 	bl	8000be8 <__aeabi_uldivmod>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4613      	mov	r3, r2
 8002340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002344:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <HAL_RCC_GetSysClockFreq+0x458>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	0f1b      	lsrs	r3, r3, #28
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002362:	e003      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002366:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800236a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002370:	4618      	mov	r0, r3
 8002372:	37b8      	adds	r7, #184	@ 0xb8
 8002374:	46bd      	mov	sp, r7
 8002376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	00f42400 	.word	0x00f42400

08002384 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e28d      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8083 	beq.w	80024aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023a4:	4b94      	ldr	r3, [pc, #592]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d019      	beq.n	80023e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023b0:	4b91      	ldr	r3, [pc, #580]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023bc:	4b8e      	ldr	r3, [pc, #568]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023c8:	d00c      	beq.n	80023e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ca:	4b8b      	ldr	r3, [pc, #556]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023d2:	2b0c      	cmp	r3, #12
 80023d4:	d112      	bne.n	80023fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d6:	4b88      	ldr	r3, [pc, #544]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023e2:	d10b      	bne.n	80023fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	4b84      	ldr	r3, [pc, #528]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d05b      	beq.n	80024a8 <HAL_RCC_OscConfig+0x124>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d157      	bne.n	80024a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e25a      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002404:	d106      	bne.n	8002414 <HAL_RCC_OscConfig+0x90>
 8002406:	4b7c      	ldr	r3, [pc, #496]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a7b      	ldr	r2, [pc, #492]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e01d      	b.n	8002450 <HAL_RCC_OscConfig+0xcc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0xb4>
 800241e:	4b76      	ldr	r3, [pc, #472]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a75      	ldr	r2, [pc, #468]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 8002424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b73      	ldr	r3, [pc, #460]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a72      	ldr	r2, [pc, #456]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0xcc>
 8002438:	4b6f      	ldr	r3, [pc, #444]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a6e      	ldr	r2, [pc, #440]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 800243e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b6c      	ldr	r3, [pc, #432]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a6b      	ldr	r2, [pc, #428]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 800244a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800244e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7ff f95a 	bl	8001710 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff f956 	bl	8001710 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	@ 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e21f      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b61      	ldr	r3, [pc, #388]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0xdc>
 800247e:	e014      	b.n	80024aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7ff f946 	bl	8001710 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002488:	f7ff f942 	bl	8001710 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	@ 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e20b      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	4b57      	ldr	r3, [pc, #348]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x104>
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d06f      	beq.n	8002596 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024b6:	4b50      	ldr	r3, [pc, #320]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d017      	beq.n	80024f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024c2:	4b4d      	ldr	r3, [pc, #308]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d105      	bne.n	80024da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ce:	4b4a      	ldr	r3, [pc, #296]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024da:	4b47      	ldr	r3, [pc, #284]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	d11c      	bne.n	8002520 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e6:	4b44      	ldr	r3, [pc, #272]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d116      	bne.n	8002520 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	4b41      	ldr	r3, [pc, #260]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_RCC_OscConfig+0x186>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e1d3      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	4b3b      	ldr	r3, [pc, #236]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4937      	ldr	r1, [pc, #220]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	e03a      	b.n	8002596 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002528:	4b34      	ldr	r3, [pc, #208]	@ (80025fc <HAL_RCC_OscConfig+0x278>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7ff f8ef 	bl	8001710 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002536:	f7ff f8eb 	bl	8001710 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e1b4      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002548:	4b2b      	ldr	r3, [pc, #172]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b28      	ldr	r3, [pc, #160]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4925      	ldr	r1, [pc, #148]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]
 8002568:	e015      	b.n	8002596 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256a:	4b24      	ldr	r3, [pc, #144]	@ (80025fc <HAL_RCC_OscConfig+0x278>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7ff f8ce 	bl	8001710 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002578:	f7ff f8ca 	bl	8001710 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e193      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	4b1b      	ldr	r3, [pc, #108]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d036      	beq.n	8002610 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d016      	beq.n	80025d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025aa:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <HAL_RCC_OscConfig+0x27c>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7ff f8ae 	bl	8001710 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b8:	f7ff f8aa 	bl	8001710 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e173      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ca:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80025cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x234>
 80025d6:	e01b      	b.n	8002610 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d8:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <HAL_RCC_OscConfig+0x27c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7ff f897 	bl	8001710 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	e00e      	b.n	8002604 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e6:	f7ff f893 	bl	8001710 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d907      	bls.n	8002604 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e15c      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
 80025f8:	40023800 	.word	0x40023800
 80025fc:	42470000 	.word	0x42470000
 8002600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	4b8a      	ldr	r3, [pc, #552]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 8002606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ea      	bne.n	80025e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8097 	beq.w	800274c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b83      	ldr	r3, [pc, #524]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	4b7f      	ldr	r3, [pc, #508]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	4a7e      	ldr	r2, [pc, #504]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 8002638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800263c:	6413      	str	r3, [r2, #64]	@ 0x40
 800263e:	4b7c      	ldr	r3, [pc, #496]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264a:	2301      	movs	r3, #1
 800264c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	4b79      	ldr	r3, [pc, #484]	@ (8002834 <HAL_RCC_OscConfig+0x4b0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d118      	bne.n	800268c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265a:	4b76      	ldr	r3, [pc, #472]	@ (8002834 <HAL_RCC_OscConfig+0x4b0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a75      	ldr	r2, [pc, #468]	@ (8002834 <HAL_RCC_OscConfig+0x4b0>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002666:	f7ff f853 	bl	8001710 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266e:	f7ff f84f 	bl	8001710 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e118      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002680:	4b6c      	ldr	r3, [pc, #432]	@ (8002834 <HAL_RCC_OscConfig+0x4b0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x31e>
 8002694:	4b66      	ldr	r3, [pc, #408]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002698:	4a65      	ldr	r2, [pc, #404]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a0:	e01c      	b.n	80026dc <HAL_RCC_OscConfig+0x358>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x340>
 80026aa:	4b61      	ldr	r3, [pc, #388]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ae:	4a60      	ldr	r2, [pc, #384]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b6:	4b5e      	ldr	r3, [pc, #376]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ba:	4a5d      	ldr	r2, [pc, #372]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0x358>
 80026c4:	4b5a      	ldr	r3, [pc, #360]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c8:	4a59      	ldr	r2, [pc, #356]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d0:	4b57      	ldr	r3, [pc, #348]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d4:	4a56      	ldr	r2, [pc, #344]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 80026d6:	f023 0304 	bic.w	r3, r3, #4
 80026da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d015      	beq.n	8002710 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7ff f814 	bl	8001710 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7ff f810 	bl	8001710 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0d7      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002702:	4b4b      	ldr	r3, [pc, #300]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0ee      	beq.n	80026ec <HAL_RCC_OscConfig+0x368>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe fffe 	bl	8001710 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe fffa 	bl	8001710 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e0c1      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272e:	4b40      	ldr	r3, [pc, #256]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ee      	bne.n	8002718 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002740:	4b3b      	ldr	r3, [pc, #236]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	4a3a      	ldr	r2, [pc, #232]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800274a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80ad 	beq.w	80028b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002756:	4b36      	ldr	r3, [pc, #216]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b08      	cmp	r3, #8
 8002760:	d060      	beq.n	8002824 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d145      	bne.n	80027f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276a:	4b33      	ldr	r3, [pc, #204]	@ (8002838 <HAL_RCC_OscConfig+0x4b4>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe ffce 	bl	8001710 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002778:	f7fe ffca 	bl	8001710 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e093      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278a:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	019b      	lsls	r3, r3, #6
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	3b01      	subs	r3, #1
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	061b      	lsls	r3, r3, #24
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c0:	071b      	lsls	r3, r3, #28
 80027c2:	491b      	ldr	r1, [pc, #108]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <HAL_RCC_OscConfig+0x4b4>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fe ff9f 	bl	8001710 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d6:	f7fe ff9b 	bl	8001710 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e064      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e8:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x452>
 80027f4:	e05c      	b.n	80028b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <HAL_RCC_OscConfig+0x4b4>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe ff88 	bl	8001710 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe ff84 	bl	8001710 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e04d      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002816:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_RCC_OscConfig+0x4ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x480>
 8002822:	e045      	b.n	80028b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d107      	bne.n	800283c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e040      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
 8002830:	40023800 	.word	0x40023800
 8002834:	40007000 	.word	0x40007000
 8002838:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800283c:	4b1f      	ldr	r3, [pc, #124]	@ (80028bc <HAL_RCC_OscConfig+0x538>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d030      	beq.n	80028ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d129      	bne.n	80028ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d122      	bne.n	80028ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800286c:	4013      	ands	r3, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002872:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002874:	4293      	cmp	r3, r2
 8002876:	d119      	bne.n	80028ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	3b01      	subs	r3, #1
 8002886:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d10f      	bne.n	80028ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d107      	bne.n	80028ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800

080028c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e042      	b.n	8002958 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fd6c 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	@ 0x24
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f973 	bl	8002bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	@ 0x28
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b20      	cmp	r3, #32
 800297e:	d175      	bne.n	8002a6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_UART_Transmit+0x2c>
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e06e      	b.n	8002a6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2221      	movs	r2, #33	@ 0x21
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800299e:	f7fe feb7 	bl	8001710 <HAL_GetTick>
 80029a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	88fa      	ldrh	r2, [r7, #6]
 80029a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b8:	d108      	bne.n	80029cc <HAL_UART_Transmit+0x6c>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d104      	bne.n	80029cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	e003      	b.n	80029d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029d4:	e02e      	b.n	8002a34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2200      	movs	r2, #0
 80029de:	2180      	movs	r1, #128	@ 0x80
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f848 	bl	8002a76 <UART_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e03a      	b.n	8002a6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10b      	bne.n	8002a16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	3302      	adds	r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	e007      	b.n	8002a26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	3301      	adds	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1cb      	bne.n	80029d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2140      	movs	r1, #64	@ 0x40
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f814 	bl	8002a76 <UART_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e006      	b.n	8002a6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
  }
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	4613      	mov	r3, r2
 8002a84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a86:	e03b      	b.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a8e:	d037      	beq.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a90:	f7fe fe3e 	bl	8001710 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	6a3a      	ldr	r2, [r7, #32]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d302      	bcc.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e03a      	b.n	8002b20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d023      	beq.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b80      	cmp	r3, #128	@ 0x80
 8002abc:	d020      	beq.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b40      	cmp	r3, #64	@ 0x40
 8002ac2:	d01d      	beq.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d116      	bne.n	8002b00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f81d 	bl	8002b28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2208      	movs	r2, #8
 8002af2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e00f      	b.n	8002b20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d0b4      	beq.n	8002a88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b095      	sub	sp, #84	@ 0x54
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3a:	e853 3f00 	ldrex	r3, [r3]
 8002b3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b50:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b58:	e841 2300 	strex	r3, r2, [r1]
 8002b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e5      	bne.n	8002b30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3314      	adds	r3, #20
 8002b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3314      	adds	r3, #20
 8002b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b8c:	e841 2300 	strex	r3, r2, [r1]
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e5      	bne.n	8002b64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d119      	bne.n	8002bd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	e853 3f00 	ldrex	r3, [r3]
 8002bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f023 0310 	bic.w	r3, r3, #16
 8002bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bc0:	61ba      	str	r2, [r7, #24]
 8002bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc4:	6979      	ldr	r1, [r7, #20]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	e841 2300 	strex	r3, r2, [r1]
 8002bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e5      	bne.n	8002ba0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002be2:	bf00      	nop
 8002be4:	3754      	adds	r7, #84	@ 0x54
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf4:	b0c0      	sub	sp, #256	@ 0x100
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0c:	68d9      	ldr	r1, [r3, #12]
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	ea40 0301 	orr.w	r3, r0, r1
 8002c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c48:	f021 010c 	bic.w	r1, r1, #12
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c56:	430b      	orrs	r3, r1
 8002c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c6a:	6999      	ldr	r1, [r3, #24]
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	ea40 0301 	orr.w	r3, r0, r1
 8002c76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b8f      	ldr	r3, [pc, #572]	@ (8002ebc <UART_SetConfig+0x2cc>)
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d005      	beq.n	8002c90 <UART_SetConfig+0xa0>
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ec0 <UART_SetConfig+0x2d0>)
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d104      	bne.n	8002c9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c90:	f7ff f934 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 8002c94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c98:	e003      	b.n	8002ca2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c9a:	f7ff f91b 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8002c9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cac:	f040 810c 	bne.w	8002ec8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002cba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	462b      	mov	r3, r5
 8002cc6:	1891      	adds	r1, r2, r2
 8002cc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002cca:	415b      	adcs	r3, r3
 8002ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	eb12 0801 	adds.w	r8, r2, r1
 8002cd8:	4629      	mov	r1, r5
 8002cda:	eb43 0901 	adc.w	r9, r3, r1
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cf2:	4690      	mov	r8, r2
 8002cf4:	4699      	mov	r9, r3
 8002cf6:	4623      	mov	r3, r4
 8002cf8:	eb18 0303 	adds.w	r3, r8, r3
 8002cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d00:	462b      	mov	r3, r5
 8002d02:	eb49 0303 	adc.w	r3, r9, r3
 8002d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d1e:	460b      	mov	r3, r1
 8002d20:	18db      	adds	r3, r3, r3
 8002d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d24:	4613      	mov	r3, r2
 8002d26:	eb42 0303 	adc.w	r3, r2, r3
 8002d2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d34:	f7fd ff58 	bl	8000be8 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4b61      	ldr	r3, [pc, #388]	@ (8002ec4 <UART_SetConfig+0x2d4>)
 8002d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	011c      	lsls	r4, r3, #4
 8002d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d58:	4642      	mov	r2, r8
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	1891      	adds	r1, r2, r2
 8002d5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d60:	415b      	adcs	r3, r3
 8002d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d68:	4641      	mov	r1, r8
 8002d6a:	eb12 0a01 	adds.w	sl, r2, r1
 8002d6e:	4649      	mov	r1, r9
 8002d70:	eb43 0b01 	adc.w	fp, r3, r1
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d88:	4692      	mov	sl, r2
 8002d8a:	469b      	mov	fp, r3
 8002d8c:	4643      	mov	r3, r8
 8002d8e:	eb1a 0303 	adds.w	r3, sl, r3
 8002d92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d96:	464b      	mov	r3, r9
 8002d98:	eb4b 0303 	adc.w	r3, fp, r3
 8002d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002dac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002db0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002db4:	460b      	mov	r3, r1
 8002db6:	18db      	adds	r3, r3, r3
 8002db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dba:	4613      	mov	r3, r2
 8002dbc:	eb42 0303 	adc.w	r3, r2, r3
 8002dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002dc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002dca:	f7fd ff0d 	bl	8000be8 <__aeabi_uldivmod>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec4 <UART_SetConfig+0x2d4>)
 8002dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2264      	movs	r2, #100	@ 0x64
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	1acb      	subs	r3, r1, r3
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dea:	4b36      	ldr	r3, [pc, #216]	@ (8002ec4 <UART_SetConfig+0x2d4>)
 8002dec:	fba3 2302 	umull	r2, r3, r3, r2
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002df8:	441c      	add	r4, r3
 8002dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	464b      	mov	r3, r9
 8002e10:	1891      	adds	r1, r2, r2
 8002e12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e14:	415b      	adcs	r3, r3
 8002e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e1c:	4641      	mov	r1, r8
 8002e1e:	1851      	adds	r1, r2, r1
 8002e20:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e22:	4649      	mov	r1, r9
 8002e24:	414b      	adcs	r3, r1
 8002e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e34:	4659      	mov	r1, fp
 8002e36:	00cb      	lsls	r3, r1, #3
 8002e38:	4651      	mov	r1, sl
 8002e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e3e:	4651      	mov	r1, sl
 8002e40:	00ca      	lsls	r2, r1, #3
 8002e42:	4610      	mov	r0, r2
 8002e44:	4619      	mov	r1, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	4642      	mov	r2, r8
 8002e4a:	189b      	adds	r3, r3, r2
 8002e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e50:	464b      	mov	r3, r9
 8002e52:	460a      	mov	r2, r1
 8002e54:	eb42 0303 	adc.w	r3, r2, r3
 8002e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e70:	460b      	mov	r3, r1
 8002e72:	18db      	adds	r3, r3, r3
 8002e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e76:	4613      	mov	r3, r2
 8002e78:	eb42 0303 	adc.w	r3, r2, r3
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e86:	f7fd feaf 	bl	8000be8 <__aeabi_uldivmod>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec4 <UART_SetConfig+0x2d4>)
 8002e90:	fba3 1302 	umull	r1, r3, r3, r2
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	2164      	movs	r1, #100	@ 0x64
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	3332      	adds	r3, #50	@ 0x32
 8002ea2:	4a08      	ldr	r2, [pc, #32]	@ (8002ec4 <UART_SetConfig+0x2d4>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	f003 0207 	and.w	r2, r3, #7
 8002eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4422      	add	r2, r4
 8002eb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002eb8:	e106      	b.n	80030c8 <UART_SetConfig+0x4d8>
 8002eba:	bf00      	nop
 8002ebc:	40011000 	.word	0x40011000
 8002ec0:	40011400 	.word	0x40011400
 8002ec4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ed2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ed6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002eda:	4642      	mov	r2, r8
 8002edc:	464b      	mov	r3, r9
 8002ede:	1891      	adds	r1, r2, r2
 8002ee0:	6239      	str	r1, [r7, #32]
 8002ee2:	415b      	adcs	r3, r3
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eea:	4641      	mov	r1, r8
 8002eec:	1854      	adds	r4, r2, r1
 8002eee:	4649      	mov	r1, r9
 8002ef0:	eb43 0501 	adc.w	r5, r3, r1
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	00eb      	lsls	r3, r5, #3
 8002efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f02:	00e2      	lsls	r2, r4, #3
 8002f04:	4614      	mov	r4, r2
 8002f06:	461d      	mov	r5, r3
 8002f08:	4643      	mov	r3, r8
 8002f0a:	18e3      	adds	r3, r4, r3
 8002f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f10:	464b      	mov	r3, r9
 8002f12:	eb45 0303 	adc.w	r3, r5, r3
 8002f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f36:	4629      	mov	r1, r5
 8002f38:	008b      	lsls	r3, r1, #2
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f40:	4621      	mov	r1, r4
 8002f42:	008a      	lsls	r2, r1, #2
 8002f44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f48:	f7fd fe4e 	bl	8000be8 <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4b60      	ldr	r3, [pc, #384]	@ (80030d4 <UART_SetConfig+0x4e4>)
 8002f52:	fba3 2302 	umull	r2, r3, r3, r2
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	011c      	lsls	r4, r3, #4
 8002f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f6c:	4642      	mov	r2, r8
 8002f6e:	464b      	mov	r3, r9
 8002f70:	1891      	adds	r1, r2, r2
 8002f72:	61b9      	str	r1, [r7, #24]
 8002f74:	415b      	adcs	r3, r3
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	1851      	adds	r1, r2, r1
 8002f80:	6139      	str	r1, [r7, #16]
 8002f82:	4649      	mov	r1, r9
 8002f84:	414b      	adcs	r3, r1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f94:	4659      	mov	r1, fp
 8002f96:	00cb      	lsls	r3, r1, #3
 8002f98:	4651      	mov	r1, sl
 8002f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f9e:	4651      	mov	r1, sl
 8002fa0:	00ca      	lsls	r2, r1, #3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4642      	mov	r2, r8
 8002faa:	189b      	adds	r3, r3, r2
 8002fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002fb0:	464b      	mov	r3, r9
 8002fb2:	460a      	mov	r2, r1
 8002fb4:	eb42 0303 	adc.w	r3, r2, r3
 8002fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	008b      	lsls	r3, r1, #2
 8002fd8:	4641      	mov	r1, r8
 8002fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fde:	4641      	mov	r1, r8
 8002fe0:	008a      	lsls	r2, r1, #2
 8002fe2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fe6:	f7fd fdff 	bl	8000be8 <__aeabi_uldivmod>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4b38      	ldr	r3, [pc, #224]	@ (80030d4 <UART_SetConfig+0x4e4>)
 8002ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2264      	movs	r2, #100	@ 0x64
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	1acb      	subs	r3, r1, r3
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	3332      	adds	r3, #50	@ 0x32
 8003004:	4a33      	ldr	r2, [pc, #204]	@ (80030d4 <UART_SetConfig+0x4e4>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003010:	441c      	add	r4, r3
 8003012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003016:	2200      	movs	r2, #0
 8003018:	673b      	str	r3, [r7, #112]	@ 0x70
 800301a:	677a      	str	r2, [r7, #116]	@ 0x74
 800301c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003020:	4642      	mov	r2, r8
 8003022:	464b      	mov	r3, r9
 8003024:	1891      	adds	r1, r2, r2
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	415b      	adcs	r3, r3
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003030:	4641      	mov	r1, r8
 8003032:	1851      	adds	r1, r2, r1
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	4649      	mov	r1, r9
 8003038:	414b      	adcs	r3, r1
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003048:	4659      	mov	r1, fp
 800304a:	00cb      	lsls	r3, r1, #3
 800304c:	4651      	mov	r1, sl
 800304e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003052:	4651      	mov	r1, sl
 8003054:	00ca      	lsls	r2, r1, #3
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	4603      	mov	r3, r0
 800305c:	4642      	mov	r2, r8
 800305e:	189b      	adds	r3, r3, r2
 8003060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003062:	464b      	mov	r3, r9
 8003064:	460a      	mov	r2, r1
 8003066:	eb42 0303 	adc.w	r3, r2, r3
 800306a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	663b      	str	r3, [r7, #96]	@ 0x60
 8003076:	667a      	str	r2, [r7, #100]	@ 0x64
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003084:	4649      	mov	r1, r9
 8003086:	008b      	lsls	r3, r1, #2
 8003088:	4641      	mov	r1, r8
 800308a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800308e:	4641      	mov	r1, r8
 8003090:	008a      	lsls	r2, r1, #2
 8003092:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003096:	f7fd fda7 	bl	8000be8 <__aeabi_uldivmod>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4b0d      	ldr	r3, [pc, #52]	@ (80030d4 <UART_SetConfig+0x4e4>)
 80030a0:	fba3 1302 	umull	r1, r3, r3, r2
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	2164      	movs	r1, #100	@ 0x64
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	3332      	adds	r3, #50	@ 0x32
 80030b2:	4a08      	ldr	r2, [pc, #32]	@ (80030d4 <UART_SetConfig+0x4e4>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	f003 020f 	and.w	r2, r3, #15
 80030be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4422      	add	r2, r4
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030ce:	46bd      	mov	sp, r7
 80030d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030d4:	51eb851f 	.word	0x51eb851f

080030d8 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d009      	beq.n	80030fc <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80030e8:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80030ea:	461a      	mov	r2, r3
        err.type, err.code);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80030f2:	6839      	ldr	r1, [r7, #0]
 80030f4:	4807      	ldr	r0, [pc, #28]	@ (8003114 <ai_log_err+0x3c>)
 80030f6:	f002 ff8b 	bl	8006010 <iprintf>
 80030fa:	e009      	b.n	8003110 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80030fc:	793b      	ldrb	r3, [r7, #4]
 80030fe:	4619      	mov	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003106:	461a      	mov	r2, r3
 8003108:	4803      	ldr	r0, [pc, #12]	@ (8003118 <ai_log_err+0x40>)
 800310a:	f002 ff81 	bl	8006010 <iprintf>

  do {} while (1);
 800310e:	bf00      	nop
 8003110:	bf00      	nop
 8003112:	e7fd      	b.n	8003110 <ai_log_err+0x38>
 8003114:	080082e8 	.word	0x080082e8
 8003118:	0800831c 	.word	0x0800831c

0800311c <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_sine_model_create_and_init(&sine_model, act_addr, NULL);
 8003124:	2200      	movs	r2, #0
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4828      	ldr	r0, [pc, #160]	@ (80031cc <ai_boostrap+0xb0>)
 800312a:	f000 fa61 	bl	80035f0 <ai_sine_model_create_and_init>
 800312e:	4603      	mov	r3, r0
 8003130:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8003132:	7b3b      	ldrb	r3, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_sine_model_create_and_init");
 8003138:	4925      	ldr	r1, [pc, #148]	@ (80031d0 <ai_boostrap+0xb4>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f7ff ffcc 	bl	80030d8 <ai_log_err>
    return -1;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003144:	e03e      	b.n	80031c4 <ai_boostrap+0xa8>
  }

  ai_input = ai_sine_model_inputs_get(sine_model, NULL);
 8003146:	4b21      	ldr	r3, [pc, #132]	@ (80031cc <ai_boostrap+0xb0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f000 facd 	bl	80036ec <ai_sine_model_inputs_get>
 8003152:	4603      	mov	r3, r0
 8003154:	4a1f      	ldr	r2, [pc, #124]	@ (80031d4 <ai_boostrap+0xb8>)
 8003156:	6013      	str	r3, [r2, #0]
  ai_output = ai_sine_model_outputs_get(sine_model, NULL);
 8003158:	4b1c      	ldr	r3, [pc, #112]	@ (80031cc <ai_boostrap+0xb0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fade 	bl	8003720 <ai_sine_model_outputs_get>
 8003164:	4603      	mov	r3, r0
 8003166:	4a1c      	ldr	r2, [pc, #112]	@ (80031d8 <ai_boostrap+0xbc>)
 8003168:	6013      	str	r3, [r2, #0]

#if defined(AI_SINE_MODEL_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_SINE_MODEL_IN_NUM; idx++) {
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e00f      	b.n	8003190 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8003170:	4b18      	ldr	r3, [pc, #96]	@ (80031d4 <ai_boostrap+0xb8>)
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4916      	ldr	r1, [pc, #88]	@ (80031dc <ai_boostrap+0xc0>)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SINE_MODEL_IN_NUM; idx++) {
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	3301      	adds	r3, #1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	ddec      	ble.n	8003170 <ai_boostrap+0x54>

#if defined(AI_SINE_MODEL_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_SINE_MODEL_OUT_NUM; idx++) {
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	e00f      	b.n	80031bc <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800319c:	4b0e      	ldr	r3, [pc, #56]	@ (80031d8 <ai_boostrap+0xbc>)
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	490c      	ldr	r1, [pc, #48]	@ (80031e0 <ai_boostrap+0xc4>)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SINE_MODEL_OUT_NUM; idx++) {
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	3301      	adds	r3, #1
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	ddec      	ble.n	800319c <ai_boostrap+0x80>
  for (int idx=0; idx < AI_SINE_MODEL_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	200009c0 	.word	0x200009c0
 80031d0:	0800834c 	.word	0x0800834c
 80031d4:	200009c4 	.word	0x200009c4
 80031d8:	200009c8 	.word	0x200009c8
 80031dc:	2000091c 	.word	0x2000091c
 80031e0:	20000920 	.word	0x20000920

080031e4 <ai_run>:

static int ai_run(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_sine_model_run(sine_model, ai_input, ai_output);
 80031ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003228 <ai_run+0x44>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a0f      	ldr	r2, [pc, #60]	@ (800322c <ai_run+0x48>)
 80031f0:	6811      	ldr	r1, [r2, #0]
 80031f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003230 <ai_run+0x4c>)
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fae8 	bl	80037cc <ai_sine_model_run>
 80031fc:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d00c      	beq.n	800321e <ai_run+0x3a>
    ai_log_err(ai_sine_model_get_error(sine_model),
 8003204:	4b08      	ldr	r3, [pc, #32]	@ (8003228 <ai_run+0x44>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f9cf 	bl	80035ac <ai_sine_model_get_error>
 800320e:	4603      	mov	r3, r0
 8003210:	4908      	ldr	r1, [pc, #32]	@ (8003234 <ai_run+0x50>)
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff ff60 	bl	80030d8 <ai_log_err>
        "ai_sine_model_run");
    return -1;
 8003218:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800321c:	e000      	b.n	8003220 <ai_run+0x3c>
  }

  return 0;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	200009c0 	.word	0x200009c0
 800322c:	200009c4 	.word	0x200009c4
 8003230:	200009c8 	.word	0x200009c8
 8003234:	0800836c 	.word	0x0800836c

08003238 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <post_process>:

int post_process(ai_i8* data[])
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8003268:	4803      	ldr	r0, [pc, #12]	@ (8003278 <MX_X_CUBE_AI_Init+0x14>)
 800326a:	f002 ff39 	bl	80060e0 <puts>

  ai_boostrap(data_activations0);
 800326e:	4803      	ldr	r0, [pc, #12]	@ (800327c <MX_X_CUBE_AI_Init+0x18>)
 8003270:	f7ff ff54 	bl	800311c <ai_boostrap>
    /* USER CODE END 5 */
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}
 8003278:	08008380 	.word	0x08008380
 800327c:	2000000c 	.word	0x2000000c

08003280 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800328a:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 800328c:	4816      	ldr	r0, [pc, #88]	@ (80032e8 <MX_X_CUBE_AI_Process+0x68>)
 800328e:	f002 ff27 	bl	80060e0 <puts>

  if (sine_model) {
 8003292:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <MX_X_CUBE_AI_Process+0x6c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d013      	beq.n	80032c2 <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800329a:	4815      	ldr	r0, [pc, #84]	@ (80032f0 <MX_X_CUBE_AI_Process+0x70>)
 800329c:	f7ff ffcc 	bl	8003238 <acquire_and_process_data>
 80032a0:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 80032a8:	f7ff ff9c 	bl	80031e4 <ai_run>
 80032ac:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d103      	bne.n	80032bc <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 80032b4:	480f      	ldr	r0, [pc, #60]	@ (80032f4 <MX_X_CUBE_AI_Process+0x74>)
 80032b6:	f7ff ffca 	bl	800324e <post_process>
 80032ba:	6078      	str	r0, [r7, #4]
    } while (res==0);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0eb      	beq.n	800329a <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80032c8:	2311      	movs	r3, #17
 80032ca:	703b      	strb	r3, [r7, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2210      	movs	r2, #16
 80032d0:	f362 231f 	bfi	r3, r2, #8, #24
 80032d4:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 80032d6:	4908      	ldr	r1, [pc, #32]	@ (80032f8 <MX_X_CUBE_AI_Process+0x78>)
 80032d8:	6838      	ldr	r0, [r7, #0]
 80032da:	f7ff fefd 	bl	80030d8 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	080083a0 	.word	0x080083a0
 80032ec:	200009c0 	.word	0x200009c0
 80032f0:	2000091c 	.word	0x2000091c
 80032f4:	20000920 	.word	0x20000920
 80032f8:	080083bc 	.word	0x080083bc

080032fc <sine_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sine_model_activations_map, 1, params)) {
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	2101      	movs	r1, #1
 800330a:	4825      	ldr	r0, [pc, #148]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 800330c:	f000 fb38 	bl	8003980 <ai_platform_get_activations_map>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d039      	beq.n	800338a <sine_model_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    serving_default_dense_input0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 60);
 8003316:	4b22      	ldr	r3, [pc, #136]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	333c      	adds	r3, #60	@ 0x3c
 800331c:	4a21      	ldr	r2, [pc, #132]	@ (80033a4 <sine_model_configure_activations+0xa8>)
 800331e:	6093      	str	r3, [r2, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 60);
 8003320:	4b1f      	ldr	r3, [pc, #124]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	333c      	adds	r3, #60	@ 0x3c
 8003326:	4a1f      	ldr	r2, [pc, #124]	@ (80033a4 <sine_model_configure_activations+0xa8>)
 8003328:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 800332a:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3340      	adds	r3, #64	@ 0x40
 8003330:	4a1d      	ldr	r2, [pc, #116]	@ (80033a8 <sine_model_configure_activations+0xac>)
 8003332:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8003334:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3340      	adds	r3, #64	@ 0x40
 800333a:	4a1b      	ldr	r2, [pc, #108]	@ (80033a8 <sine_model_configure_activations+0xac>)
 800333c:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 800333e:	4b18      	ldr	r3, [pc, #96]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3340      	adds	r3, #64	@ 0x40
 8003344:	4a19      	ldr	r2, [pc, #100]	@ (80033ac <sine_model_configure_activations+0xb0>)
 8003346:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8003348:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3340      	adds	r3, #64	@ 0x40
 800334e:	4a17      	ldr	r2, [pc, #92]	@ (80033ac <sine_model_configure_activations+0xb0>)
 8003350:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8003352:	4b13      	ldr	r3, [pc, #76]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a16      	ldr	r2, [pc, #88]	@ (80033b0 <sine_model_configure_activations+0xb4>)
 8003358:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 800335a:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a14      	ldr	r2, [pc, #80]	@ (80033b0 <sine_model_configure_activations+0xb4>)
 8003360:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8003362:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3340      	adds	r3, #64	@ 0x40
 8003368:	4a12      	ldr	r2, [pc, #72]	@ (80033b4 <sine_model_configure_activations+0xb8>)
 800336a:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 800336c:	4b0c      	ldr	r3, [pc, #48]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3340      	adds	r3, #64	@ 0x40
 8003372:	4a10      	ldr	r2, [pc, #64]	@ (80033b4 <sine_model_configure_activations+0xb8>)
 8003374:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8003376:	4b0a      	ldr	r3, [pc, #40]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a0f      	ldr	r2, [pc, #60]	@ (80033b8 <sine_model_configure_activations+0xbc>)
 800337c:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 800337e:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <sine_model_configure_activations+0xa4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a0d      	ldr	r2, [pc, #52]	@ (80033b8 <sine_model_configure_activations+0xbc>)
 8003384:	60d3      	str	r3, [r2, #12]
    return true;
 8003386:	2301      	movs	r3, #1
 8003388:	e005      	b.n	8003396 <sine_model_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800338a:	2213      	movs	r2, #19
 800338c:	2130      	movs	r1, #48	@ 0x30
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fbb4 	bl	8003afc <ai_platform_network_set_error>
  return false;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200009cc 	.word	0x200009cc
 80033a4:	20000010 	.word	0x20000010
 80033a8:	20000020 	.word	0x20000020
 80033ac:	20000030 	.word	0x20000030
 80033b0:	20000040 	.word	0x20000040
 80033b4:	20000050 	.word	0x20000050
 80033b8:	20000060 	.word	0x20000060

080033bc <sine_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sine_model_weights_map, 1, params)) {
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	2101      	movs	r1, #1
 80033ca:	483b      	ldr	r0, [pc, #236]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 80033cc:	f000 fa84 	bl	80038d8 <ai_platform_get_weights_map>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d065      	beq.n	80034a2 <sine_model_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80033d6:	4b39      	ldr	r3, [pc, #228]	@ (80034bc <sine_model_configure_weights+0x100>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033de:	4a37      	ldr	r2, [pc, #220]	@ (80034bc <sine_model_configure_weights+0x100>)
 80033e0:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 0);
 80033e2:	4b35      	ldr	r3, [pc, #212]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a35      	ldr	r2, [pc, #212]	@ (80034bc <sine_model_configure_weights+0x100>)
 80033e8:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 0);
 80033ea:	4b33      	ldr	r3, [pc, #204]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a33      	ldr	r2, [pc, #204]	@ (80034bc <sine_model_configure_weights+0x100>)
 80033f0:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80033f2:	4b33      	ldr	r3, [pc, #204]	@ (80034c0 <sine_model_configure_weights+0x104>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033fa:	4a31      	ldr	r2, [pc, #196]	@ (80034c0 <sine_model_configure_weights+0x104>)
 80033fc:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 64);
 80033fe:	4b2e      	ldr	r3, [pc, #184]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3340      	adds	r3, #64	@ 0x40
 8003404:	4a2e      	ldr	r2, [pc, #184]	@ (80034c0 <sine_model_configure_weights+0x104>)
 8003406:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 64);
 8003408:	4b2b      	ldr	r3, [pc, #172]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3340      	adds	r3, #64	@ 0x40
 800340e:	4a2c      	ldr	r2, [pc, #176]	@ (80034c0 <sine_model_configure_weights+0x104>)
 8003410:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8003412:	4b2c      	ldr	r3, [pc, #176]	@ (80034c4 <sine_model_configure_weights+0x108>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800341a:	4a2a      	ldr	r2, [pc, #168]	@ (80034c4 <sine_model_configure_weights+0x108>)
 800341c:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 128);
 800341e:	4b26      	ldr	r3, [pc, #152]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3380      	adds	r3, #128	@ 0x80
 8003424:	4a27      	ldr	r2, [pc, #156]	@ (80034c4 <sine_model_configure_weights+0x108>)
 8003426:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 128);
 8003428:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3380      	adds	r3, #128	@ 0x80
 800342e:	4a25      	ldr	r2, [pc, #148]	@ (80034c4 <sine_model_configure_weights+0x108>)
 8003430:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003432:	4b25      	ldr	r3, [pc, #148]	@ (80034c8 <sine_model_configure_weights+0x10c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800343a:	4a23      	ldr	r2, [pc, #140]	@ (80034c8 <sine_model_configure_weights+0x10c>)
 800343c:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1152);
 800343e:	4b1e      	ldr	r3, [pc, #120]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8003446:	4a20      	ldr	r2, [pc, #128]	@ (80034c8 <sine_model_configure_weights+0x10c>)
 8003448:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1152);
 800344a:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8003452:	4a1d      	ldr	r2, [pc, #116]	@ (80034c8 <sine_model_configure_weights+0x10c>)
 8003454:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8003456:	4b1d      	ldr	r3, [pc, #116]	@ (80034cc <sine_model_configure_weights+0x110>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800345e:	4a1b      	ldr	r2, [pc, #108]	@ (80034cc <sine_model_configure_weights+0x110>)
 8003460:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 1216);
 8003462:	4b15      	ldr	r3, [pc, #84]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800346a:	4a18      	ldr	r2, [pc, #96]	@ (80034cc <sine_model_configure_weights+0x110>)
 800346c:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1216);
 800346e:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8003476:	4a15      	ldr	r2, [pc, #84]	@ (80034cc <sine_model_configure_weights+0x110>)
 8003478:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800347a:	4b15      	ldr	r3, [pc, #84]	@ (80034d0 <sine_model_configure_weights+0x114>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003482:	4a13      	ldr	r2, [pc, #76]	@ (80034d0 <sine_model_configure_weights+0x114>)
 8003484:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1280);
 8003486:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348e:	4a10      	ldr	r2, [pc, #64]	@ (80034d0 <sine_model_configure_weights+0x114>)
 8003490:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1280);
 8003492:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <sine_model_configure_weights+0xfc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349a:	4a0d      	ldr	r2, [pc, #52]	@ (80034d0 <sine_model_configure_weights+0x114>)
 800349c:	60d3      	str	r3, [r2, #12]
    return true;
 800349e:	2301      	movs	r3, #1
 80034a0:	e005      	b.n	80034ae <sine_model_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80034a2:	2212      	movs	r2, #18
 80034a4:	2130      	movs	r1, #48	@ 0x30
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fb28 	bl	8003afc <ai_platform_network_set_error>
  return false;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200009d0 	.word	0x200009d0
 80034bc:	20000070 	.word	0x20000070
 80034c0:	20000080 	.word	0x20000080
 80034c4:	20000090 	.word	0x20000090
 80034c8:	200000a0 	.word	0x200000a0
 80034cc:	200000b0 	.word	0x200000b0
 80034d0:	200000c0 	.word	0x200000c0

080034d4 <ai_sine_model_get_report>:


AI_API_ENTRY
ai_bool ai_sine_model_get_report(
  ai_handle network, ai_network_report* report)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b0a6      	sub	sp, #152	@ 0x98
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 faf8 	bl	8003ad4 <ai_platform_context_acquire>
 80034e4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

  if (report && net_ctx)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d04a      	beq.n	8003584 <ai_sine_model_get_report+0xb0>
 80034ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d046      	beq.n	8003584 <ai_sine_model_get_report+0xb0>
  {
    ai_network_report r = {
 80034f6:	f107 0308 	add.w	r3, r7, #8
 80034fa:	2288      	movs	r2, #136	@ 0x88
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f002 feee 	bl	80062e0 <memset>
 8003504:	4b22      	ldr	r3, [pc, #136]	@ (8003590 <ai_sine_model_get_report+0xbc>)
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	4b22      	ldr	r3, [pc, #136]	@ (8003594 <ai_sine_model_get_report+0xc0>)
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	4b22      	ldr	r3, [pc, #136]	@ (8003598 <ai_sine_model_get_report+0xc4>)
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	4b22      	ldr	r3, [pc, #136]	@ (800359c <ai_sine_model_get_report+0xc8>)
 8003512:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_SINE_MODEL_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8003514:	f000 faaa 	bl	8003a6c <ai_platform_runtime_get_revision>
 8003518:	4603      	mov	r3, r0
    ai_network_report r = {
 800351a:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 800351c:	f000 faaa 	bl	8003a74 <ai_platform_runtime_get_version>
 8003520:	4603      	mov	r3, r0
 8003522:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8003524:	4b1e      	ldr	r3, [pc, #120]	@ (80035a0 <ai_sine_model_get_report+0xcc>)
 8003526:	623b      	str	r3, [r7, #32]
 8003528:	2309      	movs	r3, #9
 800352a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 800352e:	f000 faa5 	bl	8003a7c <ai_platform_api_get_version>
 8003532:	4603      	mov	r3, r0
 8003534:	62fb      	str	r3, [r7, #44]	@ 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8003536:	f000 fab7 	bl	8003aa8 <ai_platform_interface_api_get_version>
 800353a:	4603      	mov	r3, r0
 800353c:	633b      	str	r3, [r7, #48]	@ 0x30
    ai_network_report r = {
 800353e:	f240 1261 	movw	r2, #353	@ 0x161
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800354a:	4b16      	ldr	r3, [pc, #88]	@ (80035a4 <ai_sine_model_get_report+0xd0>)
 800354c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800354e:	4b16      	ldr	r3, [pc, #88]	@ (80035a8 <ai_sine_model_get_report+0xd4>)
 8003550:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0xc74ea0c3,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8003554:	f107 0308 	add.w	r3, r7, #8
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fbbe 	bl	8003cdc <ai_platform_api_get_network_report>
 8003560:	4603      	mov	r3, r0
 8003562:	f083 0301 	eor.w	r3, r3, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <ai_sine_model_get_report+0x9c>
 800356c:	2300      	movs	r3, #0
 800356e:	e00a      	b.n	8003586 <ai_sine_model_get_report+0xb2>

    *report = r;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f107 0308 	add.w	r3, r7, #8
 8003578:	2288      	movs	r2, #136	@ 0x88
 800357a:	4619      	mov	r1, r3
 800357c:	f002 ff3f 	bl	80063fe <memcpy>
    return true;
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <ai_sine_model_get_report+0xb2>
  }
  return false;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3798      	adds	r7, #152	@ 0x98
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	080083d0 	.word	0x080083d0
 8003594:	080083dc 	.word	0x080083dc
 8003598:	08008400 	.word	0x08008400
 800359c:	0800841c 	.word	0x0800841c
 80035a0:	08008434 	.word	0x08008434
 80035a4:	a1facade 	.word	0xa1facade
 80035a8:	c74ea0c3 	.word	0xc74ea0c3

080035ac <ai_sine_model_get_error>:


AI_API_ENTRY
ai_error ai_sine_model_get_error(ai_handle network)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fa95 	bl	8003ae4 <ai_platform_network_get_error>
 80035ba:	4603      	mov	r3, r0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <ai_sine_model_create>:


AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80035ce:	2300      	movs	r3, #0
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	2305      	movs	r3, #5
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	2301      	movs	r3, #1
 80035d8:	4a04      	ldr	r2, [pc, #16]	@ (80035ec <ai_sine_model_create+0x28>)
 80035da:	6839      	ldr	r1, [r7, #0]
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fd2b 	bl	8004038 <ai_platform_network_create>
 80035e2:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200005f4 	.word	0x200005f4

080035f0 <ai_sine_model_create_and_init>:


AI_API_ENTRY
ai_error ai_sine_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b094      	sub	sp, #80	@ 0x50
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_sine_model_create(network, AI_SINE_MODEL_DATA_CONFIG);
 80035fc:	2100      	movs	r1, #0
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f7ff ffe0 	bl	80035c4 <ai_sine_model_create>
 8003604:	4603      	mov	r3, r0
 8003606:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8003608:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <ai_sine_model_create_and_init+0x24>
    return err;
 8003610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003612:	e067      	b.n	80036e4 <ai_sine_model_create_and_init+0xf4>
  }
  
  if (ai_sine_model_data_params_get(&params) != true) {
 8003614:	f107 0310 	add.w	r3, r7, #16
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f8e7 	bl	80037ec <ai_sine_model_data_params_get>
 800361e:	4603      	mov	r3, r0
 8003620:	f083 0301 	eor.w	r3, r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <ai_sine_model_create_and_init+0x4c>
    err = ai_sine_model_get_error(*network);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff ffbc 	bl	80035ac <ai_sine_model_get_error>
 8003634:	4603      	mov	r3, r0
 8003636:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8003638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800363a:	e053      	b.n	80036e4 <ai_sine_model_create_and_init+0xf4>
  }
#if defined(AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800363c:	2300      	movs	r3, #0
 800363e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003642:	e012      	b.n	800366a <ai_sine_model_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8003644:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8003648:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	4413      	add	r3, r2
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	f107 0310 	add.w	r3, r7, #16
 8003658:	330c      	adds	r3, #12
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f92c 	bl	80038b8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8003660:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003664:	3301      	adds	r3, #1
 8003666:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <ai_sine_model_create_and_init+0x8a>
 8003670:	8bfb      	ldrh	r3, [r7, #30]
 8003672:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8003676:	429a      	cmp	r2, r3
 8003678:	d3e4      	bcc.n	8003644 <ai_sine_model_create_and_init+0x54>
  }
#endif
#if defined(AI_SINE_MODEL_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800367a:	2300      	movs	r3, #0
 800367c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003680:	e012      	b.n	80036a8 <ai_sine_model_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8003682:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8003686:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	f107 0310 	add.w	r3, r7, #16
 8003696:	3304      	adds	r3, #4
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f90d 	bl	80038b8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800369e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80036a2:	3301      	adds	r3, #1
 80036a4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <ai_sine_model_create_and_init+0xc8>
 80036ae:	8afb      	ldrh	r3, [r7, #22]
 80036b0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d3e4      	bcc.n	8003682 <ai_sine_model_create_and_init+0x92>
  }
#endif
  if (ai_sine_model_init(*network, &params) != true) {
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f107 0210 	add.w	r2, r7, #16
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f846 	bl	8003754 <ai_sine_model_init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f083 0301 	eor.w	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d006      	beq.n	80036e2 <ai_sine_model_create_and_init+0xf2>
    err = ai_sine_model_get_error(*network);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff ff67 	bl	80035ac <ai_sine_model_get_error>
 80036de:	4603      	mov	r3, r0
 80036e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 80036e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3750      	adds	r7, #80	@ 0x50
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <ai_sine_model_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_sine_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d104      	bne.n	8003706 <ai_sine_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <ai_sine_model_inputs_get+0x2c>)
 80036fe:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a06      	ldr	r2, [pc, #24]	@ (800371c <ai_sine_model_inputs_get+0x30>)
 8003704:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f9fd 	bl	8003b08 <ai_platform_inputs_get>
 800370e:	4603      	mov	r3, r0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	200005f4 	.word	0x200005f4
 800371c:	a1c00100 	.word	0xa1c00100

08003720 <ai_sine_model_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_sine_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d104      	bne.n	800373a <ai_sine_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8003730:	4b06      	ldr	r3, [pc, #24]	@ (800374c <ai_sine_model_outputs_get+0x2c>)
 8003732:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a06      	ldr	r2, [pc, #24]	@ (8003750 <ai_sine_model_outputs_get+0x30>)
 8003738:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800373a:	6839      	ldr	r1, [r7, #0]
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fa59 	bl	8003bf4 <ai_platform_outputs_get>
 8003742:	4603      	mov	r3, r0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200005f4 	.word	0x200005f4
 8003750:	a1c00100 	.word	0xa1c00100

08003754 <ai_sine_model_init>:


AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800375e:	6839      	ldr	r1, [r7, #0]
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fcab 	bl	80040bc <ai_platform_network_init>
 8003766:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8003768:	2301      	movs	r3, #1
 800376a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <ai_sine_model_init+0x22>
 8003772:	2300      	movs	r3, #0
 8003774:	e026      	b.n	80037c4 <ai_sine_model_init+0x70>
  ok &= sine_model_configure_weights(net_ctx, params);
 8003776:	6839      	ldr	r1, [r7, #0]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f7ff fe1f 	bl	80033bc <sine_model_configure_weights>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	7afb      	ldrb	r3, [r7, #11]
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	bf14      	ite	ne
 800378a:	2301      	movne	r3, #1
 800378c:	2300      	moveq	r3, #0
 800378e:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, params);
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f7ff fdb2 	bl	80032fc <sine_model_configure_activations>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	7afb      	ldrb	r3, [r7, #11]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fd54 	bl	8004258 <ai_platform_network_post_init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	461a      	mov	r2, r3
 80037b4:	7afb      	ldrb	r3, [r7, #11]
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	72fb      	strb	r3, [r7, #11]

  return ok;
 80037c2:	7afb      	ldrb	r3, [r7, #11]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fd6b 	bl	80042b8 <ai_platform_network_process>
 80037e2:	4603      	mov	r3, r0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <ai_sine_model_data_params_get>:
 * @ingroup sine_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_sine_model_data_params_get(ai_network_params* params)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <ai_sine_model_data_params_get+0x12>
 80037fa:	2300      	movs	r3, #0
 80037fc:	e016      	b.n	800382c <ai_sine_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 80037fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003834 <ai_sine_model_data_params_get+0x48>)
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003808:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT, g_sine_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800380c:	4a0a      	ldr	r2, [pc, #40]	@ (8003838 <ai_sine_model_data_params_get+0x4c>)
 800380e:	f107 0308 	add.w	r3, r7, #8
 8003812:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003816:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SINE_MODEL_DATA_WEIGHTS_COUNT, g_sine_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800381a:	f107 0210 	add.w	r2, r7, #16
 800381e:	f107 0308 	add.w	r3, r7, #8
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f8ff 	bl	8003a28 <ai_platform_bind_network_params>
 800382a:	4603      	mov	r3, r0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	08008458 	.word	0x08008458
 8003838:	08008460 	.word	0x08008460

0800383c <ai_buffer_get_size>:
 800383c:	b378      	cbz	r0, 800389e <ai_buffer_get_size+0x62>
 800383e:	b410      	push	{r4}
 8003840:	6803      	ldr	r3, [r0, #0]
 8003842:	4a17      	ldr	r2, [pc, #92]	@ (80038a0 <ai_buffer_get_size+0x64>)
 8003844:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8003848:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800384c:	4293      	cmp	r3, r2
 800384e:	d01e      	beq.n	800388e <ai_buffer_get_size+0x52>
 8003850:	6984      	ldr	r4, [r0, #24]
 8003852:	6862      	ldr	r2, [r4, #4]
 8003854:	7d03      	ldrb	r3, [r0, #20]
 8003856:	6941      	ldr	r1, [r0, #20]
 8003858:	f1a3 0301 	sub.w	r3, r3, #1
 800385c:	fab3 f383 	clz	r3, r3
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8003866:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800386a:	da0b      	bge.n	8003884 <ai_buffer_get_size+0x48>
 800386c:	2b01      	cmp	r3, #1
 800386e:	d102      	bne.n	8003876 <ai_buffer_get_size+0x3a>
 8003870:	2802      	cmp	r0, #2
 8003872:	d007      	beq.n	8003884 <ai_buffer_get_size+0x48>
 8003874:	2302      	movs	r3, #2
 8003876:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800387a:	3301      	adds	r3, #1
 800387c:	4298      	cmp	r0, r3
 800387e:	fb01 f202 	mul.w	r2, r1, r2
 8003882:	d1f3      	bne.n	800386c <ai_buffer_get_size+0x30>
 8003884:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	2900      	cmp	r1, #0
 8003890:	d0de      	beq.n	8003850 <ai_buffer_get_size+0x14>
 8003892:	6984      	ldr	r4, [r0, #24]
 8003894:	6862      	ldr	r2, [r4, #4]
 8003896:	321f      	adds	r2, #31
 8003898:	f022 021f 	bic.w	r2, r2, #31
 800389c:	e7da      	b.n	8003854 <ai_buffer_get_size+0x18>
 800389e:	4770      	bx	lr
 80038a0:	000400c0 	.word	0x000400c0

080038a4 <ai_buffer_array_sane>:
 80038a4:	b138      	cbz	r0, 80038b6 <ai_buffer_array_sane+0x12>
 80038a6:	6843      	ldr	r3, [r0, #4]
 80038a8:	b123      	cbz	r3, 80038b4 <ai_buffer_array_sane+0x10>
 80038aa:	8840      	ldrh	r0, [r0, #2]
 80038ac:	3800      	subs	r0, #0
 80038ae:	bf18      	it	ne
 80038b0:	2001      	movne	r0, #1
 80038b2:	4770      	bx	lr
 80038b4:	4618      	mov	r0, r3
 80038b6:	4770      	bx	lr

080038b8 <ai_buffer_array_item_set_address>:
 80038b8:	b150      	cbz	r0, 80038d0 <ai_buffer_array_item_set_address+0x18>
 80038ba:	6843      	ldr	r3, [r0, #4]
 80038bc:	b14b      	cbz	r3, 80038d2 <ai_buffer_array_item_set_address+0x1a>
 80038be:	8840      	ldrh	r0, [r0, #2]
 80038c0:	b900      	cbnz	r0, 80038c4 <ai_buffer_array_item_set_address+0xc>
 80038c2:	4770      	bx	lr
 80038c4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80038c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80038cc:	2001      	movs	r0, #1
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	4770      	bx	lr
 80038d2:	4618      	mov	r0, r3
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop

080038d8 <ai_platform_get_weights_map>:
 80038d8:	2a00      	cmp	r2, #0
 80038da:	d037      	beq.n	800394c <ai_platform_get_weights_map+0x74>
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	4604      	mov	r4, r0
 80038e0:	b1a0      	cbz	r0, 800390c <ai_platform_get_weights_map+0x34>
 80038e2:	460f      	mov	r7, r1
 80038e4:	b191      	cbz	r1, 800390c <ai_platform_get_weights_map+0x34>
 80038e6:	4b25      	ldr	r3, [pc, #148]	@ (800397c <ai_platform_get_weights_map+0xa4>)
 80038e8:	6810      	ldr	r0, [r2, #0]
 80038ea:	4298      	cmp	r0, r3
 80038ec:	4615      	mov	r5, r2
 80038ee:	d00f      	beq.n	8003910 <ai_platform_get_weights_map+0x38>
 80038f0:	6855      	ldr	r5, [r2, #4]
 80038f2:	b15d      	cbz	r5, 800390c <ai_platform_get_weights_map+0x34>
 80038f4:	682e      	ldr	r6, [r5, #0]
 80038f6:	429e      	cmp	r6, r3
 80038f8:	d02a      	beq.n	8003950 <ai_platform_get_weights_map+0x78>
 80038fa:	f1a1 0001 	sub.w	r0, r1, #1
 80038fe:	6025      	str	r5, [r4, #0]
 8003900:	fab0 f080 	clz	r0, r0
 8003904:	0940      	lsrs	r0, r0, #5
 8003906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003908:	42a7      	cmp	r7, r4
 800390a:	d034      	beq.n	8003976 <ai_platform_get_weights_map+0x9e>
 800390c:	2000      	movs	r0, #0
 800390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003910:	1d10      	adds	r0, r2, #4
 8003912:	f7ff ffc7 	bl	80038a4 <ai_buffer_array_sane>
 8003916:	2800      	cmp	r0, #0
 8003918:	d0f8      	beq.n	800390c <ai_platform_get_weights_map+0x34>
 800391a:	88eb      	ldrh	r3, [r5, #6]
 800391c:	429f      	cmp	r7, r3
 800391e:	d1f5      	bne.n	800390c <ai_platform_get_weights_map+0x34>
 8003920:	f04f 0c00 	mov.w	ip, #0
 8003924:	1f20      	subs	r0, r4, #4
 8003926:	46e6      	mov	lr, ip
 8003928:	68ab      	ldr	r3, [r5, #8]
 800392a:	4463      	add	r3, ip
 800392c:	f10c 0c1c 	add.w	ip, ip, #28
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	b12b      	cbz	r3, 8003940 <ai_platform_get_weights_map+0x68>
 8003934:	f10e 0e01 	add.w	lr, lr, #1
 8003938:	4577      	cmp	r7, lr
 800393a:	f840 3f04 	str.w	r3, [r0, #4]!
 800393e:	d1f3      	bne.n	8003928 <ai_platform_get_weights_map+0x50>
 8003940:	eba7 000e 	sub.w	r0, r7, lr
 8003944:	fab0 f080 	clz	r0, r0
 8003948:	0940      	lsrs	r0, r0, #5
 800394a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800394c:	2000      	movs	r0, #0
 800394e:	4770      	bx	lr
 8003950:	1f20      	subs	r0, r4, #4
 8003952:	462a      	mov	r2, r5
 8003954:	2400      	movs	r4, #0
 8003956:	e000      	b.n	800395a <ai_platform_get_weights_map+0x82>
 8003958:	461c      	mov	r4, r3
 800395a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800395e:	42b3      	cmp	r3, r6
 8003960:	d0d2      	beq.n	8003908 <ai_platform_get_weights_map+0x30>
 8003962:	f840 3f04 	str.w	r3, [r0, #4]!
 8003966:	1c63      	adds	r3, r4, #1
 8003968:	429f      	cmp	r7, r3
 800396a:	d1f5      	bne.n	8003958 <ai_platform_get_weights_map+0x80>
 800396c:	3402      	adds	r4, #2
 800396e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003972:	42b3      	cmp	r3, r6
 8003974:	d1ca      	bne.n	800390c <ai_platform_get_weights_map+0x34>
 8003976:	2001      	movs	r0, #1
 8003978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800397a:	bf00      	nop
 800397c:	a1facade 	.word	0xa1facade

08003980 <ai_platform_get_activations_map>:
 8003980:	2a00      	cmp	r2, #0
 8003982:	d038      	beq.n	80039f6 <ai_platform_get_activations_map+0x76>
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	4604      	mov	r4, r0
 8003988:	b1a0      	cbz	r0, 80039b4 <ai_platform_get_activations_map+0x34>
 800398a:	460f      	mov	r7, r1
 800398c:	b191      	cbz	r1, 80039b4 <ai_platform_get_activations_map+0x34>
 800398e:	4b25      	ldr	r3, [pc, #148]	@ (8003a24 <ai_platform_get_activations_map+0xa4>)
 8003990:	6810      	ldr	r0, [r2, #0]
 8003992:	4298      	cmp	r0, r3
 8003994:	4615      	mov	r5, r2
 8003996:	d00f      	beq.n	80039b8 <ai_platform_get_activations_map+0x38>
 8003998:	6a15      	ldr	r5, [r2, #32]
 800399a:	b15d      	cbz	r5, 80039b4 <ai_platform_get_activations_map+0x34>
 800399c:	682e      	ldr	r6, [r5, #0]
 800399e:	429e      	cmp	r6, r3
 80039a0:	d02b      	beq.n	80039fa <ai_platform_get_activations_map+0x7a>
 80039a2:	f1a1 0001 	sub.w	r0, r1, #1
 80039a6:	6025      	str	r5, [r4, #0]
 80039a8:	fab0 f080 	clz	r0, r0
 80039ac:	0940      	lsrs	r0, r0, #5
 80039ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b0:	42a7      	cmp	r7, r4
 80039b2:	d035      	beq.n	8003a20 <ai_platform_get_activations_map+0xa0>
 80039b4:	2000      	movs	r0, #0
 80039b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b8:	f102 000c 	add.w	r0, r2, #12
 80039bc:	f7ff ff72 	bl	80038a4 <ai_buffer_array_sane>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d0f7      	beq.n	80039b4 <ai_platform_get_activations_map+0x34>
 80039c4:	89eb      	ldrh	r3, [r5, #14]
 80039c6:	429f      	cmp	r7, r3
 80039c8:	d1f4      	bne.n	80039b4 <ai_platform_get_activations_map+0x34>
 80039ca:	f04f 0c00 	mov.w	ip, #0
 80039ce:	1f20      	subs	r0, r4, #4
 80039d0:	46e6      	mov	lr, ip
 80039d2:	692b      	ldr	r3, [r5, #16]
 80039d4:	4463      	add	r3, ip
 80039d6:	f10c 0c1c 	add.w	ip, ip, #28
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	b12b      	cbz	r3, 80039ea <ai_platform_get_activations_map+0x6a>
 80039de:	f10e 0e01 	add.w	lr, lr, #1
 80039e2:	4577      	cmp	r7, lr
 80039e4:	f840 3f04 	str.w	r3, [r0, #4]!
 80039e8:	d1f3      	bne.n	80039d2 <ai_platform_get_activations_map+0x52>
 80039ea:	eba7 000e 	sub.w	r0, r7, lr
 80039ee:	fab0 f080 	clz	r0, r0
 80039f2:	0940      	lsrs	r0, r0, #5
 80039f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039f6:	2000      	movs	r0, #0
 80039f8:	4770      	bx	lr
 80039fa:	1f20      	subs	r0, r4, #4
 80039fc:	462a      	mov	r2, r5
 80039fe:	2400      	movs	r4, #0
 8003a00:	e000      	b.n	8003a04 <ai_platform_get_activations_map+0x84>
 8003a02:	461c      	mov	r4, r3
 8003a04:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8003a08:	42b3      	cmp	r3, r6
 8003a0a:	d0d1      	beq.n	80039b0 <ai_platform_get_activations_map+0x30>
 8003a0c:	f840 3f04 	str.w	r3, [r0, #4]!
 8003a10:	1c63      	adds	r3, r4, #1
 8003a12:	429f      	cmp	r7, r3
 8003a14:	d1f5      	bne.n	8003a02 <ai_platform_get_activations_map+0x82>
 8003a16:	3402      	adds	r4, #2
 8003a18:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003a1c:	42b3      	cmp	r3, r6
 8003a1e:	d1c9      	bne.n	80039b4 <ai_platform_get_activations_map+0x34>
 8003a20:	2001      	movs	r0, #1
 8003a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a24:	a1facade 	.word	0xa1facade

08003a28 <ai_platform_bind_network_params>:
 8003a28:	b1a0      	cbz	r0, 8003a54 <ai_platform_bind_network_params+0x2c>
 8003a2a:	b1b1      	cbz	r1, 8003a5a <ai_platform_bind_network_params+0x32>
 8003a2c:	b1c2      	cbz	r2, 8003a60 <ai_platform_bind_network_params+0x38>
 8003a2e:	b410      	push	{r4}
 8003a30:	4603      	mov	r3, r0
 8003a32:	4c0d      	ldr	r4, [pc, #52]	@ (8003a68 <ai_platform_bind_network_params+0x40>)
 8003a34:	f843 4b04 	str.w	r4, [r3], #4
 8003a38:	f100 0c0c 	add.w	ip, r0, #12
 8003a3c:	c903      	ldmia	r1, {r0, r1}
 8003a3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003a42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a46:	e88c 0003 	stmia.w	ip, {r0, r1}
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	4603      	mov	r3, r0
 8003a56:	4618      	mov	r0, r3
 8003a58:	4770      	bx	lr
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	4770      	bx	lr
 8003a60:	4613      	mov	r3, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	a1facade 	.word	0xa1facade

08003a6c <ai_platform_runtime_get_revision>:
 8003a6c:	4800      	ldr	r0, [pc, #0]	@ (8003a70 <ai_platform_runtime_get_revision+0x4>)
 8003a6e:	4770      	bx	lr
 8003a70:	080089c8 	.word	0x080089c8

08003a74 <ai_platform_runtime_get_version>:
 8003a74:	b082      	sub	sp, #8
 8003a76:	2009      	movs	r0, #9
 8003a78:	b002      	add	sp, #8
 8003a7a:	4770      	bx	lr

08003a7c <ai_platform_api_get_version>:
 8003a7c:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <ai_platform_api_get_version+0x28>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2000      	movs	r0, #0
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	f362 0007 	bfi	r0, r2, #0, #8
 8003a88:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003a8c:	f362 200f 	bfi	r0, r2, #8, #8
 8003a90:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003a94:	f362 4017 	bfi	r0, r2, #16, #8
 8003a98:	0e1b      	lsrs	r3, r3, #24
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	f363 601f 	bfi	r0, r3, #24, #8
 8003aa0:	b002      	add	sp, #8
 8003aa2:	4770      	bx	lr
 8003aa4:	080089cc 	.word	0x080089cc

08003aa8 <ai_platform_interface_api_get_version>:
 8003aa8:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <ai_platform_interface_api_get_version+0x28>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2000      	movs	r0, #0
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	f362 0007 	bfi	r0, r2, #0, #8
 8003ab4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003ab8:	f362 200f 	bfi	r0, r2, #8, #8
 8003abc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003ac0:	f362 4017 	bfi	r0, r2, #16, #8
 8003ac4:	0e1b      	lsrs	r3, r3, #24
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	f363 601f 	bfi	r0, r3, #24, #8
 8003acc:	b002      	add	sp, #8
 8003ace:	4770      	bx	lr
 8003ad0:	080089d0 	.word	0x080089d0

08003ad4 <ai_platform_context_acquire>:
 8003ad4:	6802      	ldr	r2, [r0, #0]
 8003ad6:	4b02      	ldr	r3, [pc, #8]	@ (8003ae0 <ai_platform_context_acquire+0xc>)
 8003ad8:	4393      	bics	r3, r2
 8003ada:	bf18      	it	ne
 8003adc:	2000      	movne	r0, #0
 8003ade:	4770      	bx	lr
 8003ae0:	a1c00100 	.word	0xa1c00100

08003ae4 <ai_platform_network_get_error>:
 8003ae4:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <ai_platform_network_get_error+0x14>)
 8003ae6:	6802      	ldr	r2, [r0, #0]
 8003ae8:	4393      	bics	r3, r2
 8003aea:	d102      	bne.n	8003af2 <ai_platform_network_get_error+0xe>
 8003aec:	300c      	adds	r0, #12
 8003aee:	f000 be25 	b.w	800473c <core_get_error>
 8003af2:	f241 0010 	movw	r0, #4112	@ 0x1010
 8003af6:	4770      	bx	lr
 8003af8:	a1c00100 	.word	0xa1c00100

08003afc <ai_platform_network_set_error>:
 8003afc:	b110      	cbz	r0, 8003b04 <ai_platform_network_set_error+0x8>
 8003afe:	300c      	adds	r0, #12
 8003b00:	f000 be22 	b.w	8004748 <core_set_error>
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop

08003b08 <ai_platform_inputs_get>:
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	4b38      	ldr	r3, [pc, #224]	@ (8003bf0 <ai_platform_inputs_get+0xe8>)
 8003b0e:	6802      	ldr	r2, [r0, #0]
 8003b10:	b085      	sub	sp, #20
 8003b12:	4393      	bics	r3, r2
 8003b14:	9003      	str	r0, [sp, #12]
 8003b16:	9102      	str	r1, [sp, #8]
 8003b18:	d160      	bne.n	8003bdc <ai_platform_inputs_get+0xd4>
 8003b1a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d04f      	beq.n	8003bc0 <ai_platform_inputs_get+0xb8>
 8003b20:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8003b24:	f1ba 0f00 	cmp.w	sl, #0
 8003b28:	d04a      	beq.n	8003bc0 <ai_platform_inputs_get+0xb8>
 8003b2a:	f04f 0b00 	mov.w	fp, #0
 8003b2e:	465d      	mov	r5, fp
 8003b30:	e016      	b.n	8003b60 <ai_platform_inputs_get+0x58>
 8003b32:	9901      	ldr	r1, [sp, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	507a      	str	r2, [r7, r1]
 8003b38:	69b1      	ldr	r1, [r6, #24]
 8003b3a:	684e      	ldr	r6, [r1, #4]
 8003b3c:	60a3      	str	r3, [r4, #8]
 8003b3e:	f04f 0201 	mov.w	r2, #1
 8003b42:	7522      	strb	r2, [r4, #20]
 8003b44:	6961      	ldr	r1, [r4, #20]
 8003b46:	6020      	str	r0, [r4, #0]
 8003b48:	f369 211f 	bfi	r1, r9, #8, #24
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8003b52:	e9c4 1805 	strd	r1, r8, [r4, #20]
 8003b56:	f8c4 c004 	str.w	ip, [r4, #4]
 8003b5a:	3501      	adds	r5, #1
 8003b5c:	f10b 0b1c 	add.w	fp, fp, #28
 8003b60:	f8ba 3000 	ldrh.w	r3, [sl]
 8003b64:	42ab      	cmp	r3, r5
 8003b66:	b2aa      	uxth	r2, r5
 8003b68:	d93c      	bls.n	8003be4 <ai_platform_inputs_get+0xdc>
 8003b6a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003b6e:	00e9      	lsls	r1, r5, #3
 8003b70:	9101      	str	r1, [sp, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d036      	beq.n	8003be4 <ai_platform_inputs_get+0xdc>
 8003b76:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003b7a:	2e00      	cmp	r6, #0
 8003b7c:	d032      	beq.n	8003be4 <ai_platform_inputs_get+0xdc>
 8003b7e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003b82:	69b2      	ldr	r2, [r6, #24]
 8003b84:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003b88:	6810      	ldr	r0, [r2, #0]
 8003b8a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003b8e:	68b3      	ldr	r3, [r6, #8]
 8003b90:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003b94:	f001 fb64 	bl	8005260 <ai_array_to_buffer_fmt>
 8003b98:	69b1      	ldr	r1, [r6, #24]
 8003b9a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8003b9e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003ba2:	445c      	add	r4, fp
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0c8      	beq.n	8003b3a <ai_platform_inputs_get+0x32>
 8003ba8:	2100      	movs	r1, #0
 8003baa:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003bae:	6831      	ldr	r1, [r6, #0]
 8003bb0:	6059      	str	r1, [r3, #4]
 8003bb2:	b111      	cbz	r1, 8003bba <ai_platform_inputs_get+0xb2>
 8003bb4:	8849      	ldrh	r1, [r1, #2]
 8003bb6:	2900      	cmp	r1, #0
 8003bb8:	d1bb      	bne.n	8003b32 <ai_platform_inputs_get+0x2a>
 8003bba:	69b1      	ldr	r1, [r6, #24]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e7bc      	b.n	8003b3a <ai_platform_inputs_get+0x32>
 8003bc0:	9803      	ldr	r0, [sp, #12]
 8003bc2:	2218      	movs	r2, #24
 8003bc4:	2111      	movs	r1, #17
 8003bc6:	300c      	adds	r0, #12
 8003bc8:	f000 fdbe 	bl	8004748 <core_set_error>
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4610      	mov	r0, r2
 8003bd0:	9b02      	ldr	r3, [sp, #8]
 8003bd2:	b103      	cbz	r3, 8003bd6 <ai_platform_inputs_get+0xce>
 8003bd4:	801a      	strh	r2, [r3, #0]
 8003bd6:	b005      	add	sp, #20
 8003bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bdc:	2000      	movs	r0, #0
 8003bde:	b005      	add	sp, #20
 8003be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be4:	2a00      	cmp	r2, #0
 8003be6:	d0eb      	beq.n	8003bc0 <ai_platform_inputs_get+0xb8>
 8003be8:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003bec:	6858      	ldr	r0, [r3, #4]
 8003bee:	e7ef      	b.n	8003bd0 <ai_platform_inputs_get+0xc8>
 8003bf0:	a1c00100 	.word	0xa1c00100

08003bf4 <ai_platform_outputs_get>:
 8003bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf8:	4b37      	ldr	r3, [pc, #220]	@ (8003cd8 <ai_platform_outputs_get+0xe4>)
 8003bfa:	6802      	ldr	r2, [r0, #0]
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	4393      	bics	r3, r2
 8003c00:	9003      	str	r0, [sp, #12]
 8003c02:	9102      	str	r1, [sp, #8]
 8003c04:	d15d      	bne.n	8003cc2 <ai_platform_outputs_get+0xce>
 8003c06:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d94c      	bls.n	8003ca6 <ai_platform_outputs_get+0xb2>
 8003c0c:	f04f 0b00 	mov.w	fp, #0
 8003c10:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8003c14:	465d      	mov	r5, fp
 8003c16:	46d8      	mov	r8, fp
 8003c18:	e016      	b.n	8003c48 <ai_platform_outputs_get+0x54>
 8003c1a:	9a01      	ldr	r2, [sp, #4]
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	50b9      	str	r1, [r7, r2]
 8003c20:	69b2      	ldr	r2, [r6, #24]
 8003c22:	6856      	ldr	r6, [r2, #4]
 8003c24:	6020      	str	r0, [r4, #0]
 8003c26:	f04f 0201 	mov.w	r2, #1
 8003c2a:	7522      	strb	r2, [r4, #20]
 8003c2c:	6960      	ldr	r0, [r4, #20]
 8003c2e:	f8c4 c004 	str.w	ip, [r4, #4]
 8003c32:	f369 201f 	bfi	r0, r9, #8, #24
 8003c36:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8003c3a:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8003c3e:	9b00      	ldr	r3, [sp, #0]
 8003c40:	61a3      	str	r3, [r4, #24]
 8003c42:	3501      	adds	r5, #1
 8003c44:	f10b 0b1c 	add.w	fp, fp, #28
 8003c48:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003c4c:	42ab      	cmp	r3, r5
 8003c4e:	b2aa      	uxth	r2, r5
 8003c50:	d93b      	bls.n	8003cca <ai_platform_outputs_get+0xd6>
 8003c52:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003c56:	00e9      	lsls	r1, r5, #3
 8003c58:	9101      	str	r1, [sp, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d035      	beq.n	8003cca <ai_platform_outputs_get+0xd6>
 8003c5e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003c62:	2e00      	cmp	r6, #0
 8003c64:	d031      	beq.n	8003cca <ai_platform_outputs_get+0xd6>
 8003c66:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003c6a:	69b2      	ldr	r2, [r6, #24]
 8003c6c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003c70:	68b3      	ldr	r3, [r6, #8]
 8003c72:	6810      	ldr	r0, [r2, #0]
 8003c74:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003c78:	68f3      	ldr	r3, [r6, #12]
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	f001 faf0 	bl	8005260 <ai_array_to_buffer_fmt>
 8003c80:	69b2      	ldr	r2, [r6, #24]
 8003c82:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8003c86:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8003c8a:	445c      	add	r4, fp
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0c8      	beq.n	8003c22 <ai_platform_outputs_get+0x2e>
 8003c90:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 8003c94:	6832      	ldr	r2, [r6, #0]
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	b112      	cbz	r2, 8003ca0 <ai_platform_outputs_get+0xac>
 8003c9a:	8852      	ldrh	r2, [r2, #2]
 8003c9c:	2a00      	cmp	r2, #0
 8003c9e:	d1bc      	bne.n	8003c1a <ai_platform_outputs_get+0x26>
 8003ca0:	69b2      	ldr	r2, [r6, #24]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e7bd      	b.n	8003c22 <ai_platform_outputs_get+0x2e>
 8003ca6:	9803      	ldr	r0, [sp, #12]
 8003ca8:	2218      	movs	r2, #24
 8003caa:	2111      	movs	r1, #17
 8003cac:	300c      	adds	r0, #12
 8003cae:	f000 fd4b 	bl	8004748 <core_set_error>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	9b02      	ldr	r3, [sp, #8]
 8003cb8:	b103      	cbz	r3, 8003cbc <ai_platform_outputs_get+0xc8>
 8003cba:	801a      	strh	r2, [r3, #0]
 8003cbc:	b005      	add	sp, #20
 8003cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	b005      	add	sp, #20
 8003cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cca:	2a00      	cmp	r2, #0
 8003ccc:	d0eb      	beq.n	8003ca6 <ai_platform_outputs_get+0xb2>
 8003cce:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003cd2:	6858      	ldr	r0, [r3, #4]
 8003cd4:	e7ef      	b.n	8003cb6 <ai_platform_outputs_get+0xc2>
 8003cd6:	bf00      	nop
 8003cd8:	a1c00100 	.word	0xa1c00100

08003cdc <ai_platform_api_get_network_report>:
 8003cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce0:	4ba4      	ldr	r3, [pc, #656]	@ (8003f74 <ai_platform_api_get_network_report+0x298>)
 8003ce2:	6802      	ldr	r2, [r0, #0]
 8003ce4:	b089      	sub	sp, #36	@ 0x24
 8003ce6:	4393      	bics	r3, r2
 8003ce8:	9002      	str	r0, [sp, #8]
 8003cea:	9103      	str	r1, [sp, #12]
 8003cec:	d164      	bne.n	8003db8 <ai_platform_api_get_network_report+0xdc>
 8003cee:	2900      	cmp	r1, #0
 8003cf0:	d075      	beq.n	8003dde <ai_platform_api_get_network_report+0x102>
 8003cf2:	2400      	movs	r4, #0
 8003cf4:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8003cf6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003cf8:	b143      	cbz	r3, 8003d0c <ai_platform_api_get_network_report+0x30>
 8003cfa:	3401      	adds	r4, #1
 8003cfc:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d003      	beq.n	8003d0c <ai_platform_api_get_network_report+0x30>
 8003d04:	b112      	cbz	r2, 8003d0c <ai_platform_api_get_network_report+0x30>
 8003d06:	4613      	mov	r3, r2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f6      	bne.n	8003cfa <ai_platform_api_get_network_report+0x1e>
 8003d0c:	2c00      	cmp	r4, #0
 8003d0e:	f000 812a 	beq.w	8003f66 <ai_platform_api_get_network_report+0x28a>
 8003d12:	9a02      	ldr	r2, [sp, #8]
 8003d14:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d053      	beq.n	8003dc2 <ai_platform_api_get_network_report+0xe6>
 8003d1a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8003d1e:	f1ba 0f00 	cmp.w	sl, #0
 8003d22:	d04e      	beq.n	8003dc2 <ai_platform_api_get_network_report+0xe6>
 8003d24:	f04f 0b00 	mov.w	fp, #0
 8003d28:	465d      	mov	r5, fp
 8003d2a:	e015      	b.n	8003d58 <ai_platform_api_get_network_report+0x7c>
 8003d2c:	00e9      	lsls	r1, r5, #3
 8003d2e:	2201      	movs	r2, #1
 8003d30:	507a      	str	r2, [r7, r1]
 8003d32:	69b1      	ldr	r1, [r6, #24]
 8003d34:	6849      	ldr	r1, [r1, #4]
 8003d36:	60a3      	str	r3, [r4, #8]
 8003d38:	f04f 0201 	mov.w	r2, #1
 8003d3c:	7522      	strb	r2, [r4, #20]
 8003d3e:	6963      	ldr	r3, [r4, #20]
 8003d40:	6121      	str	r1, [r4, #16]
 8003d42:	f369 231f 	bfi	r3, r9, #8, #24
 8003d46:	e9c4 0c00 	strd	r0, ip, [r4]
 8003d4a:	e9c4 3805 	strd	r3, r8, [r4, #20]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	60e2      	str	r2, [r4, #12]
 8003d52:	3501      	adds	r5, #1
 8003d54:	f10b 0b1c 	add.w	fp, fp, #28
 8003d58:	f8ba 3000 	ldrh.w	r3, [sl]
 8003d5c:	42ab      	cmp	r3, r5
 8003d5e:	b2aa      	uxth	r2, r5
 8003d60:	d942      	bls.n	8003de8 <ai_platform_api_get_network_report+0x10c>
 8003d62:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d03e      	beq.n	8003de8 <ai_platform_api_get_network_report+0x10c>
 8003d6a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003d6e:	2e00      	cmp	r6, #0
 8003d70:	d03a      	beq.n	8003de8 <ai_platform_api_get_network_report+0x10c>
 8003d72:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003d76:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003d7a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003d7e:	69b3      	ldr	r3, [r6, #24]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	68b3      	ldr	r3, [r6, #8]
 8003d84:	00ea      	lsls	r2, r5, #3
 8003d86:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003d8a:	9201      	str	r2, [sp, #4]
 8003d8c:	f001 fa68 	bl	8005260 <ai_array_to_buffer_fmt>
 8003d90:	69b1      	ldr	r1, [r6, #24]
 8003d92:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8003d96:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003d9a:	445c      	add	r4, fp
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0c9      	beq.n	8003d34 <ai_platform_api_get_network_report+0x58>
 8003da0:	2100      	movs	r1, #0
 8003da2:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003da6:	6831      	ldr	r1, [r6, #0]
 8003da8:	6059      	str	r1, [r3, #4]
 8003daa:	b111      	cbz	r1, 8003db2 <ai_platform_api_get_network_report+0xd6>
 8003dac:	8849      	ldrh	r1, [r1, #2]
 8003dae:	2900      	cmp	r1, #0
 8003db0:	d1bc      	bne.n	8003d2c <ai_platform_api_get_network_report+0x50>
 8003db2:	69b1      	ldr	r1, [r6, #24]
 8003db4:	2300      	movs	r3, #0
 8003db6:	e7bd      	b.n	8003d34 <ai_platform_api_get_network_report+0x58>
 8003db8:	2400      	movs	r4, #0
 8003dba:	4620      	mov	r0, r4
 8003dbc:	b009      	add	sp, #36	@ 0x24
 8003dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc2:	9b03      	ldr	r3, [sp, #12]
 8003dc4:	9802      	ldr	r0, [sp, #8]
 8003dc6:	2400      	movs	r4, #0
 8003dc8:	63dc      	str	r4, [r3, #60]	@ 0x3c
 8003dca:	871c      	strh	r4, [r3, #56]	@ 0x38
 8003dcc:	2218      	movs	r2, #24
 8003dce:	2112      	movs	r1, #18
 8003dd0:	300c      	adds	r0, #12
 8003dd2:	f000 fcb9 	bl	8004748 <core_set_error>
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	b009      	add	sp, #36	@ 0x24
 8003dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dde:	460c      	mov	r4, r1
 8003de0:	4620      	mov	r0, r4
 8003de2:	b009      	add	sp, #36	@ 0x24
 8003de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de8:	2a00      	cmp	r2, #0
 8003dea:	d0ea      	beq.n	8003dc2 <ai_platform_api_get_network_report+0xe6>
 8003dec:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003df0:	9903      	ldr	r1, [sp, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8003df6:	9b02      	ldr	r3, [sp, #8]
 8003df8:	870a      	strh	r2, [r1, #56]	@ 0x38
 8003dfa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	f240 80a4 	bls.w	8003f4a <ai_platform_api_get_network_report+0x26e>
 8003e02:	9b02      	ldr	r3, [sp, #8]
 8003e04:	f04f 0900 	mov.w	r9, #0
 8003e08:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8003e0c:	464d      	mov	r5, r9
 8003e0e:	46cb      	mov	fp, r9
 8003e10:	e016      	b.n	8003e40 <ai_platform_api_get_network_report+0x164>
 8003e12:	2201      	movs	r2, #1
 8003e14:	f84a 200e 	str.w	r2, [sl, lr]
 8003e18:	69b1      	ldr	r1, [r6, #24]
 8003e1a:	684a      	ldr	r2, [r1, #4]
 8003e1c:	60a3      	str	r3, [r4, #8]
 8003e1e:	9b01      	ldr	r3, [sp, #4]
 8003e20:	61a3      	str	r3, [r4, #24]
 8003e22:	f04f 0301 	mov.w	r3, #1
 8003e26:	7523      	strb	r3, [r4, #20]
 8003e28:	6963      	ldr	r3, [r4, #20]
 8003e2a:	6122      	str	r2, [r4, #16]
 8003e2c:	e9c4 0c00 	strd	r0, ip, [r4]
 8003e30:	f367 231f 	bfi	r3, r7, #8, #24
 8003e34:	f8c4 b00c 	str.w	fp, [r4, #12]
 8003e38:	3501      	adds	r5, #1
 8003e3a:	f109 091c 	add.w	r9, r9, #28
 8003e3e:	6163      	str	r3, [r4, #20]
 8003e40:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003e44:	42ab      	cmp	r3, r5
 8003e46:	b2aa      	uxth	r2, r5
 8003e48:	d927      	bls.n	8003e9a <ai_platform_api_get_network_report+0x1be>
 8003e4a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003e4e:	b323      	cbz	r3, 8003e9a <ai_platform_api_get_network_report+0x1be>
 8003e50:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003e54:	b30e      	cbz	r6, 8003e9a <ai_platform_api_get_network_report+0x1be>
 8003e56:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003e5a:	68b7      	ldr	r7, [r6, #8]
 8003e5c:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 8003e60:	69b3      	ldr	r3, [r6, #24]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	68f3      	ldr	r3, [r6, #12]
 8003e66:	9301      	str	r3, [sp, #4]
 8003e68:	f001 f9fa 	bl	8005260 <ai_array_to_buffer_fmt>
 8003e6c:	69b1      	ldr	r1, [r6, #24]
 8003e6e:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 8003e72:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003e76:	444c      	add	r4, r9
 8003e78:	f3c7 2717 	ubfx	r7, r7, #8, #24
 8003e7c:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ca      	beq.n	8003e1a <ai_platform_api_get_network_report+0x13e>
 8003e84:	f84a b035 	str.w	fp, [sl, r5, lsl #3]
 8003e88:	6831      	ldr	r1, [r6, #0]
 8003e8a:	6059      	str	r1, [r3, #4]
 8003e8c:	b111      	cbz	r1, 8003e94 <ai_platform_api_get_network_report+0x1b8>
 8003e8e:	8849      	ldrh	r1, [r1, #2]
 8003e90:	2900      	cmp	r1, #0
 8003e92:	d1be      	bne.n	8003e12 <ai_platform_api_get_network_report+0x136>
 8003e94:	69b1      	ldr	r1, [r6, #24]
 8003e96:	2300      	movs	r3, #0
 8003e98:	e7bf      	b.n	8003e1a <ai_platform_api_get_network_report+0x13e>
 8003e9a:	2a00      	cmp	r2, #0
 8003e9c:	d055      	beq.n	8003f4a <ai_platform_api_get_network_report+0x26e>
 8003e9e:	9902      	ldr	r1, [sp, #8]
 8003ea0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003ea4:	f101 0628 	add.w	r6, r1, #40	@ 0x28
 8003ea8:	9903      	ldr	r1, [sp, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	640b      	str	r3, [r1, #64]	@ 0x40
 8003eae:	874a      	strh	r2, [r1, #58]	@ 0x3a
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f7ff fcf7 	bl	80038a4 <ai_buffer_array_sane>
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	b968      	cbnz	r0, 8003ed6 <ai_platform_api_get_network_report+0x1fa>
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f7ff fcf2 	bl	80038a4 <ai_buffer_array_sane>
 8003ec0:	b148      	cbz	r0, 8003ed6 <ai_platform_api_get_network_report+0x1fa>
 8003ec2:	9b02      	ldr	r3, [sp, #8]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec6:	b133      	cbz	r3, 8003ed6 <ai_platform_api_get_network_report+0x1fa>
 8003ec8:	9802      	ldr	r0, [sp, #8]
 8003eca:	2213      	movs	r2, #19
 8003ecc:	2111      	movs	r1, #17
 8003ece:	300c      	adds	r0, #12
 8003ed0:	f000 fc3a 	bl	8004748 <core_set_error>
 8003ed4:	e771      	b.n	8003dba <ai_platform_api_get_network_report+0xde>
 8003ed6:	9d02      	ldr	r5, [sp, #8]
 8003ed8:	f105 0720 	add.w	r7, r5, #32
 8003edc:	4638      	mov	r0, r7
 8003ede:	f7ff fce1 	bl	80038a4 <ai_buffer_array_sane>
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	b960      	cbnz	r0, 8003f00 <ai_platform_api_get_network_report+0x224>
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	f7ff fcdc 	bl	80038a4 <ai_buffer_array_sane>
 8003eec:	b140      	cbz	r0, 8003f00 <ai_platform_api_get_network_report+0x224>
 8003eee:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8003ef0:	b133      	cbz	r3, 8003f00 <ai_platform_api_get_network_report+0x224>
 8003ef2:	9802      	ldr	r0, [sp, #8]
 8003ef4:	2212      	movs	r2, #18
 8003ef6:	2111      	movs	r1, #17
 8003ef8:	300c      	adds	r0, #12
 8003efa:	f000 fc25 	bl	8004748 <core_set_error>
 8003efe:	e75c      	b.n	8003dba <ai_platform_api_get_network_report+0xde>
 8003f00:	9a02      	ldr	r2, [sp, #8]
 8003f02:	9c03      	ldr	r4, [sp, #12]
 8003f04:	6853      	ldr	r3, [r2, #4]
 8003f06:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f78 <ai_platform_api_get_network_report+0x29c>)
 8003f0c:	6123      	str	r3, [r4, #16]
 8003f0e:	2309      	movs	r3, #9
 8003f10:	6163      	str	r3, [r4, #20]
 8003f12:	f240 2c01 	movw	ip, #513	@ 0x201
 8003f16:	f240 5301 	movw	r3, #1281	@ 0x501
 8003f1a:	e9c4 c309 	strd	ip, r3, [r4, #36]	@ 0x24
 8003f1e:	6890      	ldr	r0, [r2, #8]
 8003f20:	f001 fa4e 	bl	80053c0 <ai_platform_version_get>
 8003f24:	4b15      	ldr	r3, [pc, #84]	@ (8003f7c <ai_platform_api_get_network_report+0x2a0>)
 8003f26:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003f28:	6220      	str	r0, [r4, #32]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d128      	bne.n	8003f80 <ai_platform_api_get_network_report+0x2a4>
 8003f2e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003f32:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003f36:	e882 0003 	stmia.w	r2, {r0, r1}
 8003f3a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003f3e:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8003f42:	e883 0003 	stmia.w	r3, {r0, r1}
 8003f46:	2401      	movs	r4, #1
 8003f48:	e737      	b.n	8003dba <ai_platform_api_get_network_report+0xde>
 8003f4a:	9b03      	ldr	r3, [sp, #12]
 8003f4c:	9802      	ldr	r0, [sp, #8]
 8003f4e:	2400      	movs	r4, #0
 8003f50:	641c      	str	r4, [r3, #64]	@ 0x40
 8003f52:	875c      	strh	r4, [r3, #58]	@ 0x3a
 8003f54:	2218      	movs	r2, #24
 8003f56:	2113      	movs	r1, #19
 8003f58:	300c      	adds	r0, #12
 8003f5a:	f000 fbf5 	bl	8004748 <core_set_error>
 8003f5e:	4620      	mov	r0, r4
 8003f60:	b009      	add	sp, #36	@ 0x24
 8003f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f66:	9802      	ldr	r0, [sp, #8]
 8003f68:	2218      	movs	r2, #24
 8003f6a:	2111      	movs	r1, #17
 8003f6c:	300c      	adds	r0, #12
 8003f6e:	f000 fbeb 	bl	8004748 <core_set_error>
 8003f72:	e722      	b.n	8003dba <ai_platform_api_get_network_report+0xde>
 8003f74:	a1c00100 	.word	0xa1c00100
 8003f78:	080089c8 	.word	0x080089c8
 8003f7c:	a1facade 	.word	0xa1facade
 8003f80:	9903      	ldr	r1, [sp, #12]
 8003f82:	4b2b      	ldr	r3, [pc, #172]	@ (8004030 <ai_platform_api_get_network_report+0x354>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	e9c1 2212 	strd	r2, r2, [r1, #72]	@ 0x48
 8003f8a:	e9c1 2214 	strd	r2, r2, [r1, #80]	@ 0x50
 8003f8e:	4a29      	ldr	r2, [pc, #164]	@ (8004034 <ai_platform_api_get_network_report+0x358>)
 8003f90:	644a      	str	r2, [r1, #68]	@ 0x44
 8003f92:	f10d 0c10 	add.w	ip, sp, #16
 8003f96:	f240 4201 	movw	r2, #1025	@ 0x401
 8003f9a:	f8c1 c05c 	str.w	ip, [r1, #92]	@ 0x5c
 8003f9e:	658a      	str	r2, [r1, #88]	@ 0x58
 8003fa0:	f101 0844 	add.w	r8, r1, #68	@ 0x44
 8003fa4:	f101 0960 	add.w	r9, r1, #96	@ 0x60
 8003fa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003faa:	4645      	mov	r5, r8
 8003fac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8003fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fb2:	464c      	mov	r4, r9
 8003fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003fba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	f7ff fc70 	bl	80038a4 <ai_buffer_array_sane>
 8003fc4:	b998      	cbnz	r0, 8003fee <ai_platform_api_get_network_report+0x312>
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	f7ff fc6c 	bl	80038a4 <ai_buffer_array_sane>
 8003fcc:	b908      	cbnz	r0, 8003fd2 <ai_platform_api_get_network_report+0x2f6>
 8003fce:	2401      	movs	r4, #1
 8003fd0:	e6f3      	b.n	8003dba <ai_platform_api_get_network_report+0xde>
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	f7ff fc66 	bl	80038a4 <ai_buffer_array_sane>
 8003fd8:	b1b8      	cbz	r0, 800400a <ai_platform_api_get_network_report+0x32e>
 8003fda:	9b02      	ldr	r3, [sp, #8]
 8003fdc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe0:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8003fe4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003fe8:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8003fec:	e7ef      	b.n	8003fce <ai_platform_api_get_network_report+0x2f2>
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f7ff fc58 	bl	80038a4 <ai_buffer_array_sane>
 8003ff4:	b190      	cbz	r0, 800401c <ai_platform_api_get_network_report+0x340>
 8003ff6:	9b02      	ldr	r3, [sp, #8]
 8003ff8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8003ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ffc:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8004000:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004004:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8004008:	e7dd      	b.n	8003fc6 <ai_platform_api_get_network_report+0x2ea>
 800400a:	4604      	mov	r4, r0
 800400c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800400e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8004012:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004016:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800401a:	deff      	udf	#255	@ 0xff
 800401c:	4604      	mov	r4, r0
 800401e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004020:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8004024:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004028:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800402c:	deff      	udf	#255	@ 0xff
 800402e:	bf00      	nop
 8004030:	08008468 	.word	0x08008468
 8004034:	00040440 	.word	0x00040440

08004038 <ai_platform_network_create>:
 8004038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800403c:	b083      	sub	sp, #12
 800403e:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 8004042:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8004046:	b320      	cbz	r0, 8004092 <ai_platform_network_create+0x5a>
 8004048:	6002      	str	r2, [r0, #0]
 800404a:	4616      	mov	r6, r2
 800404c:	461f      	mov	r7, r3
 800404e:	4604      	mov	r4, r0
 8004050:	f000 fb72 	bl	8004738 <core_init>
 8004054:	b970      	cbnz	r0, 8004074 <ai_platform_network_create+0x3c>
 8004056:	2530      	movs	r5, #48	@ 0x30
 8004058:	2300      	movs	r3, #0
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	2410      	movs	r4, #16
 800405e:	4642      	mov	r2, r8
 8004060:	4649      	mov	r1, r9
 8004062:	4638      	mov	r0, r7
 8004064:	f001 f9a6 	bl	80053b4 <ai_version_get>
 8004068:	60b0      	str	r0, [r6, #8]
 800406a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800406e:	b003      	add	sp, #12
 8004070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004074:	2200      	movs	r2, #0
 8004076:	4649      	mov	r1, r9
 8004078:	4638      	mov	r0, r7
 800407a:	f001 f99b 	bl	80053b4 <ai_version_get>
 800407e:	2200      	movs	r2, #0
 8004080:	4605      	mov	r5, r0
 8004082:	2105      	movs	r1, #5
 8004084:	2001      	movs	r0, #1
 8004086:	f001 f995 	bl	80053b4 <ai_version_get>
 800408a:	4285      	cmp	r5, r0
 800408c:	d008      	beq.n	80040a0 <ai_platform_network_create+0x68>
 800408e:	2501      	movs	r5, #1
 8004090:	e7e2      	b.n	8004058 <ai_platform_network_create+0x20>
 8004092:	2510      	movs	r5, #16
 8004094:	462c      	mov	r4, r5
 8004096:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800409a:	b003      	add	sp, #12
 800409c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <ai_platform_network_create+0x80>)
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	a801      	add	r0, sp, #4
 80040a6:	f000 fb5b 	bl	8004760 <ai_check_custom_types>
 80040aa:	b110      	cbz	r0, 80040b2 <ai_platform_network_create+0x7a>
 80040ac:	2400      	movs	r4, #0
 80040ae:	4625      	mov	r5, r4
 80040b0:	e7d5      	b.n	800405e <ai_platform_network_create+0x26>
 80040b2:	2502      	movs	r5, #2
 80040b4:	e7d0      	b.n	8004058 <ai_platform_network_create+0x20>
 80040b6:	bf00      	nop
 80040b8:	84048403 	.word	0x84048403

080040bc <ai_platform_network_init>:
 80040bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c0:	4b63      	ldr	r3, [pc, #396]	@ (8004250 <ai_platform_network_init+0x194>)
 80040c2:	6802      	ldr	r2, [r0, #0]
 80040c4:	4393      	bics	r3, r2
 80040c6:	b083      	sub	sp, #12
 80040c8:	d156      	bne.n	8004178 <ai_platform_network_init+0xbc>
 80040ca:	4604      	mov	r4, r0
 80040cc:	460f      	mov	r7, r1
 80040ce:	2900      	cmp	r1, #0
 80040d0:	f000 80a9 	beq.w	8004226 <ai_platform_network_init+0x16a>
 80040d4:	680b      	ldr	r3, [r1, #0]
 80040d6:	495f      	ldr	r1, [pc, #380]	@ (8004254 <ai_platform_network_init+0x198>)
 80040d8:	428b      	cmp	r3, r1
 80040da:	d113      	bne.n	8004104 <ai_platform_network_init+0x48>
 80040dc:	495c      	ldr	r1, [pc, #368]	@ (8004250 <ai_platform_network_init+0x194>)
 80040de:	89bd      	ldrh	r5, [r7, #12]
 80040e0:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 80040e4:	f8d7 8010 	ldr.w	r8, [r7, #16]
 80040e8:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 80040ec:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 80040f0:	68be      	ldr	r6, [r7, #8]
 80040f2:	428a      	cmp	r2, r1
 80040f4:	d02c      	beq.n	8004150 <ai_platform_network_init+0x94>
 80040f6:	2303      	movs	r3, #3
 80040f8:	6123      	str	r3, [r4, #16]
 80040fa:	4627      	mov	r7, r4
 80040fc:	4638      	mov	r0, r7
 80040fe:	b003      	add	sp, #12
 8004100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004104:	2101      	movs	r1, #1
 8004106:	4638      	mov	r0, r7
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800410e:	f7ff fb95 	bl	800383c <ai_buffer_get_size>
 8004112:	f107 081c 	add.w	r8, r7, #28
 8004116:	4605      	mov	r5, r0
 8004118:	2101      	movs	r1, #1
 800411a:	4640      	mov	r0, r8
 800411c:	463e      	mov	r6, r7
 800411e:	6a3f      	ldr	r7, [r7, #32]
 8004120:	f7ff fb8c 	bl	800383c <ai_buffer_get_size>
 8004124:	2d00      	cmp	r5, #0
 8004126:	9b01      	ldr	r3, [sp, #4]
 8004128:	bf0a      	itet	eq
 800412a:	46a9      	moveq	r9, r5
 800412c:	f04f 0901 	movne.w	r9, #1
 8004130:	462e      	moveq	r6, r5
 8004132:	b330      	cbz	r0, 8004182 <ai_platform_network_init+0xc6>
 8004134:	2f00      	cmp	r7, #0
 8004136:	f000 8084 	beq.w	8004242 <ai_platform_network_init+0x186>
 800413a:	f04f 0a01 	mov.w	sl, #1
 800413e:	f1bb 0f00 	cmp.w	fp, #0
 8004142:	d021      	beq.n	8004188 <ai_platform_network_init+0xcc>
 8004144:	2500      	movs	r5, #0
 8004146:	6822      	ldr	r2, [r4, #0]
 8004148:	4941      	ldr	r1, [pc, #260]	@ (8004250 <ai_platform_network_init+0x194>)
 800414a:	428a      	cmp	r2, r1
 800414c:	46ab      	mov	fp, r5
 800414e:	d1d2      	bne.n	80040f6 <ai_platform_network_init+0x3a>
 8004150:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8004152:	454a      	cmp	r2, r9
 8004154:	4a3f      	ldr	r2, [pc, #252]	@ (8004254 <ai_platform_network_init+0x198>)
 8004156:	d221      	bcs.n	800419c <ai_platform_network_init+0xe0>
 8004158:	4293      	cmp	r3, r2
 800415a:	d15c      	bne.n	8004216 <ai_platform_network_init+0x15a>
 800415c:	6266      	str	r6, [r4, #36]	@ 0x24
 800415e:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8004162:	f8a4 b020 	strh.w	fp, [r4, #32]
 8004166:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 800416a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 800416e:	8525      	strh	r5, [r4, #40]	@ 0x28
 8004170:	4620      	mov	r0, r4
 8004172:	f000 fb1f 	bl	80047b4 <ai_layers_init_all>
 8004176:	e7be      	b.n	80040f6 <ai_platform_network_init+0x3a>
 8004178:	2700      	movs	r7, #0
 800417a:	4638      	mov	r0, r7
 800417c:	b003      	add	sp, #12
 800417e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004182:	4680      	mov	r8, r0
 8004184:	4682      	mov	sl, r0
 8004186:	e7da      	b.n	800413e <ai_platform_network_init+0x82>
 8004188:	2d00      	cmp	r5, #0
 800418a:	d0dc      	beq.n	8004146 <ai_platform_network_init+0x8a>
 800418c:	2212      	movs	r2, #18
 800418e:	2110      	movs	r1, #16
 8004190:	f104 000c 	add.w	r0, r4, #12
 8004194:	f000 fad8 	bl	8004748 <core_set_error>
 8004198:	465f      	mov	r7, fp
 800419a:	e7af      	b.n	80040fc <ai_platform_network_init+0x40>
 800419c:	4293      	cmp	r3, r2
 800419e:	d0dd      	beq.n	800415c <ai_platform_network_init+0xa0>
 80041a0:	f1b9 0f00 	cmp.w	r9, #0
 80041a4:	d018      	beq.n	80041d8 <ai_platform_network_init+0x11c>
 80041a6:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80041b0:	2700      	movs	r7, #0
 80041b2:	4699      	mov	r9, r3
 80041b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80041b6:	eb06 0e07 	add.w	lr, r6, r7
 80041ba:	eb03 0c07 	add.w	ip, r3, r7
 80041be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80041c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80041c6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80041ca:	371c      	adds	r7, #28
 80041cc:	45b9      	cmp	r9, r7
 80041ce:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80041d2:	d1ef      	bne.n	80041b4 <ai_platform_network_init+0xf8>
 80041d4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80041d8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80041da:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 80041de:	4553      	cmp	r3, sl
 80041e0:	f8a4 b020 	strh.w	fp, [r4, #32]
 80041e4:	d325      	bcc.n	8004232 <ai_platform_network_init+0x176>
 80041e6:	f1ba 0f00 	cmp.w	sl, #0
 80041ea:	d0be      	beq.n	800416a <ai_platform_network_init+0xae>
 80041ec:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 80041f0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80041f4:	f04f 0c00 	mov.w	ip, #0
 80041f8:	eb08 070c 	add.w	r7, r8, ip
 80041fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80041fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004200:	4466      	add	r6, ip
 8004202:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004204:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004208:	f10c 0c1c 	add.w	ip, ip, #28
 800420c:	45f4      	cmp	ip, lr
 800420e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004212:	d1f1      	bne.n	80041f8 <ai_platform_network_init+0x13c>
 8004214:	e7a9      	b.n	800416a <ai_platform_network_init+0xae>
 8004216:	2212      	movs	r2, #18
 8004218:	2116      	movs	r1, #22
 800421a:	f104 000c 	add.w	r0, r4, #12
 800421e:	f000 fa93 	bl	8004748 <core_set_error>
 8004222:	2700      	movs	r7, #0
 8004224:	e76a      	b.n	80040fc <ai_platform_network_init+0x40>
 8004226:	2211      	movs	r2, #17
 8004228:	2110      	movs	r1, #16
 800422a:	300c      	adds	r0, #12
 800422c:	f000 fa8c 	bl	8004748 <core_set_error>
 8004230:	e764      	b.n	80040fc <ai_platform_network_init+0x40>
 8004232:	2213      	movs	r2, #19
 8004234:	2116      	movs	r1, #22
 8004236:	f104 000c 	add.w	r0, r4, #12
 800423a:	f000 fa85 	bl	8004748 <core_set_error>
 800423e:	2700      	movs	r7, #0
 8004240:	e75c      	b.n	80040fc <ai_platform_network_init+0x40>
 8004242:	2213      	movs	r2, #19
 8004244:	2110      	movs	r1, #16
 8004246:	f104 000c 	add.w	r0, r4, #12
 800424a:	f000 fa7d 	bl	8004748 <core_set_error>
 800424e:	e755      	b.n	80040fc <ai_platform_network_init+0x40>
 8004250:	a1c00100 	.word	0xa1c00100
 8004254:	a1facade 	.word	0xa1facade

08004258 <ai_platform_network_post_init>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4b16      	ldr	r3, [pc, #88]	@ (80042b4 <ai_platform_network_post_init+0x5c>)
 800425c:	6802      	ldr	r2, [r0, #0]
 800425e:	ea02 0103 	and.w	r1, r2, r3
 8004262:	4393      	bics	r3, r2
 8004264:	d108      	bne.n	8004278 <ai_platform_network_post_init+0x20>
 8004266:	6903      	ldr	r3, [r0, #16]
 8004268:	f013 0502 	ands.w	r5, r3, #2
 800426c:	4604      	mov	r4, r0
 800426e:	d005      	beq.n	800427c <ai_platform_network_post_init+0x24>
 8004270:	428a      	cmp	r2, r1
 8004272:	d00a      	beq.n	800428a <ai_platform_network_post_init+0x32>
 8004274:	2001      	movs	r0, #1
 8004276:	bd38      	pop	{r3, r4, r5, pc}
 8004278:	2000      	movs	r0, #0
 800427a:	bd38      	pop	{r3, r4, r5, pc}
 800427c:	2210      	movs	r2, #16
 800427e:	2111      	movs	r1, #17
 8004280:	300c      	adds	r0, #12
 8004282:	f000 fa61 	bl	8004748 <core_set_error>
 8004286:	4628      	mov	r0, r5
 8004288:	bd38      	pop	{r3, r4, r5, pc}
 800428a:	f000 faa1 	bl	80047d0 <ai_layers_post_init_all>
 800428e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0ef      	beq.n	8004274 <ai_platform_network_post_init+0x1c>
 8004294:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8004296:	e008      	b.n	80042aa <ai_platform_network_post_init+0x52>
 8004298:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800429c:	4798      	blx	r3
 800429e:	692b      	ldr	r3, [r5, #16]
 80042a0:	42ab      	cmp	r3, r5
 80042a2:	d0e7      	beq.n	8004274 <ai_platform_network_post_init+0x1c>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0e5      	beq.n	8004274 <ai_platform_network_post_init+0x1c>
 80042a8:	461d      	mov	r5, r3
 80042aa:	4629      	mov	r1, r5
 80042ac:	2000      	movs	r0, #0
 80042ae:	2d00      	cmp	r5, #0
 80042b0:	d1f2      	bne.n	8004298 <ai_platform_network_post_init+0x40>
 80042b2:	e7df      	b.n	8004274 <ai_platform_network_post_init+0x1c>
 80042b4:	a1c00100 	.word	0xa1c00100

080042b8 <ai_platform_network_process>:
 80042b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042bc:	4bb5      	ldr	r3, [pc, #724]	@ (8004594 <ai_platform_network_process+0x2dc>)
 80042be:	4605      	mov	r5, r0
 80042c0:	6800      	ldr	r0, [r0, #0]
 80042c2:	b085      	sub	sp, #20
 80042c4:	4383      	bics	r3, r0
 80042c6:	9202      	str	r2, [sp, #8]
 80042c8:	f040 8140 	bne.w	800454c <ai_platform_network_process+0x294>
 80042cc:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8125 	beq.w	800451e <ai_platform_network_process+0x266>
 80042d4:	692b      	ldr	r3, [r5, #16]
 80042d6:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2700      	movs	r7, #0
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	61af      	str	r7, [r5, #24]
 80042e4:	f040 8137 	bne.w	8004556 <ai_platform_network_process+0x29e>
 80042e8:	2900      	cmp	r1, #0
 80042ea:	f000 811e 	beq.w	800452a <ai_platform_network_process+0x272>
 80042ee:	f1ba 0f00 	cmp.w	sl, #0
 80042f2:	f000 811a 	beq.w	800452a <ai_platform_network_process+0x272>
 80042f6:	f8ba 3000 	ldrh.w	r3, [sl]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8115 	beq.w	800452a <ai_platform_network_process+0x272>
 8004300:	698b      	ldr	r3, [r1, #24]
 8004302:	9503      	str	r5, [sp, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	460e      	mov	r6, r1
 800430a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d072      	beq.n	80043f8 <ai_platform_network_process+0x140>
 8004312:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8004316:	2c00      	cmp	r4, #0
 8004318:	d06e      	beq.n	80043f8 <ai_platform_network_process+0x140>
 800431a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800431e:	f8d3 9000 	ldr.w	r9, [r3]
 8004322:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8004326:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800432a:	f000 81d3 	beq.w	80046d4 <ai_platform_network_process+0x41c>
 800432e:	69a3      	ldr	r3, [r4, #24]
 8004330:	2101      	movs	r1, #1
 8004332:	4630      	mov	r0, r6
 8004334:	685d      	ldr	r5, [r3, #4]
 8004336:	f7ff fa81 	bl	800383c <ai_buffer_get_size>
 800433a:	4285      	cmp	r5, r0
 800433c:	f0c0 8116 	bcc.w	800456c <ai_platform_network_process+0x2b4>
 8004340:	68e0      	ldr	r0, [r4, #12]
 8004342:	69b1      	ldr	r1, [r6, #24]
 8004344:	68c2      	ldr	r2, [r0, #12]
 8004346:	68cb      	ldr	r3, [r1, #12]
 8004348:	429a      	cmp	r2, r3
 800434a:	f040 810f 	bne.w	800456c <ai_platform_network_process+0x2b4>
 800434e:	6882      	ldr	r2, [r0, #8]
 8004350:	688b      	ldr	r3, [r1, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	f040 810a 	bne.w	800456c <ai_platform_network_process+0x2b4>
 8004358:	6842      	ldr	r2, [r0, #4]
 800435a:	684b      	ldr	r3, [r1, #4]
 800435c:	429a      	cmp	r2, r3
 800435e:	f040 8105 	bne.w	800456c <ai_platform_network_process+0x2b4>
 8004362:	69a3      	ldr	r3, [r4, #24]
 8004364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004368:	f001 f812 	bl	8005390 <ai_array_get_data_byte_size>
 800436c:	4605      	mov	r5, r0
 800436e:	4620      	mov	r0, r4
 8004370:	f001 f838 	bl	80053e4 <get_tensor_byte_size>
 8004374:	4285      	cmp	r5, r0
 8004376:	f0c0 80f9 	bcc.w	800456c <ai_platform_network_process+0x2b4>
 800437a:	69a3      	ldr	r3, [r4, #24]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	f000 ff6f 	bl	8005260 <ai_array_to_buffer_fmt>
 8004382:	6833      	ldr	r3, [r6, #0]
 8004384:	4058      	eors	r0, r3
 8004386:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800438a:	f040 81a5 	bne.w	80046d8 <ai_platform_network_process+0x420>
 800438e:	6873      	ldr	r3, [r6, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 819f 	beq.w	80046d4 <ai_platform_network_process+0x41c>
 8004396:	69b3      	ldr	r3, [r6, #24]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 81a5 	beq.w	80046ea <ai_platform_network_process+0x432>
 80043a0:	9a01      	ldr	r2, [sp, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	bf38      	it	cc
 80043a6:	461a      	movcc	r2, r3
 80043a8:	4620      	mov	r0, r4
 80043aa:	9201      	str	r2, [sp, #4]
 80043ac:	f001 f81a 	bl	80053e4 <get_tensor_byte_size>
 80043b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80043b4:	69b3      	ldr	r3, [r6, #24]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	fb00 f303 	mul.w	r3, r0, r3
 80043bc:	f8c8 300c 	str.w	r3, [r8, #12]
 80043c0:	6871      	ldr	r1, [r6, #4]
 80043c2:	f8c8 1004 	str.w	r1, [r8, #4]
 80043c6:	440b      	add	r3, r1
 80043c8:	f849 300b 	str.w	r3, [r9, fp]
 80043cc:	69a0      	ldr	r0, [r4, #24]
 80043ce:	6803      	ldr	r3, [r0, #0]
 80043d0:	009a      	lsls	r2, r3, #2
 80043d2:	f107 0701 	add.w	r7, r7, #1
 80043d6:	f106 061c 	add.w	r6, r6, #28
 80043da:	f100 80b1 	bmi.w	8004540 <ai_platform_network_process+0x288>
 80043de:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	4419      	add	r1, r3
 80043e6:	6081      	str	r1, [r0, #8]
 80043e8:	69a3      	ldr	r3, [r4, #24]
 80043ea:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80043ee:	60da      	str	r2, [r3, #12]
 80043f0:	f8ba 3000 	ldrh.w	r3, [sl]
 80043f4:	42bb      	cmp	r3, r7
 80043f6:	d888      	bhi.n	800430a <ai_platform_network_process+0x52>
 80043f8:	9d03      	ldr	r5, [sp, #12]
 80043fa:	9b02      	ldr	r3, [sp, #8]
 80043fc:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 817c 	beq.w	80046fc <ai_platform_network_process+0x444>
 8004404:	2a01      	cmp	r2, #1
 8004406:	f240 80bd 	bls.w	8004584 <ai_platform_network_process+0x2cc>
 800440a:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 800440e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80b6 	beq.w	8004584 <ai_platform_network_process+0x2cc>
 8004418:	f8dd b008 	ldr.w	fp, [sp, #8]
 800441c:	2700      	movs	r7, #0
 800441e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80bd 	beq.w	80045a2 <ai_platform_network_process+0x2ea>
 8004428:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800442c:	2e00      	cmp	r6, #0
 800442e:	f000 80b8 	beq.w	80045a2 <ai_platform_network_process+0x2ea>
 8004432:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004436:	681c      	ldr	r4, [r3, #0]
 8004438:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 800443c:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8004440:	f000 8160 	beq.w	8004704 <ai_platform_network_process+0x44c>
 8004444:	69b3      	ldr	r3, [r6, #24]
 8004446:	2101      	movs	r1, #1
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	9302      	str	r3, [sp, #8]
 800444c:	4658      	mov	r0, fp
 800444e:	f7ff f9f5 	bl	800383c <ai_buffer_get_size>
 8004452:	9b02      	ldr	r3, [sp, #8]
 8004454:	4283      	cmp	r3, r0
 8004456:	f0c0 8095 	bcc.w	8004584 <ai_platform_network_process+0x2cc>
 800445a:	68f0      	ldr	r0, [r6, #12]
 800445c:	f8db 1018 	ldr.w	r1, [fp, #24]
 8004460:	68c2      	ldr	r2, [r0, #12]
 8004462:	68cb      	ldr	r3, [r1, #12]
 8004464:	429a      	cmp	r2, r3
 8004466:	f040 808d 	bne.w	8004584 <ai_platform_network_process+0x2cc>
 800446a:	6882      	ldr	r2, [r0, #8]
 800446c:	688b      	ldr	r3, [r1, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	f040 8088 	bne.w	8004584 <ai_platform_network_process+0x2cc>
 8004474:	6842      	ldr	r2, [r0, #4]
 8004476:	684b      	ldr	r3, [r1, #4]
 8004478:	429a      	cmp	r2, r3
 800447a:	f040 8083 	bne.w	8004584 <ai_platform_network_process+0x2cc>
 800447e:	69b3      	ldr	r3, [r6, #24]
 8004480:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004484:	f000 ff84 	bl	8005390 <ai_array_get_data_byte_size>
 8004488:	9002      	str	r0, [sp, #8]
 800448a:	4630      	mov	r0, r6
 800448c:	f000 ffaa 	bl	80053e4 <get_tensor_byte_size>
 8004490:	9b02      	ldr	r3, [sp, #8]
 8004492:	4283      	cmp	r3, r0
 8004494:	d376      	bcc.n	8004584 <ai_platform_network_process+0x2cc>
 8004496:	69b3      	ldr	r3, [r6, #24]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	f000 fee1 	bl	8005260 <ai_array_to_buffer_fmt>
 800449e:	f8db 3000 	ldr.w	r3, [fp]
 80044a2:	4058      	eors	r0, r3
 80044a4:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80044a8:	f040 8134 	bne.w	8004714 <ai_platform_network_process+0x45c>
 80044ac:	f8db 3004 	ldr.w	r3, [fp, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8127 	beq.w	8004704 <ai_platform_network_process+0x44c>
 80044b6:	f8db 3018 	ldr.w	r3, [fp, #24]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8133 	beq.w	8004728 <ai_platform_network_process+0x470>
 80044c2:	9a01      	ldr	r2, [sp, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	bf38      	it	cc
 80044c8:	461a      	movcc	r2, r3
 80044ca:	4630      	mov	r0, r6
 80044cc:	9201      	str	r2, [sp, #4]
 80044ce:	f000 ff89 	bl	80053e4 <get_tensor_byte_size>
 80044d2:	f8c9 0008 	str.w	r0, [r9, #8]
 80044d6:	f8db 3018 	ldr.w	r3, [fp, #24]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	fb00 f303 	mul.w	r3, r0, r3
 80044e0:	f8c9 300c 	str.w	r3, [r9, #12]
 80044e4:	f8db 1004 	ldr.w	r1, [fp, #4]
 80044e8:	f8c9 1004 	str.w	r1, [r9, #4]
 80044ec:	440b      	add	r3, r1
 80044ee:	f844 300a 	str.w	r3, [r4, sl]
 80044f2:	69b0      	ldr	r0, [r6, #24]
 80044f4:	6803      	ldr	r3, [r0, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	f107 0701 	add.w	r7, r7, #1
 80044fc:	f10b 0b1c 	add.w	fp, fp, #28
 8004500:	d44a      	bmi.n	8004598 <ai_platform_network_process+0x2e0>
 8004502:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	4419      	add	r1, r3
 800450a:	6081      	str	r1, [r0, #8]
 800450c:	69b3      	ldr	r3, [r6, #24]
 800450e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004512:	60da      	str	r2, [r3, #12]
 8004514:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004518:	42bb      	cmp	r3, r7
 800451a:	d880      	bhi.n	800441e <ai_platform_network_process+0x166>
 800451c:	e041      	b.n	80045a2 <ai_platform_network_process+0x2ea>
 800451e:	692a      	ldr	r2, [r5, #16]
 8004520:	61ab      	str	r3, [r5, #24]
 8004522:	f002 0203 	and.w	r2, r2, #3
 8004526:	2a03      	cmp	r2, #3
 8004528:	d115      	bne.n	8004556 <ai_platform_network_process+0x29e>
 800452a:	2217      	movs	r2, #23
 800452c:	2112      	movs	r1, #18
 800452e:	f105 000c 	add.w	r0, r5, #12
 8004532:	f000 f909 	bl	8004748 <core_set_error>
 8004536:	2400      	movs	r4, #0
 8004538:	4620      	mov	r0, r4
 800453a:	b005      	add	sp, #20
 800453c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004540:	f8ba 3000 	ldrh.w	r3, [sl]
 8004544:	429f      	cmp	r7, r3
 8004546:	f4ff aee0 	bcc.w	800430a <ai_platform_network_process+0x52>
 800454a:	e755      	b.n	80043f8 <ai_platform_network_process+0x140>
 800454c:	2400      	movs	r4, #0
 800454e:	4620      	mov	r0, r4
 8004550:	b005      	add	sp, #20
 8004552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004556:	2230      	movs	r2, #48	@ 0x30
 8004558:	2111      	movs	r1, #17
 800455a:	f105 000c 	add.w	r0, r5, #12
 800455e:	f000 f8f3 	bl	8004748 <core_set_error>
 8004562:	2400      	movs	r4, #0
 8004564:	4620      	mov	r0, r4
 8004566:	b005      	add	sp, #20
 8004568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456c:	9d03      	ldr	r5, [sp, #12]
 800456e:	2218      	movs	r2, #24
 8004570:	2112      	movs	r1, #18
 8004572:	f105 000c 	add.w	r0, r5, #12
 8004576:	f000 f8e7 	bl	8004748 <core_set_error>
 800457a:	2400      	movs	r4, #0
 800457c:	4620      	mov	r0, r4
 800457e:	b005      	add	sp, #20
 8004580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004584:	2218      	movs	r2, #24
 8004586:	2113      	movs	r1, #19
 8004588:	f105 000c 	add.w	r0, r5, #12
 800458c:	f000 f8dc 	bl	8004748 <core_set_error>
 8004590:	2400      	movs	r4, #0
 8004592:	e7d1      	b.n	8004538 <ai_platform_network_process+0x280>
 8004594:	a1c00100 	.word	0xa1c00100
 8004598:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800459c:	429f      	cmp	r7, r3
 800459e:	f4ff af3e 	bcc.w	800441e <ai_platform_network_process+0x166>
 80045a2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80045a6:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80045a8:	832b      	strh	r3, [r5, #24]
 80045aa:	2a00      	cmp	r2, #0
 80045ac:	f040 808c 	bne.w	80046c8 <ai_platform_network_process+0x410>
 80045b0:	4616      	mov	r6, r2
 80045b2:	4617      	mov	r7, r2
 80045b4:	8b6c      	ldrh	r4, [r5, #26]
 80045b6:	429c      	cmp	r4, r3
 80045b8:	bf38      	it	cc
 80045ba:	46ab      	movcc	fp, r5
 80045bc:	d2bc      	bcs.n	8004538 <ai_platform_network_process+0x280>
 80045be:	2e00      	cmp	r6, #0
 80045c0:	d030      	beq.n	8004624 <ai_platform_network_process+0x36c>
 80045c2:	f04f 0800 	mov.w	r8, #0
 80045c6:	e014      	b.n	80045f2 <ai_platform_network_process+0x33a>
 80045c8:	6882      	ldr	r2, [r0, #8]
 80045ca:	68c5      	ldr	r5, [r0, #12]
 80045cc:	6863      	ldr	r3, [r4, #4]
 80045ce:	1b52      	subs	r2, r2, r5
 80045d0:	4413      	add	r3, r2
 80045d2:	6083      	str	r3, [r0, #8]
 80045d4:	698b      	ldr	r3, [r1, #24]
 80045d6:	6862      	ldr	r2, [r4, #4]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80045de:	f859 200a 	ldr.w	r2, [r9, sl]
 80045e2:	440b      	add	r3, r1
 80045e4:	4293      	cmp	r3, r2
 80045e6:	bf24      	itt	cs
 80045e8:	68e3      	ldrcs	r3, [r4, #12]
 80045ea:	1ad3      	subcs	r3, r2, r3
 80045ec:	6063      	str	r3, [r4, #4]
 80045ee:	f108 0801 	add.w	r8, r8, #1
 80045f2:	8833      	ldrh	r3, [r6, #0]
 80045f4:	4543      	cmp	r3, r8
 80045f6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80045fa:	d913      	bls.n	8004624 <ai_platform_network_process+0x36c>
 80045fc:	6873      	ldr	r3, [r6, #4]
 80045fe:	b18b      	cbz	r3, 8004624 <ai_platform_network_process+0x36c>
 8004600:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8004604:	b171      	cbz	r1, 8004624 <ai_platform_network_process+0x36c>
 8004606:	6988      	ldr	r0, [r1, #24]
 8004608:	68b2      	ldr	r2, [r6, #8]
 800460a:	6803      	ldr	r3, [r0, #0]
 800460c:	f8d2 9000 	ldr.w	r9, [r2]
 8004610:	009d      	lsls	r5, r3, #2
 8004612:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8004616:	d5d7      	bpl.n	80045c8 <ai_platform_network_process+0x310>
 8004618:	6881      	ldr	r1, [r0, #8]
 800461a:	68a2      	ldr	r2, [r4, #8]
 800461c:	6860      	ldr	r0, [r4, #4]
 800461e:	f000 fd99 	bl	8005154 <st_int8_copy>
 8004622:	e7da      	b.n	80045da <ai_platform_network_process+0x322>
 8004624:	4658      	mov	r0, fp
 8004626:	f000 f8e7 	bl	80047f8 <ai_layers_forward_all>
 800462a:	2f00      	cmp	r7, #0
 800462c:	d03d      	beq.n	80046aa <ai_platform_network_process+0x3f2>
 800462e:	2400      	movs	r4, #0
 8004630:	e016      	b.n	8004660 <ai_platform_network_process+0x3a8>
 8004632:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8004636:	f859 100a 	ldr.w	r1, [r9, sl]
 800463a:	4413      	add	r3, r2
 800463c:	428b      	cmp	r3, r1
 800463e:	bf24      	itt	cs
 8004640:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8004644:	1acb      	subcs	r3, r1, r3
 8004646:	f8c8 3004 	str.w	r3, [r8, #4]
 800464a:	6981      	ldr	r1, [r0, #24]
 800464c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8004650:	1b52      	subs	r2, r2, r5
 8004652:	4413      	add	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
 8004656:	6983      	ldr	r3, [r0, #24]
 8004658:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800465c:	60da      	str	r2, [r3, #12]
 800465e:	3401      	adds	r4, #1
 8004660:	883b      	ldrh	r3, [r7, #0]
 8004662:	42a3      	cmp	r3, r4
 8004664:	d921      	bls.n	80046aa <ai_platform_network_process+0x3f2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	b1fb      	cbz	r3, 80046aa <ai_platform_network_process+0x3f2>
 800466a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800466e:	b1e0      	cbz	r0, 80046aa <ai_platform_network_process+0x3f2>
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	6983      	ldr	r3, [r0, #24]
 8004674:	f8d2 9000 	ldr.w	r9, [r2]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	0092      	lsls	r2, r2, #2
 800467c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8004680:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8004684:	d5d5      	bpl.n	8004632 <ai_platform_network_process+0x37a>
 8004686:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800468a:	6898      	ldr	r0, [r3, #8]
 800468c:	f000 fd62 	bl	8005154 <st_int8_copy>
 8004690:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8004694:	f859 200a 	ldr.w	r2, [r9, sl]
 8004698:	440b      	add	r3, r1
 800469a:	4293      	cmp	r3, r2
 800469c:	bf24      	itt	cs
 800469e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80046a2:	1ad3      	subcs	r3, r2, r3
 80046a4:	f8c8 3004 	str.w	r3, [r8, #4]
 80046a8:	e7d9      	b.n	800465e <ai_platform_network_process+0x3a6>
 80046aa:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80046ae:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80046b2:	3401      	adds	r4, #1
 80046b4:	b2a4      	uxth	r4, r4
 80046b6:	42a3      	cmp	r3, r4
 80046b8:	f8ab 401a 	strh.w	r4, [fp, #26]
 80046bc:	f63f af7f 	bhi.w	80045be <ai_platform_network_process+0x306>
 80046c0:	4620      	mov	r0, r4
 80046c2:	b005      	add	sp, #20
 80046c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c8:	2a01      	cmp	r2, #1
 80046ca:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 80046cc:	d02a      	beq.n	8004724 <ai_platform_network_process+0x46c>
 80046ce:	f106 070c 	add.w	r7, r6, #12
 80046d2:	e76f      	b.n	80045b4 <ai_platform_network_process+0x2fc>
 80046d4:	9d03      	ldr	r5, [sp, #12]
 80046d6:	e728      	b.n	800452a <ai_platform_network_process+0x272>
 80046d8:	9d03      	ldr	r5, [sp, #12]
 80046da:	2219      	movs	r2, #25
 80046dc:	2112      	movs	r1, #18
 80046de:	f105 000c 	add.w	r0, r5, #12
 80046e2:	f000 f831 	bl	8004748 <core_set_error>
 80046e6:	2400      	movs	r4, #0
 80046e8:	e726      	b.n	8004538 <ai_platform_network_process+0x280>
 80046ea:	9d03      	ldr	r5, [sp, #12]
 80046ec:	4604      	mov	r4, r0
 80046ee:	2221      	movs	r2, #33	@ 0x21
 80046f0:	2112      	movs	r1, #18
 80046f2:	f105 000c 	add.w	r0, r5, #12
 80046f6:	f000 f827 	bl	8004748 <core_set_error>
 80046fa:	e71d      	b.n	8004538 <ai_platform_network_process+0x280>
 80046fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004700:	832b      	strh	r3, [r5, #24]
 8004702:	e752      	b.n	80045aa <ai_platform_network_process+0x2f2>
 8004704:	2217      	movs	r2, #23
 8004706:	2113      	movs	r1, #19
 8004708:	f105 000c 	add.w	r0, r5, #12
 800470c:	f000 f81c 	bl	8004748 <core_set_error>
 8004710:	2400      	movs	r4, #0
 8004712:	e711      	b.n	8004538 <ai_platform_network_process+0x280>
 8004714:	2219      	movs	r2, #25
 8004716:	2113      	movs	r1, #19
 8004718:	f105 000c 	add.w	r0, r5, #12
 800471c:	f000 f814 	bl	8004748 <core_set_error>
 8004720:	2400      	movs	r4, #0
 8004722:	e709      	b.n	8004538 <ai_platform_network_process+0x280>
 8004724:	2700      	movs	r7, #0
 8004726:	e745      	b.n	80045b4 <ai_platform_network_process+0x2fc>
 8004728:	4604      	mov	r4, r0
 800472a:	2221      	movs	r2, #33	@ 0x21
 800472c:	2113      	movs	r1, #19
 800472e:	f105 000c 	add.w	r0, r5, #12
 8004732:	f000 f809 	bl	8004748 <core_set_error>
 8004736:	e6ff      	b.n	8004538 <ai_platform_network_process+0x280>

08004738 <core_init>:
 8004738:	2001      	movs	r0, #1
 800473a:	4770      	bx	lr

0800473c <core_get_error>:
 800473c:	4603      	mov	r3, r0
 800473e:	2200      	movs	r2, #0
 8004740:	6800      	ldr	r0, [r0, #0]
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop

08004748 <core_set_error>:
 8004748:	4603      	mov	r3, r0
 800474a:	7800      	ldrb	r0, [r0, #0]
 800474c:	b108      	cbz	r0, 8004752 <core_set_error+0xa>
 800474e:	2000      	movs	r0, #0
 8004750:	4770      	bx	lr
 8004752:	7019      	strb	r1, [r3, #0]
 8004754:	6819      	ldr	r1, [r3, #0]
 8004756:	f362 211f 	bfi	r1, r2, #8, #24
 800475a:	2001      	movs	r0, #1
 800475c:	6019      	str	r1, [r3, #0]
 800475e:	4770      	bx	lr

08004760 <ai_check_custom_types>:
 8004760:	b082      	sub	sp, #8
 8004762:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <ai_check_custom_types+0x50>)
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	b118      	cbz	r0, 8004770 <ai_check_custom_types+0x10>
 8004768:	7803      	ldrb	r3, [r0, #0]
 800476a:	2b03      	cmp	r3, #3
 800476c:	d002      	beq.n	8004774 <ai_check_custom_types+0x14>
 800476e:	2000      	movs	r0, #0
 8004770:	b002      	add	sp, #8
 8004772:	4770      	bx	lr
 8004774:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <ai_check_custom_types+0x26>
 800477c:	2001      	movs	r0, #1
 800477e:	f080 0001 	eor.w	r0, r0, #1
 8004782:	b002      	add	sp, #8
 8004784:	4770      	bx	lr
 8004786:	7842      	ldrb	r2, [r0, #1]
 8004788:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800478c:	429a      	cmp	r2, r3
 800478e:	f100 0001 	add.w	r0, r0, #1
 8004792:	d1f3      	bne.n	800477c <ai_check_custom_types+0x1c>
 8004794:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004798:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800479c:	429a      	cmp	r2, r3
 800479e:	d1ed      	bne.n	800477c <ai_check_custom_types+0x1c>
 80047a0:	7842      	ldrb	r2, [r0, #1]
 80047a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d1e8      	bne.n	800477c <ai_check_custom_types+0x1c>
 80047aa:	2000      	movs	r0, #0
 80047ac:	e7e7      	b.n	800477e <ai_check_custom_types+0x1e>
 80047ae:	bf00      	nop
 80047b0:	84048403 	.word	0x84048403

080047b4 <ai_layers_init_all>:
 80047b4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80047b6:	2100      	movs	r1, #0
 80047b8:	b143      	cbz	r3, 80047cc <ai_layers_init_all+0x18>
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	60d8      	str	r0, [r3, #12]
 80047be:	429a      	cmp	r2, r3
 80047c0:	f101 0101 	add.w	r1, r1, #1
 80047c4:	d002      	beq.n	80047cc <ai_layers_init_all+0x18>
 80047c6:	b10a      	cbz	r2, 80047cc <ai_layers_init_all+0x18>
 80047c8:	4613      	mov	r3, r2
 80047ca:	e7f5      	b.n	80047b8 <ai_layers_init_all+0x4>
 80047cc:	4608      	mov	r0, r1
 80047ce:	4770      	bx	lr

080047d0 <ai_layers_post_init_all>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80047d4:	2500      	movs	r5, #0
 80047d6:	b16c      	cbz	r4, 80047f4 <ai_layers_post_init_all+0x24>
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	07db      	lsls	r3, r3, #31
 80047dc:	d504      	bpl.n	80047e8 <ai_layers_post_init_all+0x18>
 80047de:	6a23      	ldr	r3, [r4, #32]
 80047e0:	4620      	mov	r0, r4
 80047e2:	b10b      	cbz	r3, 80047e8 <ai_layers_post_init_all+0x18>
 80047e4:	4798      	blx	r3
 80047e6:	3501      	adds	r5, #1
 80047e8:	6923      	ldr	r3, [r4, #16]
 80047ea:	42a3      	cmp	r3, r4
 80047ec:	d002      	beq.n	80047f4 <ai_layers_post_init_all+0x24>
 80047ee:	b10b      	cbz	r3, 80047f4 <ai_layers_post_init_all+0x24>
 80047f0:	461c      	mov	r4, r3
 80047f2:	e7f0      	b.n	80047d6 <ai_layers_post_init_all+0x6>
 80047f4:	4628      	mov	r0, r5
 80047f6:	bd38      	pop	{r3, r4, r5, pc}

080047f8 <ai_layers_forward_all>:
 80047f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fc:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8004800:	4604      	mov	r4, r0
 8004802:	f1b8 0f00 	cmp.w	r8, #0
 8004806:	d02b      	beq.n	8004860 <ai_layers_forward_all+0x68>
 8004808:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800480a:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800480c:	b321      	cbz	r1, 8004858 <ai_layers_forward_all+0x60>
 800480e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004810:	2001      	movs	r0, #1
 8004812:	47c0      	blx	r8
 8004814:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8004816:	b1fe      	cbz	r6, 8004858 <ai_layers_forward_all+0x60>
 8004818:	2700      	movs	r7, #0
 800481a:	4631      	mov	r1, r6
 800481c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800481e:	2002      	movs	r0, #2
 8004820:	47c0      	blx	r8
 8004822:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8004824:	4628      	mov	r0, r5
 8004826:	696b      	ldr	r3, [r5, #20]
 8004828:	4798      	blx	r3
 800482a:	692e      	ldr	r6, [r5, #16]
 800482c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800482e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8004830:	42b5      	cmp	r5, r6
 8004832:	f04f 0003 	mov.w	r0, #3
 8004836:	d007      	beq.n	8004848 <ai_layers_forward_all+0x50>
 8004838:	47c0      	blx	r8
 800483a:	3701      	adds	r7, #1
 800483c:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800483e:	2e00      	cmp	r6, #0
 8004840:	d1eb      	bne.n	800481a <ai_layers_forward_all+0x22>
 8004842:	4638      	mov	r0, r7
 8004844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004848:	2003      	movs	r0, #3
 800484a:	47c0      	blx	r8
 800484c:	2300      	movs	r3, #0
 800484e:	3701      	adds	r7, #1
 8004850:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8004852:	4638      	mov	r0, r7
 8004854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004858:	2700      	movs	r7, #0
 800485a:	4638      	mov	r0, r7
 800485c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004860:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8004862:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8004864:	2d00      	cmp	r5, #0
 8004866:	d0f7      	beq.n	8004858 <ai_layers_forward_all+0x60>
 8004868:	4647      	mov	r7, r8
 800486a:	696b      	ldr	r3, [r5, #20]
 800486c:	4628      	mov	r0, r5
 800486e:	4798      	blx	r3
 8004870:	462b      	mov	r3, r5
 8004872:	692d      	ldr	r5, [r5, #16]
 8004874:	429d      	cmp	r5, r3
 8004876:	d004      	beq.n	8004882 <ai_layers_forward_all+0x8a>
 8004878:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800487a:	3701      	adds	r7, #1
 800487c:	2d00      	cmp	r5, #0
 800487e:	d1f4      	bne.n	800486a <ai_layers_forward_all+0x72>
 8004880:	e7df      	b.n	8004842 <ai_layers_forward_all+0x4a>
 8004882:	2300      	movs	r3, #0
 8004884:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8004886:	3701      	adds	r7, #1
 8004888:	e7db      	b.n	8004842 <ai_layers_forward_all+0x4a>
 800488a:	bf00      	nop

0800488c <forward_dense>:
 800488c:	6983      	ldr	r3, [r0, #24]
 800488e:	881a      	ldrh	r2, [r3, #0]
 8004890:	2a00      	cmp	r2, #0
 8004892:	f000 80cc 	beq.w	8004a2e <forward_dense+0x1a2>
 8004896:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	ed2d 8b02 	vpush	{d8}
 800489e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80048a2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80048a6:	b09b      	sub	sp, #108	@ 0x6c
 80048a8:	b104      	cbz	r4, 80048ac <forward_dense+0x20>
 80048aa:	6824      	ldr	r4, [r4, #0]
 80048ac:	2a01      	cmp	r2, #1
 80048ae:	f000 81d7 	beq.w	8004c60 <forward_dense+0x3d4>
 80048b2:	f8dc 5010 	ldr.w	r5, [ip, #16]
 80048b6:	b105      	cbz	r5, 80048ba <forward_dense+0x2e>
 80048b8:	682d      	ldr	r5, [r5, #0]
 80048ba:	2a02      	cmp	r2, #2
 80048bc:	f000 80b9 	beq.w	8004a32 <forward_dense+0x1a6>
 80048c0:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80048c4:	9308      	str	r3, [sp, #32]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 81c1 	beq.w	8004c4e <forward_dense+0x3c2>
 80048cc:	4619      	mov	r1, r3
 80048ce:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80048d2:	6809      	ldr	r1, [r1, #0]
 80048d4:	910a      	str	r1, [sp, #40]	@ 0x28
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	f240 81bb 	bls.w	8004c52 <forward_dense+0x3c6>
 80048dc:	9b08      	ldr	r3, [sp, #32]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	9308      	str	r3, [sp, #32]
 80048e2:	460b      	mov	r3, r1
 80048e4:	68e0      	ldr	r0, [r4, #12]
 80048e6:	68ee      	ldr	r6, [r5, #12]
 80048e8:	6840      	ldr	r0, [r0, #4]
 80048ea:	6999      	ldr	r1, [r3, #24]
 80048ec:	9010      	str	r0, [sp, #64]	@ 0x40
 80048ee:	6870      	ldr	r0, [r6, #4]
 80048f0:	680b      	ldr	r3, [r1, #0]
 80048f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80048f4:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 80048f8:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80048fc:	fb00 f707 	mul.w	r7, r0, r7
 8004900:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8004904:	fa4e f000 	asr.w	r0, lr, r0
 8004908:	2a03      	cmp	r2, #3
 800490a:	900d      	str	r0, [sp, #52]	@ 0x34
 800490c:	f000 81a5 	beq.w	8004c5a <forward_dense+0x3ce>
 8004910:	f8dc 8028 	ldr.w	r8, [ip, #40]	@ 0x28
 8004914:	f1b8 0f00 	cmp.w	r8, #0
 8004918:	d006      	beq.n	8004928 <forward_dense+0x9c>
 800491a:	f8d8 8000 	ldr.w	r8, [r8]
 800491e:	f1b8 0f00 	cmp.w	r8, #0
 8004922:	d001      	beq.n	8004928 <forward_dense+0x9c>
 8004924:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8004928:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800492c:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8004930:	fa42 f303 	asr.w	r3, r2, r3
 8004934:	07db      	lsls	r3, r3, #31
 8004936:	f140 8177 	bpl.w	8004c28 <forward_dense+0x39c>
 800493a:	f04f 0900 	mov.w	r9, #0
 800493e:	69a3      	ldr	r3, [r4, #24]
 8004940:	69aa      	ldr	r2, [r5, #24]
 8004942:	6891      	ldr	r1, [r2, #8]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004948:	9102      	str	r1, [sp, #8]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	9303      	str	r3, [sp, #12]
 8004950:	fb07 f606 	mul.w	r6, r7, r6
 8004954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004956:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 800495a:	009c      	lsls	r4, r3, #2
 800495c:	4281      	cmp	r1, r0
 800495e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004960:	9409      	str	r4, [sp, #36]	@ 0x24
 8004962:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8004966:	d25d      	bcs.n	8004a24 <forward_dense+0x198>
 8004968:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800496a:	ed9f 8abf 	vldr	s16, [pc, #764]	@ 8004c68 <forward_dense+0x3dc>
 800496e:	08d9      	lsrs	r1, r3, #3
 8004970:	4693      	mov	fp, r2
 8004972:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 8004976:	461a      	mov	r2, r3
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	014b      	lsls	r3, r1, #5
 8004984:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8004988:	9311      	str	r3, [sp, #68]	@ 0x44
 800498a:	0093      	lsls	r3, r2, #2
 800498c:	930c      	str	r3, [sp, #48]	@ 0x30
 800498e:	f002 0301 	and.w	r3, r2, #1
 8004992:	464c      	mov	r4, r9
 8004994:	9104      	str	r1, [sp, #16]
 8004996:	9305      	str	r3, [sp, #20]
 8004998:	46c1      	mov	r9, r8
 800499a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80049a2:	9b08      	ldr	r3, [sp, #32]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d04a      	beq.n	8004a3e <forward_dense+0x1b2>
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	689d      	ldr	r5, [r3, #8]
 80049ac:	2c00      	cmp	r4, #0
 80049ae:	d049      	beq.n	8004a44 <forward_dense+0x1b8>
 80049b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	9b02      	ldr	r3, [sp, #8]
 80049b6:	d057      	beq.n	8004a68 <forward_dense+0x1dc>
 80049b8:	4599      	cmp	r9, r3
 80049ba:	d927      	bls.n	8004a0c <forward_dense+0x180>
 80049bc:	9e03      	ldr	r6, [sp, #12]
 80049be:	4618      	mov	r0, r3
 80049c0:	2d00      	cmp	r5, #0
 80049c2:	d039      	beq.n	8004a38 <forward_dense+0x1ac>
 80049c4:	ecb5 6a01 	vldmia	r5!, {s12}
 80049c8:	45da      	cmp	sl, fp
 80049ca:	d911      	bls.n	80049f0 <forward_dense+0x164>
 80049cc:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8004c68 <forward_dense+0x3dc>
 80049d0:	465a      	mov	r2, fp
 80049d2:	4661      	mov	r1, ip
 80049d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049d8:	ecb2 7a01 	vldmia	r2!, {s14}
 80049dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80049e0:	edd3 6a00 	vldr	s13, [r3]
 80049e4:	4592      	cmp	sl, r2
 80049e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80049ea:	d8f3      	bhi.n	80049d4 <forward_dense+0x148>
 80049ec:	ee36 6a27 	vadd.f32	s12, s12, s15
 80049f0:	eca0 6a01 	vstmia	r0!, {s12}
 80049f4:	4548      	cmp	r0, r9
 80049f6:	44b4      	add	ip, r6
 80049f8:	d3e2      	bcc.n	80049c0 <forward_dense+0x134>
 80049fa:	9a02      	ldr	r2, [sp, #8]
 80049fc:	eba9 0302 	sub.w	r3, r9, r2
 8004a00:	3b01      	subs	r3, #1
 8004a02:	f023 0303 	bic.w	r3, r3, #3
 8004a06:	3304      	adds	r3, #4
 8004a08:	18d3      	adds	r3, r2, r3
 8004a0a:	9302      	str	r3, [sp, #8]
 8004a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a0e:	9a01      	ldr	r2, [sp, #4]
 8004a10:	4499      	add	r9, r3
 8004a12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004a14:	441a      	add	r2, r3
 8004a16:	449a      	add	sl, r3
 8004a18:	449b      	add	fp, r3
 8004a1a:	9201      	str	r2, [sp, #4]
 8004a1c:	9b02      	ldr	r3, [sp, #8]
 8004a1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d3ba      	bcc.n	800499a <forward_dense+0x10e>
 8004a24:	b01b      	add	sp, #108	@ 0x6c
 8004a26:	ecbd 8b02 	vpop	{d8}
 8004a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a2e:	6853      	ldr	r3, [r2, #4]
 8004a30:	deff      	udf	#255	@ 0xff
 8004a32:	2300      	movs	r3, #0
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	deff      	udf	#255	@ 0xff
 8004a38:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 8004c68 <forward_dense+0x3dc>
 8004a3c:	e7c4      	b.n	80049c8 <forward_dense+0x13c>
 8004a3e:	461d      	mov	r5, r3
 8004a40:	2c00      	cmp	r4, #0
 8004a42:	d1b5      	bne.n	80049b0 <forward_dense+0x124>
 8004a44:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004a46:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004a48:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004a4a:	9b02      	ldr	r3, [sp, #8]
 8004a4c:	9218      	str	r2, [sp, #96]	@ 0x60
 8004a4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a50:	e9cd 3b13 	strd	r3, fp, [sp, #76]	@ 0x4c
 8004a54:	4413      	add	r3, r2
 8004a56:	9302      	str	r3, [sp, #8]
 8004a58:	a813      	add	r0, sp, #76	@ 0x4c
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e9cd c515 	strd	ip, r5, [sp, #84]	@ 0x54
 8004a60:	9319      	str	r3, [sp, #100]	@ 0x64
 8004a62:	f000 fa1d 	bl	8004ea0 <forward_lite_dense_if32of32wf32>
 8004a66:	e7d1      	b.n	8004a0c <forward_dense+0x180>
 8004a68:	4599      	cmp	r9, r3
 8004a6a:	d9cf      	bls.n	8004a0c <forward_dense+0x180>
 8004a6c:	9a04      	ldr	r2, [sp, #16]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	1c57      	adds	r7, r2, #1
 8004a72:	9b01      	ldr	r3, [sp, #4]
 8004a74:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004a76:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8004a7a:	4452      	add	r2, sl
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 8004a82:	9206      	str	r2, [sp, #24]
 8004a84:	9307      	str	r3, [sp, #28]
 8004a86:	2d00      	cmp	r5, #0
 8004a88:	f000 80c3 	beq.w	8004c12 <forward_dense+0x386>
 8004a8c:	9b04      	ldr	r3, [sp, #16]
 8004a8e:	ecf5 2a01 	vldmia	r5!, {s5}
 8004a92:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8004c68 <forward_dense+0x3dc>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80c3 	beq.w	8004c22 <forward_dense+0x396>
 8004a9c:	f10c 0204 	add.w	r2, ip, #4
 8004aa0:	f10b 0320 	add.w	r3, fp, #32
 8004aa4:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 8004aa8:	ed13 2a07 	vldr	s4, [r3, #-28]	@ 0xffffffe4
 8004aac:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8004ab0:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8004ab4:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 8004ab8:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 8004abc:	ed13 5a04 	vldr	s10, [r3, #-16]
 8004ac0:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004ac4:	ed13 6a02 	vldr	s12, [r3, #-8]
 8004ac8:	ed53 6a01 	vldr	s13, [r3, #-4]
 8004acc:	f000 060f 	and.w	r6, r0, #15
 8004ad0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004ad4:	edd6 7a00 	vldr	s15, [r6]
 8004ad8:	0900      	lsrs	r0, r0, #4
 8004ada:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004ade:	ed90 3a00 	vldr	s6, [r0]
 8004ae2:	ee67 7a82 	vmul.f32	s15, s15, s4
 8004ae6:	0908      	lsrs	r0, r1, #4
 8004ae8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004aec:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004af0:	f001 010f 	and.w	r1, r1, #15
 8004af4:	edd0 3a00 	vldr	s7, [r0]
 8004af8:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 8004afc:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004b00:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004b04:	0906      	lsrs	r6, r0, #4
 8004b06:	ed91 4a00 	vldr	s8, [r1]
 8004b0a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004b0e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004b12:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004b16:	f000 000f 	and.w	r0, r0, #15
 8004b1a:	edd6 4a00 	vldr	s9, [r6]
 8004b1e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004b22:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004b26:	3204      	adds	r2, #4
 8004b28:	ed90 5a00 	vldr	s10, [r0]
 8004b2c:	0908      	lsrs	r0, r1, #4
 8004b2e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004b32:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004b36:	f001 010f 	and.w	r1, r1, #15
 8004b3a:	edd0 5a00 	vldr	s11, [r0]
 8004b3e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004b42:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004b46:	42ba      	cmp	r2, r7
 8004b48:	ed91 6a00 	vldr	s12, [r1]
 8004b4c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004b50:	f103 0320 	add.w	r3, r3, #32
 8004b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b58:	d1a4      	bne.n	8004aa4 <forward_dense+0x218>
 8004b5a:	f8dd e018 	ldr.w	lr, [sp, #24]
 8004b5e:	f1a7 0804 	sub.w	r8, r7, #4
 8004b62:	9b01      	ldr	r3, [sp, #4]
 8004b64:	459e      	cmp	lr, r3
 8004b66:	d22a      	bcs.n	8004bbe <forward_dense+0x332>
 8004b68:	9b07      	ldr	r3, [sp, #28]
 8004b6a:	eba3 060e 	sub.w	r6, r3, lr
 8004b6e:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 8004b72:	f10e 0208 	add.w	r2, lr, #8
 8004b76:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8004b7a:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 8004b7e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004b82:	ed52 5a01 	vldr	s11, [r2, #-4]
 8004b86:	ed52 6a02 	vldr	s13, [r2, #-8]
 8004b8a:	f003 010f 	and.w	r1, r3, #15
 8004b8e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004b92:	edd1 7a00 	vldr	s15, [r1]
 8004b96:	091b      	lsrs	r3, r3, #4
 8004b98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b9c:	ed93 6a00 	vldr	s12, [r3]
 8004ba0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004ba4:	42b0      	cmp	r0, r6
 8004ba6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004baa:	f102 0208 	add.w	r2, r2, #8
 8004bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bb2:	d1e4      	bne.n	8004b7e <forward_dense+0x2f2>
 8004bb4:	f10a 0a01 	add.w	sl, sl, #1
 8004bb8:	44d0      	add	r8, sl
 8004bba:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8004bbe:	9b05      	ldr	r3, [sp, #20]
 8004bc0:	b1cb      	cbz	r3, 8004bf6 <forward_dense+0x36a>
 8004bc2:	f898 3000 	ldrb.w	r3, [r8]
 8004bc6:	edde 7a00 	vldr	s15, [lr]
 8004bca:	9a03      	ldr	r2, [sp, #12]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004bd2:	edd3 6a00 	vldr	s13, [r3]
 8004bd6:	9b00      	ldr	r3, [sp, #0]
 8004bd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004bdc:	4494      	add	ip, r2
 8004bde:	4417      	add	r7, r2
 8004be0:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004be4:	eca3 7a01 	vstmia	r3!, {s14}
 8004be8:	4599      	cmp	r9, r3
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	f63f af4b 	bhi.w	8004a86 <forward_dense+0x1fa>
 8004bf0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004bf4:	e701      	b.n	80049fa <forward_dense+0x16e>
 8004bf6:	9b00      	ldr	r3, [sp, #0]
 8004bf8:	9a03      	ldr	r2, [sp, #12]
 8004bfa:	ee72 2a87 	vadd.f32	s5, s5, s14
 8004bfe:	4494      	add	ip, r2
 8004c00:	ece3 2a01 	vstmia	r3!, {s5}
 8004c04:	454b      	cmp	r3, r9
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	4417      	add	r7, r2
 8004c0a:	d2f1      	bcs.n	8004bf0 <forward_dense+0x364>
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	f47f af3d 	bne.w	8004a8c <forward_dense+0x200>
 8004c12:	9b04      	ldr	r3, [sp, #16]
 8004c14:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004c68 <forward_dense+0x3dc>
 8004c18:	eef0 2a48 	vmov.f32	s5, s16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f47f af3d 	bne.w	8004a9c <forward_dense+0x210>
 8004c22:	46de      	mov	lr, fp
 8004c24:	46e0      	mov	r8, ip
 8004c26:	e79c      	b.n	8004b62 <forward_dense+0x2d6>
 8004c28:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8004c2c:	f1b8 0f00 	cmp.w	r8, #0
 8004c30:	f43f ae85 	beq.w	800493e <forward_dense+0xb2>
 8004c34:	e9d8 0100 	ldrd	r0, r1, [r8]
 8004c38:	f000 fb82 	bl	8005340 <ai_array_get_byte_size>
 8004c3c:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8004c40:	4602      	mov	r2, r0
 8004c42:	4641      	mov	r1, r8
 8004c44:	4648      	mov	r0, r9
 8004c46:	f000 fa85 	bl	8005154 <st_int8_copy>
 8004c4a:	46c1      	mov	r9, r8
 8004c4c:	e677      	b.n	800493e <forward_dense+0xb2>
 8004c4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c50:	e648      	b.n	80048e4 <forward_dense+0x58>
 8004c52:	2300      	movs	r3, #0
 8004c54:	9308      	str	r3, [sp, #32]
 8004c56:	460b      	mov	r3, r1
 8004c58:	e644      	b.n	80048e4 <forward_dense+0x58>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	deff      	udf	#255	@ 0xff
 8004c60:	2300      	movs	r3, #0
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	deff      	udf	#255	@ 0xff
 8004c66:	bf00      	nop
 8004c68:	00000000 	.word	0x00000000

08004c6c <forward_relu>:
 8004c6c:	6982      	ldr	r2, [r0, #24]
 8004c6e:	8813      	ldrh	r3, [r2, #0]
 8004c70:	b323      	cbz	r3, 8004cbc <forward_relu+0x50>
 8004c72:	6851      	ldr	r1, [r2, #4]
 8004c74:	684a      	ldr	r2, [r1, #4]
 8004c76:	b102      	cbz	r2, 8004c7a <forward_relu+0xe>
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	f000 808d 	beq.w	8004d9a <forward_relu+0x12e>
 8004c80:	b470      	push	{r4, r5, r6}
 8004c82:	6909      	ldr	r1, [r1, #16]
 8004c84:	b101      	cbz	r1, 8004c88 <forward_relu+0x1c>
 8004c86:	6809      	ldr	r1, [r1, #0]
 8004c88:	69c6      	ldr	r6, [r0, #28]
 8004c8a:	b1ce      	cbz	r6, 8004cc0 <forward_relu+0x54>
 8004c8c:	6873      	ldr	r3, [r6, #4]
 8004c8e:	6988      	ldr	r0, [r1, #24]
 8004c90:	6991      	ldr	r1, [r2, #24]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d044      	beq.n	8004d20 <forward_relu+0xb4>
 8004c96:	6893      	ldr	r3, [r2, #8]
 8004c98:	6880      	ldr	r0, [r0, #8]
 8004c9a:	6889      	ldr	r1, [r1, #8]
 8004c9c:	0a1b      	lsrs	r3, r3, #8
 8004c9e:	d073      	beq.n	8004d88 <forward_relu+0x11c>
 8004ca0:	68d5      	ldr	r5, [r2, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004ca8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8004cac:	429d      	cmp	r5, r3
 8004cae:	fb04 f202 	mul.w	r2, r4, r2
 8004cb2:	d1f9      	bne.n	8004ca8 <forward_relu+0x3c>
 8004cb4:	68b3      	ldr	r3, [r6, #8]
 8004cb6:	bc70      	pop	{r4, r5, r6}
 8004cb8:	f000 b874 	b.w	8004da4 <forward_lite_nl_relu_generic_if32of32_kernel>
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	deff      	udf	#255	@ 0xff
 8004cc0:	6893      	ldr	r3, [r2, #8]
 8004cc2:	6989      	ldr	r1, [r1, #24]
 8004cc4:	6990      	ldr	r0, [r2, #24]
 8004cc6:	6889      	ldr	r1, [r1, #8]
 8004cc8:	6884      	ldr	r4, [r0, #8]
 8004cca:	0a1b      	lsrs	r3, r3, #8
 8004ccc:	d05e      	beq.n	8004d8c <forward_relu+0x120>
 8004cce:	68d5      	ldr	r5, [r2, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004cd6:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8004cda:	429d      	cmp	r5, r3
 8004cdc:	fb00 f202 	mul.w	r2, r0, r2
 8004ce0:	d1f9      	bne.n	8004cd6 <forward_relu+0x6a>
 8004ce2:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8004cec:	4294      	cmp	r4, r2
 8004cee:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004cf2:	d813      	bhi.n	8004d1c <forward_relu+0xb0>
 8004cf4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8004da0 <forward_relu+0x134>
 8004cf8:	3204      	adds	r2, #4
 8004cfa:	3104      	adds	r1, #4
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	ed72 7a01 	vldmdb	r2!, {s15}
 8004d02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0a:	f1a3 0308 	sub.w	r3, r3, #8
 8004d0e:	bfb8      	it	lt
 8004d10:	eef0 7a47 	vmovlt.f32	s15, s14
 8004d14:	429c      	cmp	r4, r3
 8004d16:	ed61 7a01 	vstmdb	r1!, {s15}
 8004d1a:	d9ef      	bls.n	8004cfc <forward_relu+0x90>
 8004d1c:	bc70      	pop	{r4, r5, r6}
 8004d1e:	4770      	bx	lr
 8004d20:	688c      	ldr	r4, [r1, #8]
 8004d22:	6891      	ldr	r1, [r2, #8]
 8004d24:	6880      	ldr	r0, [r0, #8]
 8004d26:	0a09      	lsrs	r1, r1, #8
 8004d28:	d032      	beq.n	8004d90 <forward_relu+0x124>
 8004d2a:	68d5      	ldr	r5, [r2, #12]
 8004d2c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8004d30:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004d34:	4295      	cmp	r5, r2
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	d1f9      	bne.n	8004d30 <forward_relu+0xc4>
 8004d3c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004d40:	3a01      	subs	r2, #1
 8004d42:	68b1      	ldr	r1, [r6, #8]
 8004d44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004d48:	429c      	cmp	r4, r3
 8004d4a:	ed91 7a00 	vldr	s14, [r1]
 8004d4e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004d52:	d8e3      	bhi.n	8004d1c <forward_relu+0xb0>
 8004d54:	2500      	movs	r5, #0
 8004d56:	3304      	adds	r3, #4
 8004d58:	1d02      	adds	r2, r0, #4
 8004d5a:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004d5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	f1a3 0104 	sub.w	r1, r3, #4
 8004d6a:	f1a3 0308 	sub.w	r3, r3, #8
 8004d6e:	d405      	bmi.n	8004d7c <forward_relu+0x110>
 8004d70:	429c      	cmp	r4, r3
 8004d72:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004d76:	d8d1      	bhi.n	8004d1c <forward_relu+0xb0>
 8004d78:	460b      	mov	r3, r1
 8004d7a:	e7ee      	b.n	8004d5a <forward_relu+0xee>
 8004d7c:	429c      	cmp	r4, r3
 8004d7e:	ed62 7a01 	vstmdb	r2!, {s15}
 8004d82:	d8cb      	bhi.n	8004d1c <forward_relu+0xb0>
 8004d84:	460b      	mov	r3, r1
 8004d86:	e7e8      	b.n	8004d5a <forward_relu+0xee>
 8004d88:	2201      	movs	r2, #1
 8004d8a:	e793      	b.n	8004cb4 <forward_relu+0x48>
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	e7b1      	b.n	8004cf4 <forward_relu+0x88>
 8004d90:	68b2      	ldr	r2, [r6, #8]
 8004d92:	4623      	mov	r3, r4
 8004d94:	ed92 7a00 	vldr	s14, [r2]
 8004d98:	e7dc      	b.n	8004d54 <forward_relu+0xe8>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	deff      	udf	#255	@ 0xff
 8004da0:	00000000 	.word	0x00000000

08004da4 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8004da4:	edd3 6a02 	vldr	s13, [r3, #8]
 8004da8:	ed93 7a00 	vldr	s14, [r3]
 8004dac:	ed93 6a01 	vldr	s12, [r3, #4]
 8004db0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db8:	d42a      	bmi.n	8004e10 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8004dba:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004dbe:	3a01      	subs	r2, #1
 8004dc0:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004dc4:	4561      	cmp	r1, ip
 8004dc6:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8004dca:	d85d      	bhi.n	8004e88 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8004dcc:	1d11      	adds	r1, r2, #4
 8004dce:	f10c 0304 	add.w	r3, ip, #4
 8004dd2:	4408      	add	r0, r1
 8004dd4:	ebac 0202 	sub.w	r2, ip, r2
 8004dd8:	e00c      	b.n	8004df4 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8004dda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de2:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8004de6:	db01      	blt.n	8004dec <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8004de8:	ee65 7a86 	vmul.f32	s15, s11, s12
 8004dec:	4293      	cmp	r3, r2
 8004dee:	ed60 7a01 	vstmdb	r0!, {s15}
 8004df2:	d00c      	beq.n	8004e0e <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8004df4:	ed73 7a01 	vldmdb	r3!, {s15}
 8004df8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e00:	daeb      	bge.n	8004dda <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8004e02:	eef0 7a66 	vmov.f32	s15, s13
 8004e06:	4293      	cmp	r3, r2
 8004e08:	ed60 7a01 	vstmdb	r0!, {s15}
 8004e0c:	d1f2      	bne.n	8004df4 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8004e0e:	4770      	bx	lr
 8004e10:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004e14:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004e18:	3a01      	subs	r2, #1
 8004e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004e22:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8004e26:	d017      	beq.n	8004e58 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 8004e28:	4561      	cmp	r1, ip
 8004e2a:	d82d      	bhi.n	8004e88 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8004e2c:	1d11      	adds	r1, r2, #4
 8004e2e:	f10c 0304 	add.w	r3, ip, #4
 8004e32:	4401      	add	r1, r0
 8004e34:	ebac 0202 	sub.w	r2, ip, r2
 8004e38:	ed73 7a01 	vldmdb	r3!, {s15}
 8004e3c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e48:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004e4c:	d81d      	bhi.n	8004e8a <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	ed61 6a01 	vstmdb	r1!, {s13}
 8004e54:	d1f0      	bne.n	8004e38 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8004e56:	4770      	bx	lr
 8004e58:	4561      	cmp	r1, ip
 8004e5a:	d815      	bhi.n	8004e88 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8004e5c:	1d11      	adds	r1, r2, #4
 8004e5e:	b500      	push	{lr}
 8004e60:	f10c 0304 	add.w	r3, ip, #4
 8004e64:	f04f 0e00 	mov.w	lr, #0
 8004e68:	4401      	add	r1, r0
 8004e6a:	ebac 0202 	sub.w	r2, ip, r2
 8004e6e:	ed73 7a01 	vldmdb	r3!, {s15}
 8004e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7a:	d40b      	bmi.n	8004e94 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	f841 ed04 	str.w	lr, [r1, #-4]!
 8004e82:	d1f4      	bne.n	8004e6e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8004e84:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	ed61 7a01 	vstmdb	r1!, {s15}
 8004e90:	d1d2      	bne.n	8004e38 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8004e92:	4770      	bx	lr
 8004e94:	4293      	cmp	r3, r2
 8004e96:	ed61 7a01 	vstmdb	r1!, {s15}
 8004e9a:	d1e8      	bne.n	8004e6e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8004e9c:	e7f2      	b.n	8004e84 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8004e9e:	bf00      	nop

08004ea0 <forward_lite_dense_if32of32wf32>:
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8004ea8:	6801      	ldr	r1, [r0, #0]
 8004eaa:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004eb8:	4299      	cmp	r1, r3
 8004eba:	9100      	str	r1, [sp, #0]
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	f080 811e 	bcs.w	80050fe <forward_lite_dense_if32of32wf32+0x25e>
 8004ec2:	6904      	ldr	r4, [r0, #16]
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	0096      	lsls	r6, r2, #2
 8004ec8:	9b00      	ldr	r3, [sp, #0]
 8004eca:	68bd      	ldr	r5, [r7, #8]
 8004ecc:	eb03 0e06 	add.w	lr, r3, r6
 8004ed0:	459e      	cmp	lr, r3
 8004ed2:	461e      	mov	r6, r3
 8004ed4:	f240 8104 	bls.w	80050e0 <forward_lite_dense_if32of32wf32+0x240>
 8004ed8:	f1a4 0c10 	sub.w	ip, r4, #16
 8004edc:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8004ee0:	f10c 0c01 	add.w	ip, ip, #1
 8004ee4:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8004ee8:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8004eec:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8004ef0:	2c0f      	cmp	r4, #15
 8004ef2:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8005150 <forward_lite_dense_if32of32wf32+0x2b0>
 8004ef6:	f240 8105 	bls.w	8005104 <forward_lite_dense_if32of32wf32+0x264>
 8004efa:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8004efe:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8004f02:	4621      	mov	r1, r4
 8004f04:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 8004f08:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8004f0c:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8004f10:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8004f14:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8004f18:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8004f1c:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8004f20:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8004f24:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 8004f28:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8004f2c:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8004f30:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8004f34:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8004f38:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004f3c:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8004f40:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004f44:	3910      	subs	r1, #16
 8004f46:	290f      	cmp	r1, #15
 8004f48:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8004f4c:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8004f50:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004f54:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8004f58:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004f5c:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8004f60:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8004f64:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8004f68:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8004f6c:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8004f70:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004f74:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8004f78:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8004f7c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004f80:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8004f84:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8004f88:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004f8c:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8004f90:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8004f94:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004f98:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8004f9c:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8004fa0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004fa4:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8004fa8:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8004fac:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004fb0:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8004fb4:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8004fb8:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004fbc:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004fc0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004fc4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004fc8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004fcc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fd4:	d896      	bhi.n	8004f04 <forward_lite_dense_if32of32wf32+0x64>
 8004fd6:	eb05 020b 	add.w	r2, r5, fp
 8004fda:	f004 010f 	and.w	r1, r4, #15
 8004fde:	4663      	mov	r3, ip
 8004fe0:	2903      	cmp	r1, #3
 8004fe2:	d95f      	bls.n	80050a4 <forward_lite_dense_if32of32wf32+0x204>
 8004fe4:	edd2 6a01 	vldr	s13, [r2, #4]
 8004fe8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fec:	ed93 6a00 	vldr	s12, [r3]
 8004ff0:	ed93 5a02 	vldr	s10, [r3, #8]
 8004ff4:	edd2 5a02 	vldr	s11, [r2, #8]
 8004ff8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ffc:	edd2 6a00 	vldr	s13, [r2]
 8005000:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005004:	1f08      	subs	r0, r1, #4
 8005006:	2803      	cmp	r0, #3
 8005008:	ed93 6a03 	vldr	s12, [r3, #12]
 800500c:	edd2 6a03 	vldr	s13, [r2, #12]
 8005010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005014:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005018:	eee6 7a26 	vfma.f32	s15, s12, s13
 800501c:	eeb0 7a67 	vmov.f32	s14, s15
 8005020:	d938      	bls.n	8005094 <forward_lite_dense_if32of32wf32+0x1f4>
 8005022:	edd2 6a05 	vldr	s13, [r2, #20]
 8005026:	edd3 7a05 	vldr	s15, [r3, #20]
 800502a:	ed93 6a04 	vldr	s12, [r3, #16]
 800502e:	ed93 5a06 	vldr	s10, [r3, #24]
 8005032:	edd2 5a06 	vldr	s11, [r2, #24]
 8005036:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800503a:	edd2 6a04 	vldr	s13, [r2, #16]
 800503e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005042:	f1a1 0a08 	sub.w	sl, r1, #8
 8005046:	f1ba 0f03 	cmp.w	sl, #3
 800504a:	ed93 6a07 	vldr	s12, [r3, #28]
 800504e:	edd2 6a07 	vldr	s13, [r2, #28]
 8005052:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005056:	eee6 7a26 	vfma.f32	s15, s12, s13
 800505a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800505e:	d919      	bls.n	8005094 <forward_lite_dense_if32of32wf32+0x1f4>
 8005060:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005064:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8005068:	ed92 6a08 	vldr	s12, [r2, #32]
 800506c:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8005070:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8005074:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005078:	edd3 6a08 	vldr	s13, [r3, #32]
 800507c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005080:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8005084:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8005088:	eee5 7a25 	vfma.f32	s15, s10, s11
 800508c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005090:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005094:	0880      	lsrs	r0, r0, #2
 8005096:	3001      	adds	r0, #1
 8005098:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800509c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80050a0:	f001 0103 	and.w	r1, r1, #3
 80050a4:	b1a9      	cbz	r1, 80050d2 <forward_lite_dense_if32of32wf32+0x232>
 80050a6:	edd3 6a00 	vldr	s13, [r3]
 80050aa:	edd2 7a00 	vldr	s15, [r2]
 80050ae:	3901      	subs	r1, #1
 80050b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050b4:	d00d      	beq.n	80050d2 <forward_lite_dense_if32of32wf32+0x232>
 80050b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80050ba:	edd2 7a01 	vldr	s15, [r2, #4]
 80050be:	2901      	cmp	r1, #1
 80050c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050c4:	d005      	beq.n	80050d2 <forward_lite_dense_if32of32wf32+0x232>
 80050c6:	edd2 6a02 	vldr	s13, [r2, #8]
 80050ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80050ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050d2:	444d      	add	r5, r9
 80050d4:	eca6 7a01 	vstmia	r6!, {s14}
 80050d8:	45b6      	cmp	lr, r6
 80050da:	f63f af09 	bhi.w	8004ef0 <forward_lite_dense_if32of32wf32+0x50>
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	b99b      	cbnz	r3, 800510c <forward_lite_dense_if32of32wf32+0x26c>
 80050e4:	9b00      	ldr	r3, [sp, #0]
 80050e6:	9901      	ldr	r1, [sp, #4]
 80050e8:	693c      	ldr	r4, [r7, #16]
 80050ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80050ee:	4299      	cmp	r1, r3
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80050f6:	ea4f 0682 	mov.w	r6, r2, lsl #2
 80050fa:	f63f aee5 	bhi.w	8004ec8 <forward_lite_dense_if32of32wf32+0x28>
 80050fe:	b003      	add	sp, #12
 8005100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005104:	4621      	mov	r1, r4
 8005106:	462a      	mov	r2, r5
 8005108:	4643      	mov	r3, r8
 800510a:	e769      	b.n	8004fe0 <forward_lite_dense_if32of32wf32+0x140>
 800510c:	2a00      	cmp	r2, #0
 800510e:	d0e9      	beq.n	80050e4 <forward_lite_dense_if32of32wf32+0x244>
 8005110:	9a00      	ldr	r2, [sp, #0]
 8005112:	ed93 7a00 	vldr	s14, [r3]
 8005116:	edd2 7a00 	vldr	s15, [r2]
 800511a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800511e:	4613      	mov	r3, r2
 8005120:	edc2 7a00 	vstr	s15, [r2]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	2a01      	cmp	r2, #1
 8005128:	d9dc      	bls.n	80050e4 <forward_lite_dense_if32of32wf32+0x244>
 800512a:	1d19      	adds	r1, r3, #4
 800512c:	2301      	movs	r3, #1
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	ed91 7a00 	vldr	s14, [r1]
 8005134:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005138:	edd2 7a00 	vldr	s15, [r2]
 800513c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005140:	3301      	adds	r3, #1
 8005142:	ece1 7a01 	vstmia	r1!, {s15}
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	429a      	cmp	r2, r3
 800514a:	d8f0      	bhi.n	800512e <forward_lite_dense_if32of32wf32+0x28e>
 800514c:	e7ca      	b.n	80050e4 <forward_lite_dense_if32of32wf32+0x244>
 800514e:	bf00      	nop
 8005150:	00000000 	.word	0x00000000

08005154 <st_int8_copy>:
 8005154:	4288      	cmp	r0, r1
 8005156:	d056      	beq.n	8005206 <st_int8_copy+0xb2>
 8005158:	2a00      	cmp	r2, #0
 800515a:	d054      	beq.n	8005206 <st_int8_copy+0xb2>
 800515c:	4288      	cmp	r0, r1
 800515e:	d353      	bcc.n	8005208 <st_int8_copy+0xb4>
 8005160:	078b      	lsls	r3, r1, #30
 8005162:	d102      	bne.n	800516a <st_int8_copy+0x16>
 8005164:	e009      	b.n	800517a <st_int8_copy+0x26>
 8005166:	2a00      	cmp	r2, #0
 8005168:	d05b      	beq.n	8005222 <st_int8_copy+0xce>
 800516a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800516e:	f801 3b01 	strb.w	r3, [r1], #1
 8005172:	078b      	lsls	r3, r1, #30
 8005174:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 8005178:	d1f5      	bne.n	8005166 <st_int8_copy+0x12>
 800517a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8005182:	d068      	beq.n	8005256 <st_int8_copy+0x102>
 8005184:	ea40 0301 	orr.w	r3, r0, r1
 8005188:	075b      	lsls	r3, r3, #29
 800518a:	d14b      	bne.n	8005224 <st_int8_copy+0xd0>
 800518c:	f1be 0f01 	cmp.w	lr, #1
 8005190:	d048      	beq.n	8005224 <st_int8_copy+0xd0>
 8005192:	f100 0310 	add.w	r3, r0, #16
 8005196:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800519a:	f101 0c10 	add.w	ip, r1, #16
 800519e:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80051a2:	ed13 6b04 	vldr	d6, [r3, #-16]
 80051a6:	ed13 7b02 	vldr	d7, [r3, #-8]
 80051aa:	3310      	adds	r3, #16
 80051ac:	4573      	cmp	r3, lr
 80051ae:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80051b2:	ed0c 7b02 	vstr	d7, [ip, #-8]
 80051b6:	f10c 0c10 	add.w	ip, ip, #16
 80051ba:	d1f2      	bne.n	80051a2 <st_int8_copy+0x4e>
 80051bc:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80051c0:	4421      	add	r1, r4
 80051c2:	4420      	add	r0, r4
 80051c4:	f002 0203 	and.w	r2, r2, #3
 80051c8:	b16b      	cbz	r3, 80051e6 <st_int8_copy+0x92>
 80051ca:	6804      	ldr	r4, [r0, #0]
 80051cc:	600c      	str	r4, [r1, #0]
 80051ce:	1e5c      	subs	r4, r3, #1
 80051d0:	d005      	beq.n	80051de <st_int8_copy+0x8a>
 80051d2:	6845      	ldr	r5, [r0, #4]
 80051d4:	604d      	str	r5, [r1, #4]
 80051d6:	2c01      	cmp	r4, #1
 80051d8:	bf1c      	itt	ne
 80051da:	6884      	ldrne	r4, [r0, #8]
 80051dc:	608c      	strne	r4, [r1, #8]
 80051de:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80051e2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80051e6:	b162      	cbz	r2, 8005202 <st_int8_copy+0xae>
 80051e8:	f990 3000 	ldrsb.w	r3, [r0]
 80051ec:	700b      	strb	r3, [r1, #0]
 80051ee:	3a01      	subs	r2, #1
 80051f0:	d007      	beq.n	8005202 <st_int8_copy+0xae>
 80051f2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80051f6:	704b      	strb	r3, [r1, #1]
 80051f8:	2a01      	cmp	r2, #1
 80051fa:	bf1c      	itt	ne
 80051fc:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8005200:	708b      	strbne	r3, [r1, #2]
 8005202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005206:	4770      	bx	lr
 8005208:	1883      	adds	r3, r0, r2
 800520a:	428b      	cmp	r3, r1
 800520c:	d9a8      	bls.n	8005160 <st_int8_copy+0xc>
 800520e:	4283      	cmp	r3, r0
 8005210:	440a      	add	r2, r1
 8005212:	d9f8      	bls.n	8005206 <st_int8_copy+0xb2>
 8005214:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8005218:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800521c:	4283      	cmp	r3, r0
 800521e:	d1f9      	bne.n	8005214 <st_int8_copy+0xc0>
 8005220:	4770      	bx	lr
 8005222:	4770      	bx	lr
 8005224:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005228:	460b      	mov	r3, r1
 800522a:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800522e:	4684      	mov	ip, r0
 8005230:	f8dc 7000 	ldr.w	r7, [ip]
 8005234:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8005238:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800523c:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8005240:	f8c3 800c 	str.w	r8, [r3, #12]
 8005244:	601f      	str	r7, [r3, #0]
 8005246:	605e      	str	r6, [r3, #4]
 8005248:	609d      	str	r5, [r3, #8]
 800524a:	3310      	adds	r3, #16
 800524c:	459e      	cmp	lr, r3
 800524e:	f10c 0c10 	add.w	ip, ip, #16
 8005252:	d1ed      	bne.n	8005230 <st_int8_copy+0xdc>
 8005254:	e7b2      	b.n	80051bc <st_int8_copy+0x68>
 8005256:	0893      	lsrs	r3, r2, #2
 8005258:	f002 0203 	and.w	r2, r2, #3
 800525c:	e7b4      	b.n	80051c8 <st_int8_copy+0x74>
 800525e:	bf00      	nop

08005260 <ai_array_to_buffer_fmt>:
 8005260:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005264:	2b02      	cmp	r3, #2
 8005266:	d053      	beq.n	8005310 <ai_array_to_buffer_fmt+0xb0>
 8005268:	4a2c      	ldr	r2, [pc, #176]	@ (800531c <ai_array_to_buffer_fmt+0xbc>)
 800526a:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800526e:	4293      	cmp	r3, r2
 8005270:	d010      	beq.n	8005294 <ai_array_to_buffer_fmt+0x34>
 8005272:	dc21      	bgt.n	80052b8 <ai_array_to_buffer_fmt+0x58>
 8005274:	4a2a      	ldr	r2, [pc, #168]	@ (8005320 <ai_array_to_buffer_fmt+0xc0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00c      	beq.n	8005294 <ai_array_to_buffer_fmt+0x34>
 800527a:	dd0f      	ble.n	800529c <ai_array_to_buffer_fmt+0x3c>
 800527c:	4a29      	ldr	r2, [pc, #164]	@ (8005324 <ai_array_to_buffer_fmt+0xc4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d008      	beq.n	8005294 <ai_array_to_buffer_fmt+0x34>
 8005282:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <ai_array_to_buffer_fmt+0x34>
 800528a:	4a27      	ldr	r2, [pc, #156]	@ (8005328 <ai_array_to_buffer_fmt+0xc8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	bf0c      	ite	eq
 8005290:	4613      	moveq	r3, r2
 8005292:	2340      	movne	r3, #64	@ 0x40
 8005294:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8005298:	4318      	orrs	r0, r3
 800529a:	4770      	bx	lr
 800529c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d0f7      	beq.n	8005294 <ai_array_to_buffer_fmt+0x34>
 80052a4:	dd2a      	ble.n	80052fc <ai_array_to_buffer_fmt+0x9c>
 80052a6:	4a21      	ldr	r2, [pc, #132]	@ (800532c <ai_array_to_buffer_fmt+0xcc>)
 80052a8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80052ac:	4293      	cmp	r3, r2
 80052ae:	bf0c      	ite	eq
 80052b0:	4613      	moveq	r3, r2
 80052b2:	2340      	movne	r3, #64	@ 0x40
 80052b4:	4318      	orrs	r0, r3
 80052b6:	4770      	bx	lr
 80052b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005330 <ai_array_to_buffer_fmt+0xd0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d0ea      	beq.n	8005294 <ai_array_to_buffer_fmt+0x34>
 80052be:	dd0f      	ble.n	80052e0 <ai_array_to_buffer_fmt+0x80>
 80052c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005334 <ai_array_to_buffer_fmt+0xd4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d0e6      	beq.n	8005294 <ai_array_to_buffer_fmt+0x34>
 80052c6:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d0e2      	beq.n	8005294 <ai_array_to_buffer_fmt+0x34>
 80052ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005338 <ai_array_to_buffer_fmt+0xd8>)
 80052d0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80052d4:	4293      	cmp	r3, r2
 80052d6:	bf0c      	ite	eq
 80052d8:	4613      	moveq	r3, r2
 80052da:	2340      	movne	r3, #64	@ 0x40
 80052dc:	4318      	orrs	r0, r3
 80052de:	4770      	bx	lr
 80052e0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d0d5      	beq.n	8005294 <ai_array_to_buffer_fmt+0x34>
 80052e8:	3207      	adds	r2, #7
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d0d2      	beq.n	8005294 <ai_array_to_buffer_fmt+0x34>
 80052ee:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 80052f2:	4293      	cmp	r3, r2
 80052f4:	bf0c      	ite	eq
 80052f6:	4613      	moveq	r3, r2
 80052f8:	2340      	movne	r3, #64	@ 0x40
 80052fa:	e7cb      	b.n	8005294 <ai_array_to_buffer_fmt+0x34>
 80052fc:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8005300:	4293      	cmp	r3, r2
 8005302:	d0c7      	beq.n	8005294 <ai_array_to_buffer_fmt+0x34>
 8005304:	3280      	adds	r2, #128	@ 0x80
 8005306:	4293      	cmp	r3, r2
 8005308:	bf0c      	ite	eq
 800530a:	4613      	moveq	r3, r2
 800530c:	2340      	movne	r3, #64	@ 0x40
 800530e:	e7c1      	b.n	8005294 <ai_array_to_buffer_fmt+0x34>
 8005310:	4b0a      	ldr	r3, [pc, #40]	@ (800533c <ai_array_to_buffer_fmt+0xdc>)
 8005312:	4003      	ands	r3, r0
 8005314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005318:	e7bc      	b.n	8005294 <ai_array_to_buffer_fmt+0x34>
 800531a:	bf00      	nop
 800531c:	00840040 	.word	0x00840040
 8005320:	00040840 	.word	0x00040840
 8005324:	00041040 	.word	0x00041040
 8005328:	0004084f 	.word	0x0004084f
 800532c:	00040447 	.word	0x00040447
 8005330:	00840840 	.word	0x00840840
 8005334:	00841040 	.word	0x00841040
 8005338:	0084084f 	.word	0x0084084f
 800533c:	00803fff 	.word	0x00803fff

08005340 <ai_array_get_byte_size>:
 8005340:	b319      	cbz	r1, 800538a <ai_array_get_byte_size+0x4a>
 8005342:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800534e:	3307      	adds	r3, #7
 8005350:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8005354:	f023 0307 	bic.w	r3, r3, #7
 8005358:	2a04      	cmp	r2, #4
 800535a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800535e:	fa23 f101 	lsr.w	r1, r3, r1
 8005362:	d00b      	beq.n	800537c <ai_array_get_byte_size+0x3c>
 8005364:	2a08      	cmp	r2, #8
 8005366:	d002      	beq.n	800536e <ai_array_get_byte_size+0x2e>
 8005368:	3107      	adds	r1, #7
 800536a:	08c8      	lsrs	r0, r1, #3
 800536c:	4770      	bx	lr
 800536e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8005372:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8005376:	3107      	adds	r1, #7
 8005378:	08c8      	lsrs	r0, r1, #3
 800537a:	4770      	bx	lr
 800537c:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8005380:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8005384:	3107      	adds	r1, #7
 8005386:	08c8      	lsrs	r0, r1, #3
 8005388:	4770      	bx	lr
 800538a:	4608      	mov	r0, r1
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop

08005390 <ai_array_get_data_byte_size>:
 8005390:	b169      	cbz	r1, 80053ae <ai_array_get_data_byte_size+0x1e>
 8005392:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005396:	fb03 f101 	mul.w	r1, r3, r1
 800539a:	1dcb      	adds	r3, r1, #7
 800539c:	f023 0307 	bic.w	r3, r3, #7
 80053a0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80053a4:	fa23 f000 	lsr.w	r0, r3, r0
 80053a8:	3007      	adds	r0, #7
 80053aa:	08c0      	lsrs	r0, r0, #3
 80053ac:	4770      	bx	lr
 80053ae:	4608      	mov	r0, r1
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop

080053b4 <ai_version_get>:
 80053b4:	0212      	lsls	r2, r2, #8
 80053b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80053ba:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80053be:	4770      	bx	lr

080053c0 <ai_platform_version_get>:
 80053c0:	0e02      	lsrs	r2, r0, #24
 80053c2:	2300      	movs	r3, #0
 80053c4:	f362 0307 	bfi	r3, r2, #0, #8
 80053c8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80053cc:	f362 230f 	bfi	r3, r2, #8, #8
 80053d0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80053d4:	f360 4317 	bfi	r3, r0, #16, #8
 80053d8:	b082      	sub	sp, #8
 80053da:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 80053de:	b002      	add	sp, #8
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop

080053e4 <get_tensor_byte_size>:
 80053e4:	b410      	push	{r4}
 80053e6:	6983      	ldr	r3, [r0, #24]
 80053e8:	68c4      	ldr	r4, [r0, #12]
 80053ea:	6941      	ldr	r1, [r0, #20]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68e0      	ldr	r0, [r4, #12]
 80053f0:	4a07      	ldr	r2, [pc, #28]	@ (8005410 <get_tensor_byte_size+0x2c>)
 80053f2:	68c9      	ldr	r1, [r1, #12]
 80053f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053f8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 80053fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005400:	fb01 f000 	mul.w	r0, r1, r0
 8005404:	4293      	cmp	r3, r2
 8005406:	bf04      	itt	eq
 8005408:	3007      	addeq	r0, #7
 800540a:	08c0      	lsreq	r0, r0, #3
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	000400c0 	.word	0x000400c0

08005414 <malloc>:
 8005414:	4b02      	ldr	r3, [pc, #8]	@ (8005420 <malloc+0xc>)
 8005416:	4601      	mov	r1, r0
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	f000 b825 	b.w	8005468 <_malloc_r>
 800541e:	bf00      	nop
 8005420:	200006a4 	.word	0x200006a4

08005424 <sbrk_aligned>:
 8005424:	b570      	push	{r4, r5, r6, lr}
 8005426:	4e0f      	ldr	r6, [pc, #60]	@ (8005464 <sbrk_aligned+0x40>)
 8005428:	460c      	mov	r4, r1
 800542a:	6831      	ldr	r1, [r6, #0]
 800542c:	4605      	mov	r5, r0
 800542e:	b911      	cbnz	r1, 8005436 <sbrk_aligned+0x12>
 8005430:	f000 ff96 	bl	8006360 <_sbrk_r>
 8005434:	6030      	str	r0, [r6, #0]
 8005436:	4621      	mov	r1, r4
 8005438:	4628      	mov	r0, r5
 800543a:	f000 ff91 	bl	8006360 <_sbrk_r>
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	d103      	bne.n	800544a <sbrk_aligned+0x26>
 8005442:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005446:	4620      	mov	r0, r4
 8005448:	bd70      	pop	{r4, r5, r6, pc}
 800544a:	1cc4      	adds	r4, r0, #3
 800544c:	f024 0403 	bic.w	r4, r4, #3
 8005450:	42a0      	cmp	r0, r4
 8005452:	d0f8      	beq.n	8005446 <sbrk_aligned+0x22>
 8005454:	1a21      	subs	r1, r4, r0
 8005456:	4628      	mov	r0, r5
 8005458:	f000 ff82 	bl	8006360 <_sbrk_r>
 800545c:	3001      	adds	r0, #1
 800545e:	d1f2      	bne.n	8005446 <sbrk_aligned+0x22>
 8005460:	e7ef      	b.n	8005442 <sbrk_aligned+0x1e>
 8005462:	bf00      	nop
 8005464:	20000a58 	.word	0x20000a58

08005468 <_malloc_r>:
 8005468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800546c:	1ccd      	adds	r5, r1, #3
 800546e:	f025 0503 	bic.w	r5, r5, #3
 8005472:	3508      	adds	r5, #8
 8005474:	2d0c      	cmp	r5, #12
 8005476:	bf38      	it	cc
 8005478:	250c      	movcc	r5, #12
 800547a:	2d00      	cmp	r5, #0
 800547c:	4606      	mov	r6, r0
 800547e:	db01      	blt.n	8005484 <_malloc_r+0x1c>
 8005480:	42a9      	cmp	r1, r5
 8005482:	d904      	bls.n	800548e <_malloc_r+0x26>
 8005484:	230c      	movs	r3, #12
 8005486:	6033      	str	r3, [r6, #0]
 8005488:	2000      	movs	r0, #0
 800548a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800548e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005564 <_malloc_r+0xfc>
 8005492:	f000 f869 	bl	8005568 <__malloc_lock>
 8005496:	f8d8 3000 	ldr.w	r3, [r8]
 800549a:	461c      	mov	r4, r3
 800549c:	bb44      	cbnz	r4, 80054f0 <_malloc_r+0x88>
 800549e:	4629      	mov	r1, r5
 80054a0:	4630      	mov	r0, r6
 80054a2:	f7ff ffbf 	bl	8005424 <sbrk_aligned>
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	4604      	mov	r4, r0
 80054aa:	d158      	bne.n	800555e <_malloc_r+0xf6>
 80054ac:	f8d8 4000 	ldr.w	r4, [r8]
 80054b0:	4627      	mov	r7, r4
 80054b2:	2f00      	cmp	r7, #0
 80054b4:	d143      	bne.n	800553e <_malloc_r+0xd6>
 80054b6:	2c00      	cmp	r4, #0
 80054b8:	d04b      	beq.n	8005552 <_malloc_r+0xea>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	4639      	mov	r1, r7
 80054be:	4630      	mov	r0, r6
 80054c0:	eb04 0903 	add.w	r9, r4, r3
 80054c4:	f000 ff4c 	bl	8006360 <_sbrk_r>
 80054c8:	4581      	cmp	r9, r0
 80054ca:	d142      	bne.n	8005552 <_malloc_r+0xea>
 80054cc:	6821      	ldr	r1, [r4, #0]
 80054ce:	1a6d      	subs	r5, r5, r1
 80054d0:	4629      	mov	r1, r5
 80054d2:	4630      	mov	r0, r6
 80054d4:	f7ff ffa6 	bl	8005424 <sbrk_aligned>
 80054d8:	3001      	adds	r0, #1
 80054da:	d03a      	beq.n	8005552 <_malloc_r+0xea>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	442b      	add	r3, r5
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	f8d8 3000 	ldr.w	r3, [r8]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	bb62      	cbnz	r2, 8005544 <_malloc_r+0xdc>
 80054ea:	f8c8 7000 	str.w	r7, [r8]
 80054ee:	e00f      	b.n	8005510 <_malloc_r+0xa8>
 80054f0:	6822      	ldr	r2, [r4, #0]
 80054f2:	1b52      	subs	r2, r2, r5
 80054f4:	d420      	bmi.n	8005538 <_malloc_r+0xd0>
 80054f6:	2a0b      	cmp	r2, #11
 80054f8:	d917      	bls.n	800552a <_malloc_r+0xc2>
 80054fa:	1961      	adds	r1, r4, r5
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	6025      	str	r5, [r4, #0]
 8005500:	bf18      	it	ne
 8005502:	6059      	strne	r1, [r3, #4]
 8005504:	6863      	ldr	r3, [r4, #4]
 8005506:	bf08      	it	eq
 8005508:	f8c8 1000 	streq.w	r1, [r8]
 800550c:	5162      	str	r2, [r4, r5]
 800550e:	604b      	str	r3, [r1, #4]
 8005510:	4630      	mov	r0, r6
 8005512:	f000 f82f 	bl	8005574 <__malloc_unlock>
 8005516:	f104 000b 	add.w	r0, r4, #11
 800551a:	1d23      	adds	r3, r4, #4
 800551c:	f020 0007 	bic.w	r0, r0, #7
 8005520:	1ac2      	subs	r2, r0, r3
 8005522:	bf1c      	itt	ne
 8005524:	1a1b      	subne	r3, r3, r0
 8005526:	50a3      	strne	r3, [r4, r2]
 8005528:	e7af      	b.n	800548a <_malloc_r+0x22>
 800552a:	6862      	ldr	r2, [r4, #4]
 800552c:	42a3      	cmp	r3, r4
 800552e:	bf0c      	ite	eq
 8005530:	f8c8 2000 	streq.w	r2, [r8]
 8005534:	605a      	strne	r2, [r3, #4]
 8005536:	e7eb      	b.n	8005510 <_malloc_r+0xa8>
 8005538:	4623      	mov	r3, r4
 800553a:	6864      	ldr	r4, [r4, #4]
 800553c:	e7ae      	b.n	800549c <_malloc_r+0x34>
 800553e:	463c      	mov	r4, r7
 8005540:	687f      	ldr	r7, [r7, #4]
 8005542:	e7b6      	b.n	80054b2 <_malloc_r+0x4a>
 8005544:	461a      	mov	r2, r3
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	42a3      	cmp	r3, r4
 800554a:	d1fb      	bne.n	8005544 <_malloc_r+0xdc>
 800554c:	2300      	movs	r3, #0
 800554e:	6053      	str	r3, [r2, #4]
 8005550:	e7de      	b.n	8005510 <_malloc_r+0xa8>
 8005552:	230c      	movs	r3, #12
 8005554:	6033      	str	r3, [r6, #0]
 8005556:	4630      	mov	r0, r6
 8005558:	f000 f80c 	bl	8005574 <__malloc_unlock>
 800555c:	e794      	b.n	8005488 <_malloc_r+0x20>
 800555e:	6005      	str	r5, [r0, #0]
 8005560:	e7d6      	b.n	8005510 <_malloc_r+0xa8>
 8005562:	bf00      	nop
 8005564:	20000a5c 	.word	0x20000a5c

08005568 <__malloc_lock>:
 8005568:	4801      	ldr	r0, [pc, #4]	@ (8005570 <__malloc_lock+0x8>)
 800556a:	f000 bf46 	b.w	80063fa <__retarget_lock_acquire_recursive>
 800556e:	bf00      	nop
 8005570:	20000ba0 	.word	0x20000ba0

08005574 <__malloc_unlock>:
 8005574:	4801      	ldr	r0, [pc, #4]	@ (800557c <__malloc_unlock+0x8>)
 8005576:	f000 bf41 	b.w	80063fc <__retarget_lock_release_recursive>
 800557a:	bf00      	nop
 800557c:	20000ba0 	.word	0x20000ba0

08005580 <_realloc_r>:
 8005580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005584:	4680      	mov	r8, r0
 8005586:	4615      	mov	r5, r2
 8005588:	460c      	mov	r4, r1
 800558a:	b921      	cbnz	r1, 8005596 <_realloc_r+0x16>
 800558c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005590:	4611      	mov	r1, r2
 8005592:	f7ff bf69 	b.w	8005468 <_malloc_r>
 8005596:	b92a      	cbnz	r2, 80055a4 <_realloc_r+0x24>
 8005598:	f001 fd8e 	bl	80070b8 <_free_r>
 800559c:	2400      	movs	r4, #0
 800559e:	4620      	mov	r0, r4
 80055a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a4:	f002 f954 	bl	8007850 <_malloc_usable_size_r>
 80055a8:	4285      	cmp	r5, r0
 80055aa:	4606      	mov	r6, r0
 80055ac:	d802      	bhi.n	80055b4 <_realloc_r+0x34>
 80055ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80055b2:	d8f4      	bhi.n	800559e <_realloc_r+0x1e>
 80055b4:	4629      	mov	r1, r5
 80055b6:	4640      	mov	r0, r8
 80055b8:	f7ff ff56 	bl	8005468 <_malloc_r>
 80055bc:	4607      	mov	r7, r0
 80055be:	2800      	cmp	r0, #0
 80055c0:	d0ec      	beq.n	800559c <_realloc_r+0x1c>
 80055c2:	42b5      	cmp	r5, r6
 80055c4:	462a      	mov	r2, r5
 80055c6:	4621      	mov	r1, r4
 80055c8:	bf28      	it	cs
 80055ca:	4632      	movcs	r2, r6
 80055cc:	f000 ff17 	bl	80063fe <memcpy>
 80055d0:	4621      	mov	r1, r4
 80055d2:	4640      	mov	r0, r8
 80055d4:	f001 fd70 	bl	80070b8 <_free_r>
 80055d8:	463c      	mov	r4, r7
 80055da:	e7e0      	b.n	800559e <_realloc_r+0x1e>

080055dc <__cvt>:
 80055dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	ec57 6b10 	vmov	r6, r7, d0
 80055e4:	2f00      	cmp	r7, #0
 80055e6:	460c      	mov	r4, r1
 80055e8:	4619      	mov	r1, r3
 80055ea:	463b      	mov	r3, r7
 80055ec:	bfbb      	ittet	lt
 80055ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80055f2:	461f      	movlt	r7, r3
 80055f4:	2300      	movge	r3, #0
 80055f6:	232d      	movlt	r3, #45	@ 0x2d
 80055f8:	700b      	strb	r3, [r1, #0]
 80055fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005600:	4691      	mov	r9, r2
 8005602:	f023 0820 	bic.w	r8, r3, #32
 8005606:	bfbc      	itt	lt
 8005608:	4632      	movlt	r2, r6
 800560a:	4616      	movlt	r6, r2
 800560c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005610:	d005      	beq.n	800561e <__cvt+0x42>
 8005612:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005616:	d100      	bne.n	800561a <__cvt+0x3e>
 8005618:	3401      	adds	r4, #1
 800561a:	2102      	movs	r1, #2
 800561c:	e000      	b.n	8005620 <__cvt+0x44>
 800561e:	2103      	movs	r1, #3
 8005620:	ab03      	add	r3, sp, #12
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	ab02      	add	r3, sp, #8
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	ec47 6b10 	vmov	d0, r6, r7
 800562c:	4653      	mov	r3, sl
 800562e:	4622      	mov	r2, r4
 8005630:	f000 ff7e 	bl	8006530 <_dtoa_r>
 8005634:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005638:	4605      	mov	r5, r0
 800563a:	d119      	bne.n	8005670 <__cvt+0x94>
 800563c:	f019 0f01 	tst.w	r9, #1
 8005640:	d00e      	beq.n	8005660 <__cvt+0x84>
 8005642:	eb00 0904 	add.w	r9, r0, r4
 8005646:	2200      	movs	r2, #0
 8005648:	2300      	movs	r3, #0
 800564a:	4630      	mov	r0, r6
 800564c:	4639      	mov	r1, r7
 800564e:	f7fb fa5b 	bl	8000b08 <__aeabi_dcmpeq>
 8005652:	b108      	cbz	r0, 8005658 <__cvt+0x7c>
 8005654:	f8cd 900c 	str.w	r9, [sp, #12]
 8005658:	2230      	movs	r2, #48	@ 0x30
 800565a:	9b03      	ldr	r3, [sp, #12]
 800565c:	454b      	cmp	r3, r9
 800565e:	d31e      	bcc.n	800569e <__cvt+0xc2>
 8005660:	9b03      	ldr	r3, [sp, #12]
 8005662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005664:	1b5b      	subs	r3, r3, r5
 8005666:	4628      	mov	r0, r5
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	b004      	add	sp, #16
 800566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005670:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005674:	eb00 0904 	add.w	r9, r0, r4
 8005678:	d1e5      	bne.n	8005646 <__cvt+0x6a>
 800567a:	7803      	ldrb	r3, [r0, #0]
 800567c:	2b30      	cmp	r3, #48	@ 0x30
 800567e:	d10a      	bne.n	8005696 <__cvt+0xba>
 8005680:	2200      	movs	r2, #0
 8005682:	2300      	movs	r3, #0
 8005684:	4630      	mov	r0, r6
 8005686:	4639      	mov	r1, r7
 8005688:	f7fb fa3e 	bl	8000b08 <__aeabi_dcmpeq>
 800568c:	b918      	cbnz	r0, 8005696 <__cvt+0xba>
 800568e:	f1c4 0401 	rsb	r4, r4, #1
 8005692:	f8ca 4000 	str.w	r4, [sl]
 8005696:	f8da 3000 	ldr.w	r3, [sl]
 800569a:	4499      	add	r9, r3
 800569c:	e7d3      	b.n	8005646 <__cvt+0x6a>
 800569e:	1c59      	adds	r1, r3, #1
 80056a0:	9103      	str	r1, [sp, #12]
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	e7d9      	b.n	800565a <__cvt+0x7e>

080056a6 <__exponent>:
 80056a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056a8:	2900      	cmp	r1, #0
 80056aa:	bfba      	itte	lt
 80056ac:	4249      	neglt	r1, r1
 80056ae:	232d      	movlt	r3, #45	@ 0x2d
 80056b0:	232b      	movge	r3, #43	@ 0x2b
 80056b2:	2909      	cmp	r1, #9
 80056b4:	7002      	strb	r2, [r0, #0]
 80056b6:	7043      	strb	r3, [r0, #1]
 80056b8:	dd29      	ble.n	800570e <__exponent+0x68>
 80056ba:	f10d 0307 	add.w	r3, sp, #7
 80056be:	461d      	mov	r5, r3
 80056c0:	270a      	movs	r7, #10
 80056c2:	461a      	mov	r2, r3
 80056c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80056c8:	fb07 1416 	mls	r4, r7, r6, r1
 80056cc:	3430      	adds	r4, #48	@ 0x30
 80056ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80056d2:	460c      	mov	r4, r1
 80056d4:	2c63      	cmp	r4, #99	@ 0x63
 80056d6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80056da:	4631      	mov	r1, r6
 80056dc:	dcf1      	bgt.n	80056c2 <__exponent+0x1c>
 80056de:	3130      	adds	r1, #48	@ 0x30
 80056e0:	1e94      	subs	r4, r2, #2
 80056e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80056e6:	1c41      	adds	r1, r0, #1
 80056e8:	4623      	mov	r3, r4
 80056ea:	42ab      	cmp	r3, r5
 80056ec:	d30a      	bcc.n	8005704 <__exponent+0x5e>
 80056ee:	f10d 0309 	add.w	r3, sp, #9
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	42ac      	cmp	r4, r5
 80056f6:	bf88      	it	hi
 80056f8:	2300      	movhi	r3, #0
 80056fa:	3302      	adds	r3, #2
 80056fc:	4403      	add	r3, r0
 80056fe:	1a18      	subs	r0, r3, r0
 8005700:	b003      	add	sp, #12
 8005702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005704:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005708:	f801 6f01 	strb.w	r6, [r1, #1]!
 800570c:	e7ed      	b.n	80056ea <__exponent+0x44>
 800570e:	2330      	movs	r3, #48	@ 0x30
 8005710:	3130      	adds	r1, #48	@ 0x30
 8005712:	7083      	strb	r3, [r0, #2]
 8005714:	70c1      	strb	r1, [r0, #3]
 8005716:	1d03      	adds	r3, r0, #4
 8005718:	e7f1      	b.n	80056fe <__exponent+0x58>
	...

0800571c <_printf_float>:
 800571c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005720:	b08d      	sub	sp, #52	@ 0x34
 8005722:	460c      	mov	r4, r1
 8005724:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005728:	4616      	mov	r6, r2
 800572a:	461f      	mov	r7, r3
 800572c:	4605      	mov	r5, r0
 800572e:	f000 fddf 	bl	80062f0 <_localeconv_r>
 8005732:	6803      	ldr	r3, [r0, #0]
 8005734:	9304      	str	r3, [sp, #16]
 8005736:	4618      	mov	r0, r3
 8005738:	f7fa fdba 	bl	80002b0 <strlen>
 800573c:	2300      	movs	r3, #0
 800573e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005740:	f8d8 3000 	ldr.w	r3, [r8]
 8005744:	9005      	str	r0, [sp, #20]
 8005746:	3307      	adds	r3, #7
 8005748:	f023 0307 	bic.w	r3, r3, #7
 800574c:	f103 0208 	add.w	r2, r3, #8
 8005750:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005754:	f8d4 b000 	ldr.w	fp, [r4]
 8005758:	f8c8 2000 	str.w	r2, [r8]
 800575c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005760:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005764:	9307      	str	r3, [sp, #28]
 8005766:	f8cd 8018 	str.w	r8, [sp, #24]
 800576a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800576e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005772:	4b9c      	ldr	r3, [pc, #624]	@ (80059e4 <_printf_float+0x2c8>)
 8005774:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005778:	f7fb f9f8 	bl	8000b6c <__aeabi_dcmpun>
 800577c:	bb70      	cbnz	r0, 80057dc <_printf_float+0xc0>
 800577e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005782:	4b98      	ldr	r3, [pc, #608]	@ (80059e4 <_printf_float+0x2c8>)
 8005784:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005788:	f7fb f9d2 	bl	8000b30 <__aeabi_dcmple>
 800578c:	bb30      	cbnz	r0, 80057dc <_printf_float+0xc0>
 800578e:	2200      	movs	r2, #0
 8005790:	2300      	movs	r3, #0
 8005792:	4640      	mov	r0, r8
 8005794:	4649      	mov	r1, r9
 8005796:	f7fb f9c1 	bl	8000b1c <__aeabi_dcmplt>
 800579a:	b110      	cbz	r0, 80057a2 <_printf_float+0x86>
 800579c:	232d      	movs	r3, #45	@ 0x2d
 800579e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057a2:	4a91      	ldr	r2, [pc, #580]	@ (80059e8 <_printf_float+0x2cc>)
 80057a4:	4b91      	ldr	r3, [pc, #580]	@ (80059ec <_printf_float+0x2d0>)
 80057a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80057aa:	bf94      	ite	ls
 80057ac:	4690      	movls	r8, r2
 80057ae:	4698      	movhi	r8, r3
 80057b0:	2303      	movs	r3, #3
 80057b2:	6123      	str	r3, [r4, #16]
 80057b4:	f02b 0304 	bic.w	r3, fp, #4
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	f04f 0900 	mov.w	r9, #0
 80057be:	9700      	str	r7, [sp, #0]
 80057c0:	4633      	mov	r3, r6
 80057c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80057c4:	4621      	mov	r1, r4
 80057c6:	4628      	mov	r0, r5
 80057c8:	f000 f9d2 	bl	8005b70 <_printf_common>
 80057cc:	3001      	adds	r0, #1
 80057ce:	f040 808d 	bne.w	80058ec <_printf_float+0x1d0>
 80057d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057d6:	b00d      	add	sp, #52	@ 0x34
 80057d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057dc:	4642      	mov	r2, r8
 80057de:	464b      	mov	r3, r9
 80057e0:	4640      	mov	r0, r8
 80057e2:	4649      	mov	r1, r9
 80057e4:	f7fb f9c2 	bl	8000b6c <__aeabi_dcmpun>
 80057e8:	b140      	cbz	r0, 80057fc <_printf_float+0xe0>
 80057ea:	464b      	mov	r3, r9
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bfbc      	itt	lt
 80057f0:	232d      	movlt	r3, #45	@ 0x2d
 80057f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80057f6:	4a7e      	ldr	r2, [pc, #504]	@ (80059f0 <_printf_float+0x2d4>)
 80057f8:	4b7e      	ldr	r3, [pc, #504]	@ (80059f4 <_printf_float+0x2d8>)
 80057fa:	e7d4      	b.n	80057a6 <_printf_float+0x8a>
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005802:	9206      	str	r2, [sp, #24]
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	d13b      	bne.n	8005880 <_printf_float+0x164>
 8005808:	2306      	movs	r3, #6
 800580a:	6063      	str	r3, [r4, #4]
 800580c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005810:	2300      	movs	r3, #0
 8005812:	6022      	str	r2, [r4, #0]
 8005814:	9303      	str	r3, [sp, #12]
 8005816:	ab0a      	add	r3, sp, #40	@ 0x28
 8005818:	e9cd a301 	strd	sl, r3, [sp, #4]
 800581c:	ab09      	add	r3, sp, #36	@ 0x24
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	6861      	ldr	r1, [r4, #4]
 8005822:	ec49 8b10 	vmov	d0, r8, r9
 8005826:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800582a:	4628      	mov	r0, r5
 800582c:	f7ff fed6 	bl	80055dc <__cvt>
 8005830:	9b06      	ldr	r3, [sp, #24]
 8005832:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005834:	2b47      	cmp	r3, #71	@ 0x47
 8005836:	4680      	mov	r8, r0
 8005838:	d129      	bne.n	800588e <_printf_float+0x172>
 800583a:	1cc8      	adds	r0, r1, #3
 800583c:	db02      	blt.n	8005844 <_printf_float+0x128>
 800583e:	6863      	ldr	r3, [r4, #4]
 8005840:	4299      	cmp	r1, r3
 8005842:	dd41      	ble.n	80058c8 <_printf_float+0x1ac>
 8005844:	f1aa 0a02 	sub.w	sl, sl, #2
 8005848:	fa5f fa8a 	uxtb.w	sl, sl
 800584c:	3901      	subs	r1, #1
 800584e:	4652      	mov	r2, sl
 8005850:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005854:	9109      	str	r1, [sp, #36]	@ 0x24
 8005856:	f7ff ff26 	bl	80056a6 <__exponent>
 800585a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800585c:	1813      	adds	r3, r2, r0
 800585e:	2a01      	cmp	r2, #1
 8005860:	4681      	mov	r9, r0
 8005862:	6123      	str	r3, [r4, #16]
 8005864:	dc02      	bgt.n	800586c <_printf_float+0x150>
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	07d2      	lsls	r2, r2, #31
 800586a:	d501      	bpl.n	8005870 <_printf_float+0x154>
 800586c:	3301      	adds	r3, #1
 800586e:	6123      	str	r3, [r4, #16]
 8005870:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0a2      	beq.n	80057be <_printf_float+0xa2>
 8005878:	232d      	movs	r3, #45	@ 0x2d
 800587a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800587e:	e79e      	b.n	80057be <_printf_float+0xa2>
 8005880:	9a06      	ldr	r2, [sp, #24]
 8005882:	2a47      	cmp	r2, #71	@ 0x47
 8005884:	d1c2      	bne.n	800580c <_printf_float+0xf0>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1c0      	bne.n	800580c <_printf_float+0xf0>
 800588a:	2301      	movs	r3, #1
 800588c:	e7bd      	b.n	800580a <_printf_float+0xee>
 800588e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005892:	d9db      	bls.n	800584c <_printf_float+0x130>
 8005894:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005898:	d118      	bne.n	80058cc <_printf_float+0x1b0>
 800589a:	2900      	cmp	r1, #0
 800589c:	6863      	ldr	r3, [r4, #4]
 800589e:	dd0b      	ble.n	80058b8 <_printf_float+0x19c>
 80058a0:	6121      	str	r1, [r4, #16]
 80058a2:	b913      	cbnz	r3, 80058aa <_printf_float+0x18e>
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	07d0      	lsls	r0, r2, #31
 80058a8:	d502      	bpl.n	80058b0 <_printf_float+0x194>
 80058aa:	3301      	adds	r3, #1
 80058ac:	440b      	add	r3, r1
 80058ae:	6123      	str	r3, [r4, #16]
 80058b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80058b2:	f04f 0900 	mov.w	r9, #0
 80058b6:	e7db      	b.n	8005870 <_printf_float+0x154>
 80058b8:	b913      	cbnz	r3, 80058c0 <_printf_float+0x1a4>
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	07d2      	lsls	r2, r2, #31
 80058be:	d501      	bpl.n	80058c4 <_printf_float+0x1a8>
 80058c0:	3302      	adds	r3, #2
 80058c2:	e7f4      	b.n	80058ae <_printf_float+0x192>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e7f2      	b.n	80058ae <_printf_float+0x192>
 80058c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80058cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058ce:	4299      	cmp	r1, r3
 80058d0:	db05      	blt.n	80058de <_printf_float+0x1c2>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	6121      	str	r1, [r4, #16]
 80058d6:	07d8      	lsls	r0, r3, #31
 80058d8:	d5ea      	bpl.n	80058b0 <_printf_float+0x194>
 80058da:	1c4b      	adds	r3, r1, #1
 80058dc:	e7e7      	b.n	80058ae <_printf_float+0x192>
 80058de:	2900      	cmp	r1, #0
 80058e0:	bfd4      	ite	le
 80058e2:	f1c1 0202 	rsble	r2, r1, #2
 80058e6:	2201      	movgt	r2, #1
 80058e8:	4413      	add	r3, r2
 80058ea:	e7e0      	b.n	80058ae <_printf_float+0x192>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	055a      	lsls	r2, r3, #21
 80058f0:	d407      	bmi.n	8005902 <_printf_float+0x1e6>
 80058f2:	6923      	ldr	r3, [r4, #16]
 80058f4:	4642      	mov	r2, r8
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b8      	blx	r7
 80058fc:	3001      	adds	r0, #1
 80058fe:	d12b      	bne.n	8005958 <_printf_float+0x23c>
 8005900:	e767      	b.n	80057d2 <_printf_float+0xb6>
 8005902:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005906:	f240 80dd 	bls.w	8005ac4 <_printf_float+0x3a8>
 800590a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800590e:	2200      	movs	r2, #0
 8005910:	2300      	movs	r3, #0
 8005912:	f7fb f8f9 	bl	8000b08 <__aeabi_dcmpeq>
 8005916:	2800      	cmp	r0, #0
 8005918:	d033      	beq.n	8005982 <_printf_float+0x266>
 800591a:	4a37      	ldr	r2, [pc, #220]	@ (80059f8 <_printf_float+0x2dc>)
 800591c:	2301      	movs	r3, #1
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	47b8      	blx	r7
 8005924:	3001      	adds	r0, #1
 8005926:	f43f af54 	beq.w	80057d2 <_printf_float+0xb6>
 800592a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800592e:	4543      	cmp	r3, r8
 8005930:	db02      	blt.n	8005938 <_printf_float+0x21c>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	07d8      	lsls	r0, r3, #31
 8005936:	d50f      	bpl.n	8005958 <_printf_float+0x23c>
 8005938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800593c:	4631      	mov	r1, r6
 800593e:	4628      	mov	r0, r5
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f af45 	beq.w	80057d2 <_printf_float+0xb6>
 8005948:	f04f 0900 	mov.w	r9, #0
 800594c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005950:	f104 0a1a 	add.w	sl, r4, #26
 8005954:	45c8      	cmp	r8, r9
 8005956:	dc09      	bgt.n	800596c <_printf_float+0x250>
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	079b      	lsls	r3, r3, #30
 800595c:	f100 8103 	bmi.w	8005b66 <_printf_float+0x44a>
 8005960:	68e0      	ldr	r0, [r4, #12]
 8005962:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005964:	4298      	cmp	r0, r3
 8005966:	bfb8      	it	lt
 8005968:	4618      	movlt	r0, r3
 800596a:	e734      	b.n	80057d6 <_printf_float+0xba>
 800596c:	2301      	movs	r3, #1
 800596e:	4652      	mov	r2, sl
 8005970:	4631      	mov	r1, r6
 8005972:	4628      	mov	r0, r5
 8005974:	47b8      	blx	r7
 8005976:	3001      	adds	r0, #1
 8005978:	f43f af2b 	beq.w	80057d2 <_printf_float+0xb6>
 800597c:	f109 0901 	add.w	r9, r9, #1
 8005980:	e7e8      	b.n	8005954 <_printf_float+0x238>
 8005982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005984:	2b00      	cmp	r3, #0
 8005986:	dc39      	bgt.n	80059fc <_printf_float+0x2e0>
 8005988:	4a1b      	ldr	r2, [pc, #108]	@ (80059f8 <_printf_float+0x2dc>)
 800598a:	2301      	movs	r3, #1
 800598c:	4631      	mov	r1, r6
 800598e:	4628      	mov	r0, r5
 8005990:	47b8      	blx	r7
 8005992:	3001      	adds	r0, #1
 8005994:	f43f af1d 	beq.w	80057d2 <_printf_float+0xb6>
 8005998:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800599c:	ea59 0303 	orrs.w	r3, r9, r3
 80059a0:	d102      	bne.n	80059a8 <_printf_float+0x28c>
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	07d9      	lsls	r1, r3, #31
 80059a6:	d5d7      	bpl.n	8005958 <_printf_float+0x23c>
 80059a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	47b8      	blx	r7
 80059b2:	3001      	adds	r0, #1
 80059b4:	f43f af0d 	beq.w	80057d2 <_printf_float+0xb6>
 80059b8:	f04f 0a00 	mov.w	sl, #0
 80059bc:	f104 0b1a 	add.w	fp, r4, #26
 80059c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c2:	425b      	negs	r3, r3
 80059c4:	4553      	cmp	r3, sl
 80059c6:	dc01      	bgt.n	80059cc <_printf_float+0x2b0>
 80059c8:	464b      	mov	r3, r9
 80059ca:	e793      	b.n	80058f4 <_printf_float+0x1d8>
 80059cc:	2301      	movs	r3, #1
 80059ce:	465a      	mov	r2, fp
 80059d0:	4631      	mov	r1, r6
 80059d2:	4628      	mov	r0, r5
 80059d4:	47b8      	blx	r7
 80059d6:	3001      	adds	r0, #1
 80059d8:	f43f aefb 	beq.w	80057d2 <_printf_float+0xb6>
 80059dc:	f10a 0a01 	add.w	sl, sl, #1
 80059e0:	e7ee      	b.n	80059c0 <_printf_float+0x2a4>
 80059e2:	bf00      	nop
 80059e4:	7fefffff 	.word	0x7fefffff
 80059e8:	080089d4 	.word	0x080089d4
 80059ec:	080089d8 	.word	0x080089d8
 80059f0:	080089dc 	.word	0x080089dc
 80059f4:	080089e0 	.word	0x080089e0
 80059f8:	080089e4 	.word	0x080089e4
 80059fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a02:	4553      	cmp	r3, sl
 8005a04:	bfa8      	it	ge
 8005a06:	4653      	movge	r3, sl
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	4699      	mov	r9, r3
 8005a0c:	dc36      	bgt.n	8005a7c <_printf_float+0x360>
 8005a0e:	f04f 0b00 	mov.w	fp, #0
 8005a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a16:	f104 021a 	add.w	r2, r4, #26
 8005a1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a1c:	9306      	str	r3, [sp, #24]
 8005a1e:	eba3 0309 	sub.w	r3, r3, r9
 8005a22:	455b      	cmp	r3, fp
 8005a24:	dc31      	bgt.n	8005a8a <_printf_float+0x36e>
 8005a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a28:	459a      	cmp	sl, r3
 8005a2a:	dc3a      	bgt.n	8005aa2 <_printf_float+0x386>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	07da      	lsls	r2, r3, #31
 8005a30:	d437      	bmi.n	8005aa2 <_printf_float+0x386>
 8005a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a34:	ebaa 0903 	sub.w	r9, sl, r3
 8005a38:	9b06      	ldr	r3, [sp, #24]
 8005a3a:	ebaa 0303 	sub.w	r3, sl, r3
 8005a3e:	4599      	cmp	r9, r3
 8005a40:	bfa8      	it	ge
 8005a42:	4699      	movge	r9, r3
 8005a44:	f1b9 0f00 	cmp.w	r9, #0
 8005a48:	dc33      	bgt.n	8005ab2 <_printf_float+0x396>
 8005a4a:	f04f 0800 	mov.w	r8, #0
 8005a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a52:	f104 0b1a 	add.w	fp, r4, #26
 8005a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a58:	ebaa 0303 	sub.w	r3, sl, r3
 8005a5c:	eba3 0309 	sub.w	r3, r3, r9
 8005a60:	4543      	cmp	r3, r8
 8005a62:	f77f af79 	ble.w	8005958 <_printf_float+0x23c>
 8005a66:	2301      	movs	r3, #1
 8005a68:	465a      	mov	r2, fp
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	47b8      	blx	r7
 8005a70:	3001      	adds	r0, #1
 8005a72:	f43f aeae 	beq.w	80057d2 <_printf_float+0xb6>
 8005a76:	f108 0801 	add.w	r8, r8, #1
 8005a7a:	e7ec      	b.n	8005a56 <_printf_float+0x33a>
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b8      	blx	r7
 8005a84:	3001      	adds	r0, #1
 8005a86:	d1c2      	bne.n	8005a0e <_printf_float+0x2f2>
 8005a88:	e6a3      	b.n	80057d2 <_printf_float+0xb6>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4628      	mov	r0, r5
 8005a90:	9206      	str	r2, [sp, #24]
 8005a92:	47b8      	blx	r7
 8005a94:	3001      	adds	r0, #1
 8005a96:	f43f ae9c 	beq.w	80057d2 <_printf_float+0xb6>
 8005a9a:	9a06      	ldr	r2, [sp, #24]
 8005a9c:	f10b 0b01 	add.w	fp, fp, #1
 8005aa0:	e7bb      	b.n	8005a1a <_printf_float+0x2fe>
 8005aa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	47b8      	blx	r7
 8005aac:	3001      	adds	r0, #1
 8005aae:	d1c0      	bne.n	8005a32 <_printf_float+0x316>
 8005ab0:	e68f      	b.n	80057d2 <_printf_float+0xb6>
 8005ab2:	9a06      	ldr	r2, [sp, #24]
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	4442      	add	r2, r8
 8005ab8:	4631      	mov	r1, r6
 8005aba:	4628      	mov	r0, r5
 8005abc:	47b8      	blx	r7
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d1c3      	bne.n	8005a4a <_printf_float+0x32e>
 8005ac2:	e686      	b.n	80057d2 <_printf_float+0xb6>
 8005ac4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ac8:	f1ba 0f01 	cmp.w	sl, #1
 8005acc:	dc01      	bgt.n	8005ad2 <_printf_float+0x3b6>
 8005ace:	07db      	lsls	r3, r3, #31
 8005ad0:	d536      	bpl.n	8005b40 <_printf_float+0x424>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b8      	blx	r7
 8005adc:	3001      	adds	r0, #1
 8005ade:	f43f ae78 	beq.w	80057d2 <_printf_float+0xb6>
 8005ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4628      	mov	r0, r5
 8005aea:	47b8      	blx	r7
 8005aec:	3001      	adds	r0, #1
 8005aee:	f43f ae70 	beq.w	80057d2 <_printf_float+0xb6>
 8005af2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005af6:	2200      	movs	r2, #0
 8005af8:	2300      	movs	r3, #0
 8005afa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005afe:	f7fb f803 	bl	8000b08 <__aeabi_dcmpeq>
 8005b02:	b9c0      	cbnz	r0, 8005b36 <_printf_float+0x41a>
 8005b04:	4653      	mov	r3, sl
 8005b06:	f108 0201 	add.w	r2, r8, #1
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b8      	blx	r7
 8005b10:	3001      	adds	r0, #1
 8005b12:	d10c      	bne.n	8005b2e <_printf_float+0x412>
 8005b14:	e65d      	b.n	80057d2 <_printf_float+0xb6>
 8005b16:	2301      	movs	r3, #1
 8005b18:	465a      	mov	r2, fp
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	47b8      	blx	r7
 8005b20:	3001      	adds	r0, #1
 8005b22:	f43f ae56 	beq.w	80057d2 <_printf_float+0xb6>
 8005b26:	f108 0801 	add.w	r8, r8, #1
 8005b2a:	45d0      	cmp	r8, sl
 8005b2c:	dbf3      	blt.n	8005b16 <_printf_float+0x3fa>
 8005b2e:	464b      	mov	r3, r9
 8005b30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005b34:	e6df      	b.n	80058f6 <_printf_float+0x1da>
 8005b36:	f04f 0800 	mov.w	r8, #0
 8005b3a:	f104 0b1a 	add.w	fp, r4, #26
 8005b3e:	e7f4      	b.n	8005b2a <_printf_float+0x40e>
 8005b40:	2301      	movs	r3, #1
 8005b42:	4642      	mov	r2, r8
 8005b44:	e7e1      	b.n	8005b0a <_printf_float+0x3ee>
 8005b46:	2301      	movs	r3, #1
 8005b48:	464a      	mov	r2, r9
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	47b8      	blx	r7
 8005b50:	3001      	adds	r0, #1
 8005b52:	f43f ae3e 	beq.w	80057d2 <_printf_float+0xb6>
 8005b56:	f108 0801 	add.w	r8, r8, #1
 8005b5a:	68e3      	ldr	r3, [r4, #12]
 8005b5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b5e:	1a5b      	subs	r3, r3, r1
 8005b60:	4543      	cmp	r3, r8
 8005b62:	dcf0      	bgt.n	8005b46 <_printf_float+0x42a>
 8005b64:	e6fc      	b.n	8005960 <_printf_float+0x244>
 8005b66:	f04f 0800 	mov.w	r8, #0
 8005b6a:	f104 0919 	add.w	r9, r4, #25
 8005b6e:	e7f4      	b.n	8005b5a <_printf_float+0x43e>

08005b70 <_printf_common>:
 8005b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	4616      	mov	r6, r2
 8005b76:	4698      	mov	r8, r3
 8005b78:	688a      	ldr	r2, [r1, #8]
 8005b7a:	690b      	ldr	r3, [r1, #16]
 8005b7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b80:	4293      	cmp	r3, r2
 8005b82:	bfb8      	it	lt
 8005b84:	4613      	movlt	r3, r2
 8005b86:	6033      	str	r3, [r6, #0]
 8005b88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	b10a      	cbz	r2, 8005b96 <_printf_common+0x26>
 8005b92:	3301      	adds	r3, #1
 8005b94:	6033      	str	r3, [r6, #0]
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	0699      	lsls	r1, r3, #26
 8005b9a:	bf42      	ittt	mi
 8005b9c:	6833      	ldrmi	r3, [r6, #0]
 8005b9e:	3302      	addmi	r3, #2
 8005ba0:	6033      	strmi	r3, [r6, #0]
 8005ba2:	6825      	ldr	r5, [r4, #0]
 8005ba4:	f015 0506 	ands.w	r5, r5, #6
 8005ba8:	d106      	bne.n	8005bb8 <_printf_common+0x48>
 8005baa:	f104 0a19 	add.w	sl, r4, #25
 8005bae:	68e3      	ldr	r3, [r4, #12]
 8005bb0:	6832      	ldr	r2, [r6, #0]
 8005bb2:	1a9b      	subs	r3, r3, r2
 8005bb4:	42ab      	cmp	r3, r5
 8005bb6:	dc26      	bgt.n	8005c06 <_printf_common+0x96>
 8005bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bbc:	6822      	ldr	r2, [r4, #0]
 8005bbe:	3b00      	subs	r3, #0
 8005bc0:	bf18      	it	ne
 8005bc2:	2301      	movne	r3, #1
 8005bc4:	0692      	lsls	r2, r2, #26
 8005bc6:	d42b      	bmi.n	8005c20 <_printf_common+0xb0>
 8005bc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005bcc:	4641      	mov	r1, r8
 8005bce:	4638      	mov	r0, r7
 8005bd0:	47c8      	blx	r9
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d01e      	beq.n	8005c14 <_printf_common+0xa4>
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	6922      	ldr	r2, [r4, #16]
 8005bda:	f003 0306 	and.w	r3, r3, #6
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	bf02      	ittt	eq
 8005be2:	68e5      	ldreq	r5, [r4, #12]
 8005be4:	6833      	ldreq	r3, [r6, #0]
 8005be6:	1aed      	subeq	r5, r5, r3
 8005be8:	68a3      	ldr	r3, [r4, #8]
 8005bea:	bf0c      	ite	eq
 8005bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bf0:	2500      	movne	r5, #0
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	bfc4      	itt	gt
 8005bf6:	1a9b      	subgt	r3, r3, r2
 8005bf8:	18ed      	addgt	r5, r5, r3
 8005bfa:	2600      	movs	r6, #0
 8005bfc:	341a      	adds	r4, #26
 8005bfe:	42b5      	cmp	r5, r6
 8005c00:	d11a      	bne.n	8005c38 <_printf_common+0xc8>
 8005c02:	2000      	movs	r0, #0
 8005c04:	e008      	b.n	8005c18 <_printf_common+0xa8>
 8005c06:	2301      	movs	r3, #1
 8005c08:	4652      	mov	r2, sl
 8005c0a:	4641      	mov	r1, r8
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	47c8      	blx	r9
 8005c10:	3001      	adds	r0, #1
 8005c12:	d103      	bne.n	8005c1c <_printf_common+0xac>
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	e7c6      	b.n	8005bae <_printf_common+0x3e>
 8005c20:	18e1      	adds	r1, r4, r3
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	2030      	movs	r0, #48	@ 0x30
 8005c26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c2a:	4422      	add	r2, r4
 8005c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c34:	3302      	adds	r3, #2
 8005c36:	e7c7      	b.n	8005bc8 <_printf_common+0x58>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	4622      	mov	r2, r4
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	4638      	mov	r0, r7
 8005c40:	47c8      	blx	r9
 8005c42:	3001      	adds	r0, #1
 8005c44:	d0e6      	beq.n	8005c14 <_printf_common+0xa4>
 8005c46:	3601      	adds	r6, #1
 8005c48:	e7d9      	b.n	8005bfe <_printf_common+0x8e>
	...

08005c4c <_printf_i>:
 8005c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c50:	7e0f      	ldrb	r7, [r1, #24]
 8005c52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c54:	2f78      	cmp	r7, #120	@ 0x78
 8005c56:	4691      	mov	r9, r2
 8005c58:	4680      	mov	r8, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	469a      	mov	sl, r3
 8005c5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c62:	d807      	bhi.n	8005c74 <_printf_i+0x28>
 8005c64:	2f62      	cmp	r7, #98	@ 0x62
 8005c66:	d80a      	bhi.n	8005c7e <_printf_i+0x32>
 8005c68:	2f00      	cmp	r7, #0
 8005c6a:	f000 80d2 	beq.w	8005e12 <_printf_i+0x1c6>
 8005c6e:	2f58      	cmp	r7, #88	@ 0x58
 8005c70:	f000 80b9 	beq.w	8005de6 <_printf_i+0x19a>
 8005c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c7c:	e03a      	b.n	8005cf4 <_printf_i+0xa8>
 8005c7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c82:	2b15      	cmp	r3, #21
 8005c84:	d8f6      	bhi.n	8005c74 <_printf_i+0x28>
 8005c86:	a101      	add	r1, pc, #4	@ (adr r1, 8005c8c <_printf_i+0x40>)
 8005c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c8c:	08005ce5 	.word	0x08005ce5
 8005c90:	08005cf9 	.word	0x08005cf9
 8005c94:	08005c75 	.word	0x08005c75
 8005c98:	08005c75 	.word	0x08005c75
 8005c9c:	08005c75 	.word	0x08005c75
 8005ca0:	08005c75 	.word	0x08005c75
 8005ca4:	08005cf9 	.word	0x08005cf9
 8005ca8:	08005c75 	.word	0x08005c75
 8005cac:	08005c75 	.word	0x08005c75
 8005cb0:	08005c75 	.word	0x08005c75
 8005cb4:	08005c75 	.word	0x08005c75
 8005cb8:	08005df9 	.word	0x08005df9
 8005cbc:	08005d23 	.word	0x08005d23
 8005cc0:	08005db3 	.word	0x08005db3
 8005cc4:	08005c75 	.word	0x08005c75
 8005cc8:	08005c75 	.word	0x08005c75
 8005ccc:	08005e1b 	.word	0x08005e1b
 8005cd0:	08005c75 	.word	0x08005c75
 8005cd4:	08005d23 	.word	0x08005d23
 8005cd8:	08005c75 	.word	0x08005c75
 8005cdc:	08005c75 	.word	0x08005c75
 8005ce0:	08005dbb 	.word	0x08005dbb
 8005ce4:	6833      	ldr	r3, [r6, #0]
 8005ce6:	1d1a      	adds	r2, r3, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6032      	str	r2, [r6, #0]
 8005cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e09d      	b.n	8005e34 <_printf_i+0x1e8>
 8005cf8:	6833      	ldr	r3, [r6, #0]
 8005cfa:	6820      	ldr	r0, [r4, #0]
 8005cfc:	1d19      	adds	r1, r3, #4
 8005cfe:	6031      	str	r1, [r6, #0]
 8005d00:	0606      	lsls	r6, r0, #24
 8005d02:	d501      	bpl.n	8005d08 <_printf_i+0xbc>
 8005d04:	681d      	ldr	r5, [r3, #0]
 8005d06:	e003      	b.n	8005d10 <_printf_i+0xc4>
 8005d08:	0645      	lsls	r5, r0, #25
 8005d0a:	d5fb      	bpl.n	8005d04 <_printf_i+0xb8>
 8005d0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d10:	2d00      	cmp	r5, #0
 8005d12:	da03      	bge.n	8005d1c <_printf_i+0xd0>
 8005d14:	232d      	movs	r3, #45	@ 0x2d
 8005d16:	426d      	negs	r5, r5
 8005d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d1c:	4859      	ldr	r0, [pc, #356]	@ (8005e84 <_printf_i+0x238>)
 8005d1e:	230a      	movs	r3, #10
 8005d20:	e011      	b.n	8005d46 <_printf_i+0xfa>
 8005d22:	6821      	ldr	r1, [r4, #0]
 8005d24:	6833      	ldr	r3, [r6, #0]
 8005d26:	0608      	lsls	r0, r1, #24
 8005d28:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d2c:	d402      	bmi.n	8005d34 <_printf_i+0xe8>
 8005d2e:	0649      	lsls	r1, r1, #25
 8005d30:	bf48      	it	mi
 8005d32:	b2ad      	uxthmi	r5, r5
 8005d34:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d36:	4853      	ldr	r0, [pc, #332]	@ (8005e84 <_printf_i+0x238>)
 8005d38:	6033      	str	r3, [r6, #0]
 8005d3a:	bf14      	ite	ne
 8005d3c:	230a      	movne	r3, #10
 8005d3e:	2308      	moveq	r3, #8
 8005d40:	2100      	movs	r1, #0
 8005d42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d46:	6866      	ldr	r6, [r4, #4]
 8005d48:	60a6      	str	r6, [r4, #8]
 8005d4a:	2e00      	cmp	r6, #0
 8005d4c:	bfa2      	ittt	ge
 8005d4e:	6821      	ldrge	r1, [r4, #0]
 8005d50:	f021 0104 	bicge.w	r1, r1, #4
 8005d54:	6021      	strge	r1, [r4, #0]
 8005d56:	b90d      	cbnz	r5, 8005d5c <_printf_i+0x110>
 8005d58:	2e00      	cmp	r6, #0
 8005d5a:	d04b      	beq.n	8005df4 <_printf_i+0x1a8>
 8005d5c:	4616      	mov	r6, r2
 8005d5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d62:	fb03 5711 	mls	r7, r3, r1, r5
 8005d66:	5dc7      	ldrb	r7, [r0, r7]
 8005d68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d6c:	462f      	mov	r7, r5
 8005d6e:	42bb      	cmp	r3, r7
 8005d70:	460d      	mov	r5, r1
 8005d72:	d9f4      	bls.n	8005d5e <_printf_i+0x112>
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d10b      	bne.n	8005d90 <_printf_i+0x144>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	07df      	lsls	r7, r3, #31
 8005d7c:	d508      	bpl.n	8005d90 <_printf_i+0x144>
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	6861      	ldr	r1, [r4, #4]
 8005d82:	4299      	cmp	r1, r3
 8005d84:	bfde      	ittt	le
 8005d86:	2330      	movle	r3, #48	@ 0x30
 8005d88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d8c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005d90:	1b92      	subs	r2, r2, r6
 8005d92:	6122      	str	r2, [r4, #16]
 8005d94:	f8cd a000 	str.w	sl, [sp]
 8005d98:	464b      	mov	r3, r9
 8005d9a:	aa03      	add	r2, sp, #12
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4640      	mov	r0, r8
 8005da0:	f7ff fee6 	bl	8005b70 <_printf_common>
 8005da4:	3001      	adds	r0, #1
 8005da6:	d14a      	bne.n	8005e3e <_printf_i+0x1f2>
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dac:	b004      	add	sp, #16
 8005dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	f043 0320 	orr.w	r3, r3, #32
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	4833      	ldr	r0, [pc, #204]	@ (8005e88 <_printf_i+0x23c>)
 8005dbc:	2778      	movs	r7, #120	@ 0x78
 8005dbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	6831      	ldr	r1, [r6, #0]
 8005dc6:	061f      	lsls	r7, r3, #24
 8005dc8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005dcc:	d402      	bmi.n	8005dd4 <_printf_i+0x188>
 8005dce:	065f      	lsls	r7, r3, #25
 8005dd0:	bf48      	it	mi
 8005dd2:	b2ad      	uxthmi	r5, r5
 8005dd4:	6031      	str	r1, [r6, #0]
 8005dd6:	07d9      	lsls	r1, r3, #31
 8005dd8:	bf44      	itt	mi
 8005dda:	f043 0320 	orrmi.w	r3, r3, #32
 8005dde:	6023      	strmi	r3, [r4, #0]
 8005de0:	b11d      	cbz	r5, 8005dea <_printf_i+0x19e>
 8005de2:	2310      	movs	r3, #16
 8005de4:	e7ac      	b.n	8005d40 <_printf_i+0xf4>
 8005de6:	4827      	ldr	r0, [pc, #156]	@ (8005e84 <_printf_i+0x238>)
 8005de8:	e7e9      	b.n	8005dbe <_printf_i+0x172>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	f023 0320 	bic.w	r3, r3, #32
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	e7f6      	b.n	8005de2 <_printf_i+0x196>
 8005df4:	4616      	mov	r6, r2
 8005df6:	e7bd      	b.n	8005d74 <_printf_i+0x128>
 8005df8:	6833      	ldr	r3, [r6, #0]
 8005dfa:	6825      	ldr	r5, [r4, #0]
 8005dfc:	6961      	ldr	r1, [r4, #20]
 8005dfe:	1d18      	adds	r0, r3, #4
 8005e00:	6030      	str	r0, [r6, #0]
 8005e02:	062e      	lsls	r6, r5, #24
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	d501      	bpl.n	8005e0c <_printf_i+0x1c0>
 8005e08:	6019      	str	r1, [r3, #0]
 8005e0a:	e002      	b.n	8005e12 <_printf_i+0x1c6>
 8005e0c:	0668      	lsls	r0, r5, #25
 8005e0e:	d5fb      	bpl.n	8005e08 <_printf_i+0x1bc>
 8005e10:	8019      	strh	r1, [r3, #0]
 8005e12:	2300      	movs	r3, #0
 8005e14:	6123      	str	r3, [r4, #16]
 8005e16:	4616      	mov	r6, r2
 8005e18:	e7bc      	b.n	8005d94 <_printf_i+0x148>
 8005e1a:	6833      	ldr	r3, [r6, #0]
 8005e1c:	1d1a      	adds	r2, r3, #4
 8005e1e:	6032      	str	r2, [r6, #0]
 8005e20:	681e      	ldr	r6, [r3, #0]
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	2100      	movs	r1, #0
 8005e26:	4630      	mov	r0, r6
 8005e28:	f7fa f9f2 	bl	8000210 <memchr>
 8005e2c:	b108      	cbz	r0, 8005e32 <_printf_i+0x1e6>
 8005e2e:	1b80      	subs	r0, r0, r6
 8005e30:	6060      	str	r0, [r4, #4]
 8005e32:	6863      	ldr	r3, [r4, #4]
 8005e34:	6123      	str	r3, [r4, #16]
 8005e36:	2300      	movs	r3, #0
 8005e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e3c:	e7aa      	b.n	8005d94 <_printf_i+0x148>
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	4632      	mov	r2, r6
 8005e42:	4649      	mov	r1, r9
 8005e44:	4640      	mov	r0, r8
 8005e46:	47d0      	blx	sl
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d0ad      	beq.n	8005da8 <_printf_i+0x15c>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	079b      	lsls	r3, r3, #30
 8005e50:	d413      	bmi.n	8005e7a <_printf_i+0x22e>
 8005e52:	68e0      	ldr	r0, [r4, #12]
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	4298      	cmp	r0, r3
 8005e58:	bfb8      	it	lt
 8005e5a:	4618      	movlt	r0, r3
 8005e5c:	e7a6      	b.n	8005dac <_printf_i+0x160>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4632      	mov	r2, r6
 8005e62:	4649      	mov	r1, r9
 8005e64:	4640      	mov	r0, r8
 8005e66:	47d0      	blx	sl
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d09d      	beq.n	8005da8 <_printf_i+0x15c>
 8005e6c:	3501      	adds	r5, #1
 8005e6e:	68e3      	ldr	r3, [r4, #12]
 8005e70:	9903      	ldr	r1, [sp, #12]
 8005e72:	1a5b      	subs	r3, r3, r1
 8005e74:	42ab      	cmp	r3, r5
 8005e76:	dcf2      	bgt.n	8005e5e <_printf_i+0x212>
 8005e78:	e7eb      	b.n	8005e52 <_printf_i+0x206>
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	f104 0619 	add.w	r6, r4, #25
 8005e80:	e7f5      	b.n	8005e6e <_printf_i+0x222>
 8005e82:	bf00      	nop
 8005e84:	080089e6 	.word	0x080089e6
 8005e88:	080089f7 	.word	0x080089f7

08005e8c <std>:
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	b510      	push	{r4, lr}
 8005e90:	4604      	mov	r4, r0
 8005e92:	e9c0 3300 	strd	r3, r3, [r0]
 8005e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e9a:	6083      	str	r3, [r0, #8]
 8005e9c:	8181      	strh	r1, [r0, #12]
 8005e9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ea0:	81c2      	strh	r2, [r0, #14]
 8005ea2:	6183      	str	r3, [r0, #24]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	305c      	adds	r0, #92	@ 0x5c
 8005eaa:	f000 fa19 	bl	80062e0 <memset>
 8005eae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <std+0x58>)
 8005eb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee8 <std+0x5c>)
 8005eb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <std+0x60>)
 8005eb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005eba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef0 <std+0x64>)
 8005ebc:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef4 <std+0x68>)
 8005ec0:	6224      	str	r4, [r4, #32]
 8005ec2:	429c      	cmp	r4, r3
 8005ec4:	d006      	beq.n	8005ed4 <std+0x48>
 8005ec6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005eca:	4294      	cmp	r4, r2
 8005ecc:	d002      	beq.n	8005ed4 <std+0x48>
 8005ece:	33d0      	adds	r3, #208	@ 0xd0
 8005ed0:	429c      	cmp	r4, r3
 8005ed2:	d105      	bne.n	8005ee0 <std+0x54>
 8005ed4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005edc:	f000 ba8c 	b.w	80063f8 <__retarget_lock_init_recursive>
 8005ee0:	bd10      	pop	{r4, pc}
 8005ee2:	bf00      	nop
 8005ee4:	08006131 	.word	0x08006131
 8005ee8:	08006153 	.word	0x08006153
 8005eec:	0800618b 	.word	0x0800618b
 8005ef0:	080061af 	.word	0x080061af
 8005ef4:	20000a60 	.word	0x20000a60

08005ef8 <stdio_exit_handler>:
 8005ef8:	4a02      	ldr	r2, [pc, #8]	@ (8005f04 <stdio_exit_handler+0xc>)
 8005efa:	4903      	ldr	r1, [pc, #12]	@ (8005f08 <stdio_exit_handler+0x10>)
 8005efc:	4803      	ldr	r0, [pc, #12]	@ (8005f0c <stdio_exit_handler+0x14>)
 8005efe:	f000 b869 	b.w	8005fd4 <_fwalk_sglue>
 8005f02:	bf00      	nop
 8005f04:	20000698 	.word	0x20000698
 8005f08:	08007e9d 	.word	0x08007e9d
 8005f0c:	200006a8 	.word	0x200006a8

08005f10 <cleanup_stdio>:
 8005f10:	6841      	ldr	r1, [r0, #4]
 8005f12:	4b0c      	ldr	r3, [pc, #48]	@ (8005f44 <cleanup_stdio+0x34>)
 8005f14:	4299      	cmp	r1, r3
 8005f16:	b510      	push	{r4, lr}
 8005f18:	4604      	mov	r4, r0
 8005f1a:	d001      	beq.n	8005f20 <cleanup_stdio+0x10>
 8005f1c:	f001 ffbe 	bl	8007e9c <_fflush_r>
 8005f20:	68a1      	ldr	r1, [r4, #8]
 8005f22:	4b09      	ldr	r3, [pc, #36]	@ (8005f48 <cleanup_stdio+0x38>)
 8005f24:	4299      	cmp	r1, r3
 8005f26:	d002      	beq.n	8005f2e <cleanup_stdio+0x1e>
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f001 ffb7 	bl	8007e9c <_fflush_r>
 8005f2e:	68e1      	ldr	r1, [r4, #12]
 8005f30:	4b06      	ldr	r3, [pc, #24]	@ (8005f4c <cleanup_stdio+0x3c>)
 8005f32:	4299      	cmp	r1, r3
 8005f34:	d004      	beq.n	8005f40 <cleanup_stdio+0x30>
 8005f36:	4620      	mov	r0, r4
 8005f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f3c:	f001 bfae 	b.w	8007e9c <_fflush_r>
 8005f40:	bd10      	pop	{r4, pc}
 8005f42:	bf00      	nop
 8005f44:	20000a60 	.word	0x20000a60
 8005f48:	20000ac8 	.word	0x20000ac8
 8005f4c:	20000b30 	.word	0x20000b30

08005f50 <global_stdio_init.part.0>:
 8005f50:	b510      	push	{r4, lr}
 8005f52:	4b0b      	ldr	r3, [pc, #44]	@ (8005f80 <global_stdio_init.part.0+0x30>)
 8005f54:	4c0b      	ldr	r4, [pc, #44]	@ (8005f84 <global_stdio_init.part.0+0x34>)
 8005f56:	4a0c      	ldr	r2, [pc, #48]	@ (8005f88 <global_stdio_init.part.0+0x38>)
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2104      	movs	r1, #4
 8005f60:	f7ff ff94 	bl	8005e8c <std>
 8005f64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f68:	2201      	movs	r2, #1
 8005f6a:	2109      	movs	r1, #9
 8005f6c:	f7ff ff8e 	bl	8005e8c <std>
 8005f70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f74:	2202      	movs	r2, #2
 8005f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f7a:	2112      	movs	r1, #18
 8005f7c:	f7ff bf86 	b.w	8005e8c <std>
 8005f80:	20000b98 	.word	0x20000b98
 8005f84:	20000a60 	.word	0x20000a60
 8005f88:	08005ef9 	.word	0x08005ef9

08005f8c <__sfp_lock_acquire>:
 8005f8c:	4801      	ldr	r0, [pc, #4]	@ (8005f94 <__sfp_lock_acquire+0x8>)
 8005f8e:	f000 ba34 	b.w	80063fa <__retarget_lock_acquire_recursive>
 8005f92:	bf00      	nop
 8005f94:	20000ba1 	.word	0x20000ba1

08005f98 <__sfp_lock_release>:
 8005f98:	4801      	ldr	r0, [pc, #4]	@ (8005fa0 <__sfp_lock_release+0x8>)
 8005f9a:	f000 ba2f 	b.w	80063fc <__retarget_lock_release_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	20000ba1 	.word	0x20000ba1

08005fa4 <__sinit>:
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	f7ff fff0 	bl	8005f8c <__sfp_lock_acquire>
 8005fac:	6a23      	ldr	r3, [r4, #32]
 8005fae:	b11b      	cbz	r3, 8005fb8 <__sinit+0x14>
 8005fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb4:	f7ff bff0 	b.w	8005f98 <__sfp_lock_release>
 8005fb8:	4b04      	ldr	r3, [pc, #16]	@ (8005fcc <__sinit+0x28>)
 8005fba:	6223      	str	r3, [r4, #32]
 8005fbc:	4b04      	ldr	r3, [pc, #16]	@ (8005fd0 <__sinit+0x2c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1f5      	bne.n	8005fb0 <__sinit+0xc>
 8005fc4:	f7ff ffc4 	bl	8005f50 <global_stdio_init.part.0>
 8005fc8:	e7f2      	b.n	8005fb0 <__sinit+0xc>
 8005fca:	bf00      	nop
 8005fcc:	08005f11 	.word	0x08005f11
 8005fd0:	20000b98 	.word	0x20000b98

08005fd4 <_fwalk_sglue>:
 8005fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd8:	4607      	mov	r7, r0
 8005fda:	4688      	mov	r8, r1
 8005fdc:	4614      	mov	r4, r2
 8005fde:	2600      	movs	r6, #0
 8005fe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fe4:	f1b9 0901 	subs.w	r9, r9, #1
 8005fe8:	d505      	bpl.n	8005ff6 <_fwalk_sglue+0x22>
 8005fea:	6824      	ldr	r4, [r4, #0]
 8005fec:	2c00      	cmp	r4, #0
 8005fee:	d1f7      	bne.n	8005fe0 <_fwalk_sglue+0xc>
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff6:	89ab      	ldrh	r3, [r5, #12]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d907      	bls.n	800600c <_fwalk_sglue+0x38>
 8005ffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006000:	3301      	adds	r3, #1
 8006002:	d003      	beq.n	800600c <_fwalk_sglue+0x38>
 8006004:	4629      	mov	r1, r5
 8006006:	4638      	mov	r0, r7
 8006008:	47c0      	blx	r8
 800600a:	4306      	orrs	r6, r0
 800600c:	3568      	adds	r5, #104	@ 0x68
 800600e:	e7e9      	b.n	8005fe4 <_fwalk_sglue+0x10>

08006010 <iprintf>:
 8006010:	b40f      	push	{r0, r1, r2, r3}
 8006012:	b507      	push	{r0, r1, r2, lr}
 8006014:	4906      	ldr	r1, [pc, #24]	@ (8006030 <iprintf+0x20>)
 8006016:	ab04      	add	r3, sp, #16
 8006018:	6808      	ldr	r0, [r1, #0]
 800601a:	f853 2b04 	ldr.w	r2, [r3], #4
 800601e:	6881      	ldr	r1, [r0, #8]
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	f001 fd9f 	bl	8007b64 <_vfiprintf_r>
 8006026:	b003      	add	sp, #12
 8006028:	f85d eb04 	ldr.w	lr, [sp], #4
 800602c:	b004      	add	sp, #16
 800602e:	4770      	bx	lr
 8006030:	200006a4 	.word	0x200006a4

08006034 <_puts_r>:
 8006034:	6a03      	ldr	r3, [r0, #32]
 8006036:	b570      	push	{r4, r5, r6, lr}
 8006038:	6884      	ldr	r4, [r0, #8]
 800603a:	4605      	mov	r5, r0
 800603c:	460e      	mov	r6, r1
 800603e:	b90b      	cbnz	r3, 8006044 <_puts_r+0x10>
 8006040:	f7ff ffb0 	bl	8005fa4 <__sinit>
 8006044:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006046:	07db      	lsls	r3, r3, #31
 8006048:	d405      	bmi.n	8006056 <_puts_r+0x22>
 800604a:	89a3      	ldrh	r3, [r4, #12]
 800604c:	0598      	lsls	r0, r3, #22
 800604e:	d402      	bmi.n	8006056 <_puts_r+0x22>
 8006050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006052:	f000 f9d2 	bl	80063fa <__retarget_lock_acquire_recursive>
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	0719      	lsls	r1, r3, #28
 800605a:	d502      	bpl.n	8006062 <_puts_r+0x2e>
 800605c:	6923      	ldr	r3, [r4, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d135      	bne.n	80060ce <_puts_r+0x9a>
 8006062:	4621      	mov	r1, r4
 8006064:	4628      	mov	r0, r5
 8006066:	f000 f8e5 	bl	8006234 <__swsetup_r>
 800606a:	b380      	cbz	r0, 80060ce <_puts_r+0x9a>
 800606c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006070:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006072:	07da      	lsls	r2, r3, #31
 8006074:	d405      	bmi.n	8006082 <_puts_r+0x4e>
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	059b      	lsls	r3, r3, #22
 800607a:	d402      	bmi.n	8006082 <_puts_r+0x4e>
 800607c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800607e:	f000 f9bd 	bl	80063fc <__retarget_lock_release_recursive>
 8006082:	4628      	mov	r0, r5
 8006084:	bd70      	pop	{r4, r5, r6, pc}
 8006086:	2b00      	cmp	r3, #0
 8006088:	da04      	bge.n	8006094 <_puts_r+0x60>
 800608a:	69a2      	ldr	r2, [r4, #24]
 800608c:	429a      	cmp	r2, r3
 800608e:	dc17      	bgt.n	80060c0 <_puts_r+0x8c>
 8006090:	290a      	cmp	r1, #10
 8006092:	d015      	beq.n	80060c0 <_puts_r+0x8c>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	6022      	str	r2, [r4, #0]
 800609a:	7019      	strb	r1, [r3, #0]
 800609c:	68a3      	ldr	r3, [r4, #8]
 800609e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060a2:	3b01      	subs	r3, #1
 80060a4:	60a3      	str	r3, [r4, #8]
 80060a6:	2900      	cmp	r1, #0
 80060a8:	d1ed      	bne.n	8006086 <_puts_r+0x52>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	da11      	bge.n	80060d2 <_puts_r+0x9e>
 80060ae:	4622      	mov	r2, r4
 80060b0:	210a      	movs	r1, #10
 80060b2:	4628      	mov	r0, r5
 80060b4:	f000 f87f 	bl	80061b6 <__swbuf_r>
 80060b8:	3001      	adds	r0, #1
 80060ba:	d0d7      	beq.n	800606c <_puts_r+0x38>
 80060bc:	250a      	movs	r5, #10
 80060be:	e7d7      	b.n	8006070 <_puts_r+0x3c>
 80060c0:	4622      	mov	r2, r4
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 f877 	bl	80061b6 <__swbuf_r>
 80060c8:	3001      	adds	r0, #1
 80060ca:	d1e7      	bne.n	800609c <_puts_r+0x68>
 80060cc:	e7ce      	b.n	800606c <_puts_r+0x38>
 80060ce:	3e01      	subs	r6, #1
 80060d0:	e7e4      	b.n	800609c <_puts_r+0x68>
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	6022      	str	r2, [r4, #0]
 80060d8:	220a      	movs	r2, #10
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	e7ee      	b.n	80060bc <_puts_r+0x88>
	...

080060e0 <puts>:
 80060e0:	4b02      	ldr	r3, [pc, #8]	@ (80060ec <puts+0xc>)
 80060e2:	4601      	mov	r1, r0
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	f7ff bfa5 	b.w	8006034 <_puts_r>
 80060ea:	bf00      	nop
 80060ec:	200006a4 	.word	0x200006a4

080060f0 <siprintf>:
 80060f0:	b40e      	push	{r1, r2, r3}
 80060f2:	b500      	push	{lr}
 80060f4:	b09c      	sub	sp, #112	@ 0x70
 80060f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80060f8:	9002      	str	r0, [sp, #8]
 80060fa:	9006      	str	r0, [sp, #24]
 80060fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006100:	4809      	ldr	r0, [pc, #36]	@ (8006128 <siprintf+0x38>)
 8006102:	9107      	str	r1, [sp, #28]
 8006104:	9104      	str	r1, [sp, #16]
 8006106:	4909      	ldr	r1, [pc, #36]	@ (800612c <siprintf+0x3c>)
 8006108:	f853 2b04 	ldr.w	r2, [r3], #4
 800610c:	9105      	str	r1, [sp, #20]
 800610e:	6800      	ldr	r0, [r0, #0]
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	a902      	add	r1, sp, #8
 8006114:	f001 fc00 	bl	8007918 <_svfiprintf_r>
 8006118:	9b02      	ldr	r3, [sp, #8]
 800611a:	2200      	movs	r2, #0
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	b01c      	add	sp, #112	@ 0x70
 8006120:	f85d eb04 	ldr.w	lr, [sp], #4
 8006124:	b003      	add	sp, #12
 8006126:	4770      	bx	lr
 8006128:	200006a4 	.word	0x200006a4
 800612c:	ffff0208 	.word	0xffff0208

08006130 <__sread>:
 8006130:	b510      	push	{r4, lr}
 8006132:	460c      	mov	r4, r1
 8006134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006138:	f000 f900 	bl	800633c <_read_r>
 800613c:	2800      	cmp	r0, #0
 800613e:	bfab      	itete	ge
 8006140:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006142:	89a3      	ldrhlt	r3, [r4, #12]
 8006144:	181b      	addge	r3, r3, r0
 8006146:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800614a:	bfac      	ite	ge
 800614c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800614e:	81a3      	strhlt	r3, [r4, #12]
 8006150:	bd10      	pop	{r4, pc}

08006152 <__swrite>:
 8006152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006156:	461f      	mov	r7, r3
 8006158:	898b      	ldrh	r3, [r1, #12]
 800615a:	05db      	lsls	r3, r3, #23
 800615c:	4605      	mov	r5, r0
 800615e:	460c      	mov	r4, r1
 8006160:	4616      	mov	r6, r2
 8006162:	d505      	bpl.n	8006170 <__swrite+0x1e>
 8006164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006168:	2302      	movs	r3, #2
 800616a:	2200      	movs	r2, #0
 800616c:	f000 f8d4 	bl	8006318 <_lseek_r>
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006176:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800617a:	81a3      	strh	r3, [r4, #12]
 800617c:	4632      	mov	r2, r6
 800617e:	463b      	mov	r3, r7
 8006180:	4628      	mov	r0, r5
 8006182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006186:	f000 b8fb 	b.w	8006380 <_write_r>

0800618a <__sseek>:
 800618a:	b510      	push	{r4, lr}
 800618c:	460c      	mov	r4, r1
 800618e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006192:	f000 f8c1 	bl	8006318 <_lseek_r>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	bf15      	itete	ne
 800619c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800619e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061a6:	81a3      	strheq	r3, [r4, #12]
 80061a8:	bf18      	it	ne
 80061aa:	81a3      	strhne	r3, [r4, #12]
 80061ac:	bd10      	pop	{r4, pc}

080061ae <__sclose>:
 80061ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b2:	f000 b8a1 	b.w	80062f8 <_close_r>

080061b6 <__swbuf_r>:
 80061b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b8:	460e      	mov	r6, r1
 80061ba:	4614      	mov	r4, r2
 80061bc:	4605      	mov	r5, r0
 80061be:	b118      	cbz	r0, 80061c8 <__swbuf_r+0x12>
 80061c0:	6a03      	ldr	r3, [r0, #32]
 80061c2:	b90b      	cbnz	r3, 80061c8 <__swbuf_r+0x12>
 80061c4:	f7ff feee 	bl	8005fa4 <__sinit>
 80061c8:	69a3      	ldr	r3, [r4, #24]
 80061ca:	60a3      	str	r3, [r4, #8]
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	071a      	lsls	r2, r3, #28
 80061d0:	d501      	bpl.n	80061d6 <__swbuf_r+0x20>
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	b943      	cbnz	r3, 80061e8 <__swbuf_r+0x32>
 80061d6:	4621      	mov	r1, r4
 80061d8:	4628      	mov	r0, r5
 80061da:	f000 f82b 	bl	8006234 <__swsetup_r>
 80061de:	b118      	cbz	r0, 80061e8 <__swbuf_r+0x32>
 80061e0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80061e4:	4638      	mov	r0, r7
 80061e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	6922      	ldr	r2, [r4, #16]
 80061ec:	1a98      	subs	r0, r3, r2
 80061ee:	6963      	ldr	r3, [r4, #20]
 80061f0:	b2f6      	uxtb	r6, r6
 80061f2:	4283      	cmp	r3, r0
 80061f4:	4637      	mov	r7, r6
 80061f6:	dc05      	bgt.n	8006204 <__swbuf_r+0x4e>
 80061f8:	4621      	mov	r1, r4
 80061fa:	4628      	mov	r0, r5
 80061fc:	f001 fe4e 	bl	8007e9c <_fflush_r>
 8006200:	2800      	cmp	r0, #0
 8006202:	d1ed      	bne.n	80061e0 <__swbuf_r+0x2a>
 8006204:	68a3      	ldr	r3, [r4, #8]
 8006206:	3b01      	subs	r3, #1
 8006208:	60a3      	str	r3, [r4, #8]
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	6022      	str	r2, [r4, #0]
 8006210:	701e      	strb	r6, [r3, #0]
 8006212:	6962      	ldr	r2, [r4, #20]
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	429a      	cmp	r2, r3
 8006218:	d004      	beq.n	8006224 <__swbuf_r+0x6e>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	07db      	lsls	r3, r3, #31
 800621e:	d5e1      	bpl.n	80061e4 <__swbuf_r+0x2e>
 8006220:	2e0a      	cmp	r6, #10
 8006222:	d1df      	bne.n	80061e4 <__swbuf_r+0x2e>
 8006224:	4621      	mov	r1, r4
 8006226:	4628      	mov	r0, r5
 8006228:	f001 fe38 	bl	8007e9c <_fflush_r>
 800622c:	2800      	cmp	r0, #0
 800622e:	d0d9      	beq.n	80061e4 <__swbuf_r+0x2e>
 8006230:	e7d6      	b.n	80061e0 <__swbuf_r+0x2a>
	...

08006234 <__swsetup_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4b29      	ldr	r3, [pc, #164]	@ (80062dc <__swsetup_r+0xa8>)
 8006238:	4605      	mov	r5, r0
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	460c      	mov	r4, r1
 800623e:	b118      	cbz	r0, 8006248 <__swsetup_r+0x14>
 8006240:	6a03      	ldr	r3, [r0, #32]
 8006242:	b90b      	cbnz	r3, 8006248 <__swsetup_r+0x14>
 8006244:	f7ff feae 	bl	8005fa4 <__sinit>
 8006248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800624c:	0719      	lsls	r1, r3, #28
 800624e:	d422      	bmi.n	8006296 <__swsetup_r+0x62>
 8006250:	06da      	lsls	r2, r3, #27
 8006252:	d407      	bmi.n	8006264 <__swsetup_r+0x30>
 8006254:	2209      	movs	r2, #9
 8006256:	602a      	str	r2, [r5, #0]
 8006258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800625c:	81a3      	strh	r3, [r4, #12]
 800625e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006262:	e033      	b.n	80062cc <__swsetup_r+0x98>
 8006264:	0758      	lsls	r0, r3, #29
 8006266:	d512      	bpl.n	800628e <__swsetup_r+0x5a>
 8006268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800626a:	b141      	cbz	r1, 800627e <__swsetup_r+0x4a>
 800626c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006270:	4299      	cmp	r1, r3
 8006272:	d002      	beq.n	800627a <__swsetup_r+0x46>
 8006274:	4628      	mov	r0, r5
 8006276:	f000 ff1f 	bl	80070b8 <_free_r>
 800627a:	2300      	movs	r3, #0
 800627c:	6363      	str	r3, [r4, #52]	@ 0x34
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006284:	81a3      	strh	r3, [r4, #12]
 8006286:	2300      	movs	r3, #0
 8006288:	6063      	str	r3, [r4, #4]
 800628a:	6923      	ldr	r3, [r4, #16]
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	f043 0308 	orr.w	r3, r3, #8
 8006294:	81a3      	strh	r3, [r4, #12]
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	b94b      	cbnz	r3, 80062ae <__swsetup_r+0x7a>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062a4:	d003      	beq.n	80062ae <__swsetup_r+0x7a>
 80062a6:	4621      	mov	r1, r4
 80062a8:	4628      	mov	r0, r5
 80062aa:	f001 fe45 	bl	8007f38 <__smakebuf_r>
 80062ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062b2:	f013 0201 	ands.w	r2, r3, #1
 80062b6:	d00a      	beq.n	80062ce <__swsetup_r+0x9a>
 80062b8:	2200      	movs	r2, #0
 80062ba:	60a2      	str	r2, [r4, #8]
 80062bc:	6962      	ldr	r2, [r4, #20]
 80062be:	4252      	negs	r2, r2
 80062c0:	61a2      	str	r2, [r4, #24]
 80062c2:	6922      	ldr	r2, [r4, #16]
 80062c4:	b942      	cbnz	r2, 80062d8 <__swsetup_r+0xa4>
 80062c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062ca:	d1c5      	bne.n	8006258 <__swsetup_r+0x24>
 80062cc:	bd38      	pop	{r3, r4, r5, pc}
 80062ce:	0799      	lsls	r1, r3, #30
 80062d0:	bf58      	it	pl
 80062d2:	6962      	ldrpl	r2, [r4, #20]
 80062d4:	60a2      	str	r2, [r4, #8]
 80062d6:	e7f4      	b.n	80062c2 <__swsetup_r+0x8e>
 80062d8:	2000      	movs	r0, #0
 80062da:	e7f7      	b.n	80062cc <__swsetup_r+0x98>
 80062dc:	200006a4 	.word	0x200006a4

080062e0 <memset>:
 80062e0:	4402      	add	r2, r0
 80062e2:	4603      	mov	r3, r0
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d100      	bne.n	80062ea <memset+0xa>
 80062e8:	4770      	bx	lr
 80062ea:	f803 1b01 	strb.w	r1, [r3], #1
 80062ee:	e7f9      	b.n	80062e4 <memset+0x4>

080062f0 <_localeconv_r>:
 80062f0:	4800      	ldr	r0, [pc, #0]	@ (80062f4 <_localeconv_r+0x4>)
 80062f2:	4770      	bx	lr
 80062f4:	200007e4 	.word	0x200007e4

080062f8 <_close_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4d06      	ldr	r5, [pc, #24]	@ (8006314 <_close_r+0x1c>)
 80062fc:	2300      	movs	r3, #0
 80062fe:	4604      	mov	r4, r0
 8006300:	4608      	mov	r0, r1
 8006302:	602b      	str	r3, [r5, #0]
 8006304:	f001 ff40 	bl	8008188 <_close>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d102      	bne.n	8006312 <_close_r+0x1a>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	b103      	cbz	r3, 8006312 <_close_r+0x1a>
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	20000b9c 	.word	0x20000b9c

08006318 <_lseek_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4d07      	ldr	r5, [pc, #28]	@ (8006338 <_lseek_r+0x20>)
 800631c:	4604      	mov	r4, r0
 800631e:	4608      	mov	r0, r1
 8006320:	4611      	mov	r1, r2
 8006322:	2200      	movs	r2, #0
 8006324:	602a      	str	r2, [r5, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	f001 ff56 	bl	80081d8 <_lseek>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d102      	bne.n	8006336 <_lseek_r+0x1e>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	b103      	cbz	r3, 8006336 <_lseek_r+0x1e>
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	20000b9c 	.word	0x20000b9c

0800633c <_read_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4d07      	ldr	r5, [pc, #28]	@ (800635c <_read_r+0x20>)
 8006340:	4604      	mov	r4, r0
 8006342:	4608      	mov	r0, r1
 8006344:	4611      	mov	r1, r2
 8006346:	2200      	movs	r2, #0
 8006348:	602a      	str	r2, [r5, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	f001 ff4c 	bl	80081e8 <_read>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_read_r+0x1e>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_read_r+0x1e>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	20000b9c 	.word	0x20000b9c

08006360 <_sbrk_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4d06      	ldr	r5, [pc, #24]	@ (800637c <_sbrk_r+0x1c>)
 8006364:	2300      	movs	r3, #0
 8006366:	4604      	mov	r4, r0
 8006368:	4608      	mov	r0, r1
 800636a:	602b      	str	r3, [r5, #0]
 800636c:	f7fb f8f8 	bl	8001560 <_sbrk>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d102      	bne.n	800637a <_sbrk_r+0x1a>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	b103      	cbz	r3, 800637a <_sbrk_r+0x1a>
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	20000b9c 	.word	0x20000b9c

08006380 <_write_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d07      	ldr	r5, [pc, #28]	@ (80063a0 <_write_r+0x20>)
 8006384:	4604      	mov	r4, r0
 8006386:	4608      	mov	r0, r1
 8006388:	4611      	mov	r1, r2
 800638a:	2200      	movs	r2, #0
 800638c:	602a      	str	r2, [r5, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	f001 ff32 	bl	80081f8 <_write>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_write_r+0x1e>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	b103      	cbz	r3, 800639e <_write_r+0x1e>
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	20000b9c 	.word	0x20000b9c

080063a4 <__errno>:
 80063a4:	4b01      	ldr	r3, [pc, #4]	@ (80063ac <__errno+0x8>)
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	200006a4 	.word	0x200006a4

080063b0 <__libc_init_array>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	4d0d      	ldr	r5, [pc, #52]	@ (80063e8 <__libc_init_array+0x38>)
 80063b4:	4c0d      	ldr	r4, [pc, #52]	@ (80063ec <__libc_init_array+0x3c>)
 80063b6:	1b64      	subs	r4, r4, r5
 80063b8:	10a4      	asrs	r4, r4, #2
 80063ba:	2600      	movs	r6, #0
 80063bc:	42a6      	cmp	r6, r4
 80063be:	d109      	bne.n	80063d4 <__libc_init_array+0x24>
 80063c0:	4d0b      	ldr	r5, [pc, #44]	@ (80063f0 <__libc_init_array+0x40>)
 80063c2:	4c0c      	ldr	r4, [pc, #48]	@ (80063f4 <__libc_init_array+0x44>)
 80063c4:	f001 ff22 	bl	800820c <_init>
 80063c8:	1b64      	subs	r4, r4, r5
 80063ca:	10a4      	asrs	r4, r4, #2
 80063cc:	2600      	movs	r6, #0
 80063ce:	42a6      	cmp	r6, r4
 80063d0:	d105      	bne.n	80063de <__libc_init_array+0x2e>
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
 80063d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d8:	4798      	blx	r3
 80063da:	3601      	adds	r6, #1
 80063dc:	e7ee      	b.n	80063bc <__libc_init_array+0xc>
 80063de:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e2:	4798      	blx	r3
 80063e4:	3601      	adds	r6, #1
 80063e6:	e7f2      	b.n	80063ce <__libc_init_array+0x1e>
 80063e8:	08008d50 	.word	0x08008d50
 80063ec:	08008d50 	.word	0x08008d50
 80063f0:	08008d50 	.word	0x08008d50
 80063f4:	08008d54 	.word	0x08008d54

080063f8 <__retarget_lock_init_recursive>:
 80063f8:	4770      	bx	lr

080063fa <__retarget_lock_acquire_recursive>:
 80063fa:	4770      	bx	lr

080063fc <__retarget_lock_release_recursive>:
 80063fc:	4770      	bx	lr

080063fe <memcpy>:
 80063fe:	440a      	add	r2, r1
 8006400:	4291      	cmp	r1, r2
 8006402:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006406:	d100      	bne.n	800640a <memcpy+0xc>
 8006408:	4770      	bx	lr
 800640a:	b510      	push	{r4, lr}
 800640c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006410:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006414:	4291      	cmp	r1, r2
 8006416:	d1f9      	bne.n	800640c <memcpy+0xe>
 8006418:	bd10      	pop	{r4, pc}

0800641a <quorem>:
 800641a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641e:	6903      	ldr	r3, [r0, #16]
 8006420:	690c      	ldr	r4, [r1, #16]
 8006422:	42a3      	cmp	r3, r4
 8006424:	4607      	mov	r7, r0
 8006426:	db7e      	blt.n	8006526 <quorem+0x10c>
 8006428:	3c01      	subs	r4, #1
 800642a:	f101 0814 	add.w	r8, r1, #20
 800642e:	00a3      	lsls	r3, r4, #2
 8006430:	f100 0514 	add.w	r5, r0, #20
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006440:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006444:	3301      	adds	r3, #1
 8006446:	429a      	cmp	r2, r3
 8006448:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800644c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006450:	d32e      	bcc.n	80064b0 <quorem+0x96>
 8006452:	f04f 0a00 	mov.w	sl, #0
 8006456:	46c4      	mov	ip, r8
 8006458:	46ae      	mov	lr, r5
 800645a:	46d3      	mov	fp, sl
 800645c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006460:	b298      	uxth	r0, r3
 8006462:	fb06 a000 	mla	r0, r6, r0, sl
 8006466:	0c02      	lsrs	r2, r0, #16
 8006468:	0c1b      	lsrs	r3, r3, #16
 800646a:	fb06 2303 	mla	r3, r6, r3, r2
 800646e:	f8de 2000 	ldr.w	r2, [lr]
 8006472:	b280      	uxth	r0, r0
 8006474:	b292      	uxth	r2, r2
 8006476:	1a12      	subs	r2, r2, r0
 8006478:	445a      	add	r2, fp
 800647a:	f8de 0000 	ldr.w	r0, [lr]
 800647e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006482:	b29b      	uxth	r3, r3
 8006484:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006488:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800648c:	b292      	uxth	r2, r2
 800648e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006492:	45e1      	cmp	r9, ip
 8006494:	f84e 2b04 	str.w	r2, [lr], #4
 8006498:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800649c:	d2de      	bcs.n	800645c <quorem+0x42>
 800649e:	9b00      	ldr	r3, [sp, #0]
 80064a0:	58eb      	ldr	r3, [r5, r3]
 80064a2:	b92b      	cbnz	r3, 80064b0 <quorem+0x96>
 80064a4:	9b01      	ldr	r3, [sp, #4]
 80064a6:	3b04      	subs	r3, #4
 80064a8:	429d      	cmp	r5, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	d32f      	bcc.n	800650e <quorem+0xf4>
 80064ae:	613c      	str	r4, [r7, #16]
 80064b0:	4638      	mov	r0, r7
 80064b2:	f001 f8c5 	bl	8007640 <__mcmp>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	db25      	blt.n	8006506 <quorem+0xec>
 80064ba:	4629      	mov	r1, r5
 80064bc:	2000      	movs	r0, #0
 80064be:	f858 2b04 	ldr.w	r2, [r8], #4
 80064c2:	f8d1 c000 	ldr.w	ip, [r1]
 80064c6:	fa1f fe82 	uxth.w	lr, r2
 80064ca:	fa1f f38c 	uxth.w	r3, ip
 80064ce:	eba3 030e 	sub.w	r3, r3, lr
 80064d2:	4403      	add	r3, r0
 80064d4:	0c12      	lsrs	r2, r2, #16
 80064d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064de:	b29b      	uxth	r3, r3
 80064e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064e4:	45c1      	cmp	r9, r8
 80064e6:	f841 3b04 	str.w	r3, [r1], #4
 80064ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064ee:	d2e6      	bcs.n	80064be <quorem+0xa4>
 80064f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064f8:	b922      	cbnz	r2, 8006504 <quorem+0xea>
 80064fa:	3b04      	subs	r3, #4
 80064fc:	429d      	cmp	r5, r3
 80064fe:	461a      	mov	r2, r3
 8006500:	d30b      	bcc.n	800651a <quorem+0x100>
 8006502:	613c      	str	r4, [r7, #16]
 8006504:	3601      	adds	r6, #1
 8006506:	4630      	mov	r0, r6
 8006508:	b003      	add	sp, #12
 800650a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650e:	6812      	ldr	r2, [r2, #0]
 8006510:	3b04      	subs	r3, #4
 8006512:	2a00      	cmp	r2, #0
 8006514:	d1cb      	bne.n	80064ae <quorem+0x94>
 8006516:	3c01      	subs	r4, #1
 8006518:	e7c6      	b.n	80064a8 <quorem+0x8e>
 800651a:	6812      	ldr	r2, [r2, #0]
 800651c:	3b04      	subs	r3, #4
 800651e:	2a00      	cmp	r2, #0
 8006520:	d1ef      	bne.n	8006502 <quorem+0xe8>
 8006522:	3c01      	subs	r4, #1
 8006524:	e7ea      	b.n	80064fc <quorem+0xe2>
 8006526:	2000      	movs	r0, #0
 8006528:	e7ee      	b.n	8006508 <quorem+0xee>
 800652a:	0000      	movs	r0, r0
 800652c:	0000      	movs	r0, r0
	...

08006530 <_dtoa_r>:
 8006530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	69c7      	ldr	r7, [r0, #28]
 8006536:	b099      	sub	sp, #100	@ 0x64
 8006538:	ed8d 0b02 	vstr	d0, [sp, #8]
 800653c:	ec55 4b10 	vmov	r4, r5, d0
 8006540:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006542:	9109      	str	r1, [sp, #36]	@ 0x24
 8006544:	4683      	mov	fp, r0
 8006546:	920e      	str	r2, [sp, #56]	@ 0x38
 8006548:	9313      	str	r3, [sp, #76]	@ 0x4c
 800654a:	b97f      	cbnz	r7, 800656c <_dtoa_r+0x3c>
 800654c:	2010      	movs	r0, #16
 800654e:	f7fe ff61 	bl	8005414 <malloc>
 8006552:	4602      	mov	r2, r0
 8006554:	f8cb 001c 	str.w	r0, [fp, #28]
 8006558:	b920      	cbnz	r0, 8006564 <_dtoa_r+0x34>
 800655a:	4ba7      	ldr	r3, [pc, #668]	@ (80067f8 <_dtoa_r+0x2c8>)
 800655c:	21ef      	movs	r1, #239	@ 0xef
 800655e:	48a7      	ldr	r0, [pc, #668]	@ (80067fc <_dtoa_r+0x2cc>)
 8006560:	f001 fd62 	bl	8008028 <__assert_func>
 8006564:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006568:	6007      	str	r7, [r0, #0]
 800656a:	60c7      	str	r7, [r0, #12]
 800656c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006570:	6819      	ldr	r1, [r3, #0]
 8006572:	b159      	cbz	r1, 800658c <_dtoa_r+0x5c>
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	604a      	str	r2, [r1, #4]
 8006578:	2301      	movs	r3, #1
 800657a:	4093      	lsls	r3, r2
 800657c:	608b      	str	r3, [r1, #8]
 800657e:	4658      	mov	r0, fp
 8006580:	f000 fe24 	bl	80071cc <_Bfree>
 8006584:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	1e2b      	subs	r3, r5, #0
 800658e:	bfb9      	ittee	lt
 8006590:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006594:	9303      	strlt	r3, [sp, #12]
 8006596:	2300      	movge	r3, #0
 8006598:	6033      	strge	r3, [r6, #0]
 800659a:	9f03      	ldr	r7, [sp, #12]
 800659c:	4b98      	ldr	r3, [pc, #608]	@ (8006800 <_dtoa_r+0x2d0>)
 800659e:	bfbc      	itt	lt
 80065a0:	2201      	movlt	r2, #1
 80065a2:	6032      	strlt	r2, [r6, #0]
 80065a4:	43bb      	bics	r3, r7
 80065a6:	d112      	bne.n	80065ce <_dtoa_r+0x9e>
 80065a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065b4:	4323      	orrs	r3, r4
 80065b6:	f000 854d 	beq.w	8007054 <_dtoa_r+0xb24>
 80065ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006814 <_dtoa_r+0x2e4>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 854f 	beq.w	8007064 <_dtoa_r+0xb34>
 80065c6:	f10a 0303 	add.w	r3, sl, #3
 80065ca:	f000 bd49 	b.w	8007060 <_dtoa_r+0xb30>
 80065ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065d2:	2200      	movs	r2, #0
 80065d4:	ec51 0b17 	vmov	r0, r1, d7
 80065d8:	2300      	movs	r3, #0
 80065da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80065de:	f7fa fa93 	bl	8000b08 <__aeabi_dcmpeq>
 80065e2:	4680      	mov	r8, r0
 80065e4:	b158      	cbz	r0, 80065fe <_dtoa_r+0xce>
 80065e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065e8:	2301      	movs	r3, #1
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065ee:	b113      	cbz	r3, 80065f6 <_dtoa_r+0xc6>
 80065f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80065f2:	4b84      	ldr	r3, [pc, #528]	@ (8006804 <_dtoa_r+0x2d4>)
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006818 <_dtoa_r+0x2e8>
 80065fa:	f000 bd33 	b.w	8007064 <_dtoa_r+0xb34>
 80065fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006602:	aa16      	add	r2, sp, #88	@ 0x58
 8006604:	a917      	add	r1, sp, #92	@ 0x5c
 8006606:	4658      	mov	r0, fp
 8006608:	f001 f8ca 	bl	80077a0 <__d2b>
 800660c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006610:	4681      	mov	r9, r0
 8006612:	2e00      	cmp	r6, #0
 8006614:	d077      	beq.n	8006706 <_dtoa_r+0x1d6>
 8006616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006618:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800661c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006624:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006628:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800662c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006630:	4619      	mov	r1, r3
 8006632:	2200      	movs	r2, #0
 8006634:	4b74      	ldr	r3, [pc, #464]	@ (8006808 <_dtoa_r+0x2d8>)
 8006636:	f7f9 fe47 	bl	80002c8 <__aeabi_dsub>
 800663a:	a369      	add	r3, pc, #420	@ (adr r3, 80067e0 <_dtoa_r+0x2b0>)
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	f7f9 fffa 	bl	8000638 <__aeabi_dmul>
 8006644:	a368      	add	r3, pc, #416	@ (adr r3, 80067e8 <_dtoa_r+0x2b8>)
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	f7f9 fe3f 	bl	80002cc <__adddf3>
 800664e:	4604      	mov	r4, r0
 8006650:	4630      	mov	r0, r6
 8006652:	460d      	mov	r5, r1
 8006654:	f7f9 ff86 	bl	8000564 <__aeabi_i2d>
 8006658:	a365      	add	r3, pc, #404	@ (adr r3, 80067f0 <_dtoa_r+0x2c0>)
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	f7f9 ffeb 	bl	8000638 <__aeabi_dmul>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f7f9 fe2f 	bl	80002cc <__adddf3>
 800666e:	4604      	mov	r4, r0
 8006670:	460d      	mov	r5, r1
 8006672:	f7fa fa91 	bl	8000b98 <__aeabi_d2iz>
 8006676:	2200      	movs	r2, #0
 8006678:	4607      	mov	r7, r0
 800667a:	2300      	movs	r3, #0
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	f7fa fa4c 	bl	8000b1c <__aeabi_dcmplt>
 8006684:	b140      	cbz	r0, 8006698 <_dtoa_r+0x168>
 8006686:	4638      	mov	r0, r7
 8006688:	f7f9 ff6c 	bl	8000564 <__aeabi_i2d>
 800668c:	4622      	mov	r2, r4
 800668e:	462b      	mov	r3, r5
 8006690:	f7fa fa3a 	bl	8000b08 <__aeabi_dcmpeq>
 8006694:	b900      	cbnz	r0, 8006698 <_dtoa_r+0x168>
 8006696:	3f01      	subs	r7, #1
 8006698:	2f16      	cmp	r7, #22
 800669a:	d851      	bhi.n	8006740 <_dtoa_r+0x210>
 800669c:	4b5b      	ldr	r3, [pc, #364]	@ (800680c <_dtoa_r+0x2dc>)
 800669e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066aa:	f7fa fa37 	bl	8000b1c <__aeabi_dcmplt>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d048      	beq.n	8006744 <_dtoa_r+0x214>
 80066b2:	3f01      	subs	r7, #1
 80066b4:	2300      	movs	r3, #0
 80066b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80066b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80066ba:	1b9b      	subs	r3, r3, r6
 80066bc:	1e5a      	subs	r2, r3, #1
 80066be:	bf44      	itt	mi
 80066c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80066c4:	2300      	movmi	r3, #0
 80066c6:	9208      	str	r2, [sp, #32]
 80066c8:	bf54      	ite	pl
 80066ca:	f04f 0800 	movpl.w	r8, #0
 80066ce:	9308      	strmi	r3, [sp, #32]
 80066d0:	2f00      	cmp	r7, #0
 80066d2:	db39      	blt.n	8006748 <_dtoa_r+0x218>
 80066d4:	9b08      	ldr	r3, [sp, #32]
 80066d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80066d8:	443b      	add	r3, r7
 80066da:	9308      	str	r3, [sp, #32]
 80066dc:	2300      	movs	r3, #0
 80066de:	930a      	str	r3, [sp, #40]	@ 0x28
 80066e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066e2:	2b09      	cmp	r3, #9
 80066e4:	d864      	bhi.n	80067b0 <_dtoa_r+0x280>
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	bfc4      	itt	gt
 80066ea:	3b04      	subgt	r3, #4
 80066ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80066ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066f0:	f1a3 0302 	sub.w	r3, r3, #2
 80066f4:	bfcc      	ite	gt
 80066f6:	2400      	movgt	r4, #0
 80066f8:	2401      	movle	r4, #1
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d863      	bhi.n	80067c6 <_dtoa_r+0x296>
 80066fe:	e8df f003 	tbb	[pc, r3]
 8006702:	372a      	.short	0x372a
 8006704:	5535      	.short	0x5535
 8006706:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800670a:	441e      	add	r6, r3
 800670c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006710:	2b20      	cmp	r3, #32
 8006712:	bfc1      	itttt	gt
 8006714:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006718:	409f      	lslgt	r7, r3
 800671a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800671e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006722:	bfd6      	itet	le
 8006724:	f1c3 0320 	rsble	r3, r3, #32
 8006728:	ea47 0003 	orrgt.w	r0, r7, r3
 800672c:	fa04 f003 	lslle.w	r0, r4, r3
 8006730:	f7f9 ff08 	bl	8000544 <__aeabi_ui2d>
 8006734:	2201      	movs	r2, #1
 8006736:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800673a:	3e01      	subs	r6, #1
 800673c:	9214      	str	r2, [sp, #80]	@ 0x50
 800673e:	e777      	b.n	8006630 <_dtoa_r+0x100>
 8006740:	2301      	movs	r3, #1
 8006742:	e7b8      	b.n	80066b6 <_dtoa_r+0x186>
 8006744:	9012      	str	r0, [sp, #72]	@ 0x48
 8006746:	e7b7      	b.n	80066b8 <_dtoa_r+0x188>
 8006748:	427b      	negs	r3, r7
 800674a:	930a      	str	r3, [sp, #40]	@ 0x28
 800674c:	2300      	movs	r3, #0
 800674e:	eba8 0807 	sub.w	r8, r8, r7
 8006752:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006754:	e7c4      	b.n	80066e0 <_dtoa_r+0x1b0>
 8006756:	2300      	movs	r3, #0
 8006758:	930b      	str	r3, [sp, #44]	@ 0x2c
 800675a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800675c:	2b00      	cmp	r3, #0
 800675e:	dc35      	bgt.n	80067cc <_dtoa_r+0x29c>
 8006760:	2301      	movs	r3, #1
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	9307      	str	r3, [sp, #28]
 8006766:	461a      	mov	r2, r3
 8006768:	920e      	str	r2, [sp, #56]	@ 0x38
 800676a:	e00b      	b.n	8006784 <_dtoa_r+0x254>
 800676c:	2301      	movs	r3, #1
 800676e:	e7f3      	b.n	8006758 <_dtoa_r+0x228>
 8006770:	2300      	movs	r3, #0
 8006772:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006774:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	3301      	adds	r3, #1
 800677c:	2b01      	cmp	r3, #1
 800677e:	9307      	str	r3, [sp, #28]
 8006780:	bfb8      	it	lt
 8006782:	2301      	movlt	r3, #1
 8006784:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006788:	2100      	movs	r1, #0
 800678a:	2204      	movs	r2, #4
 800678c:	f102 0514 	add.w	r5, r2, #20
 8006790:	429d      	cmp	r5, r3
 8006792:	d91f      	bls.n	80067d4 <_dtoa_r+0x2a4>
 8006794:	6041      	str	r1, [r0, #4]
 8006796:	4658      	mov	r0, fp
 8006798:	f000 fcd8 	bl	800714c <_Balloc>
 800679c:	4682      	mov	sl, r0
 800679e:	2800      	cmp	r0, #0
 80067a0:	d13c      	bne.n	800681c <_dtoa_r+0x2ec>
 80067a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006810 <_dtoa_r+0x2e0>)
 80067a4:	4602      	mov	r2, r0
 80067a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80067aa:	e6d8      	b.n	800655e <_dtoa_r+0x2e>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e7e0      	b.n	8006772 <_dtoa_r+0x242>
 80067b0:	2401      	movs	r4, #1
 80067b2:	2300      	movs	r3, #0
 80067b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80067b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80067b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	9307      	str	r3, [sp, #28]
 80067c0:	2200      	movs	r2, #0
 80067c2:	2312      	movs	r3, #18
 80067c4:	e7d0      	b.n	8006768 <_dtoa_r+0x238>
 80067c6:	2301      	movs	r3, #1
 80067c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067ca:	e7f5      	b.n	80067b8 <_dtoa_r+0x288>
 80067cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	9307      	str	r3, [sp, #28]
 80067d2:	e7d7      	b.n	8006784 <_dtoa_r+0x254>
 80067d4:	3101      	adds	r1, #1
 80067d6:	0052      	lsls	r2, r2, #1
 80067d8:	e7d8      	b.n	800678c <_dtoa_r+0x25c>
 80067da:	bf00      	nop
 80067dc:	f3af 8000 	nop.w
 80067e0:	636f4361 	.word	0x636f4361
 80067e4:	3fd287a7 	.word	0x3fd287a7
 80067e8:	8b60c8b3 	.word	0x8b60c8b3
 80067ec:	3fc68a28 	.word	0x3fc68a28
 80067f0:	509f79fb 	.word	0x509f79fb
 80067f4:	3fd34413 	.word	0x3fd34413
 80067f8:	08008a15 	.word	0x08008a15
 80067fc:	08008a2c 	.word	0x08008a2c
 8006800:	7ff00000 	.word	0x7ff00000
 8006804:	080089e5 	.word	0x080089e5
 8006808:	3ff80000 	.word	0x3ff80000
 800680c:	08008b28 	.word	0x08008b28
 8006810:	08008a84 	.word	0x08008a84
 8006814:	08008a11 	.word	0x08008a11
 8006818:	080089e4 	.word	0x080089e4
 800681c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006820:	6018      	str	r0, [r3, #0]
 8006822:	9b07      	ldr	r3, [sp, #28]
 8006824:	2b0e      	cmp	r3, #14
 8006826:	f200 80a4 	bhi.w	8006972 <_dtoa_r+0x442>
 800682a:	2c00      	cmp	r4, #0
 800682c:	f000 80a1 	beq.w	8006972 <_dtoa_r+0x442>
 8006830:	2f00      	cmp	r7, #0
 8006832:	dd33      	ble.n	800689c <_dtoa_r+0x36c>
 8006834:	4bad      	ldr	r3, [pc, #692]	@ (8006aec <_dtoa_r+0x5bc>)
 8006836:	f007 020f 	and.w	r2, r7, #15
 800683a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800683e:	ed93 7b00 	vldr	d7, [r3]
 8006842:	05f8      	lsls	r0, r7, #23
 8006844:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006848:	ea4f 1427 	mov.w	r4, r7, asr #4
 800684c:	d516      	bpl.n	800687c <_dtoa_r+0x34c>
 800684e:	4ba8      	ldr	r3, [pc, #672]	@ (8006af0 <_dtoa_r+0x5c0>)
 8006850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006854:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006858:	f7fa f818 	bl	800088c <__aeabi_ddiv>
 800685c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006860:	f004 040f 	and.w	r4, r4, #15
 8006864:	2603      	movs	r6, #3
 8006866:	4da2      	ldr	r5, [pc, #648]	@ (8006af0 <_dtoa_r+0x5c0>)
 8006868:	b954      	cbnz	r4, 8006880 <_dtoa_r+0x350>
 800686a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800686e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006872:	f7fa f80b 	bl	800088c <__aeabi_ddiv>
 8006876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800687a:	e028      	b.n	80068ce <_dtoa_r+0x39e>
 800687c:	2602      	movs	r6, #2
 800687e:	e7f2      	b.n	8006866 <_dtoa_r+0x336>
 8006880:	07e1      	lsls	r1, r4, #31
 8006882:	d508      	bpl.n	8006896 <_dtoa_r+0x366>
 8006884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006888:	e9d5 2300 	ldrd	r2, r3, [r5]
 800688c:	f7f9 fed4 	bl	8000638 <__aeabi_dmul>
 8006890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006894:	3601      	adds	r6, #1
 8006896:	1064      	asrs	r4, r4, #1
 8006898:	3508      	adds	r5, #8
 800689a:	e7e5      	b.n	8006868 <_dtoa_r+0x338>
 800689c:	f000 80d2 	beq.w	8006a44 <_dtoa_r+0x514>
 80068a0:	427c      	negs	r4, r7
 80068a2:	4b92      	ldr	r3, [pc, #584]	@ (8006aec <_dtoa_r+0x5bc>)
 80068a4:	4d92      	ldr	r5, [pc, #584]	@ (8006af0 <_dtoa_r+0x5c0>)
 80068a6:	f004 020f 	and.w	r2, r4, #15
 80068aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068b6:	f7f9 febf 	bl	8000638 <__aeabi_dmul>
 80068ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068be:	1124      	asrs	r4, r4, #4
 80068c0:	2300      	movs	r3, #0
 80068c2:	2602      	movs	r6, #2
 80068c4:	2c00      	cmp	r4, #0
 80068c6:	f040 80b2 	bne.w	8006a2e <_dtoa_r+0x4fe>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1d3      	bne.n	8006876 <_dtoa_r+0x346>
 80068ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80068d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 80b7 	beq.w	8006a48 <_dtoa_r+0x518>
 80068da:	4b86      	ldr	r3, [pc, #536]	@ (8006af4 <_dtoa_r+0x5c4>)
 80068dc:	2200      	movs	r2, #0
 80068de:	4620      	mov	r0, r4
 80068e0:	4629      	mov	r1, r5
 80068e2:	f7fa f91b 	bl	8000b1c <__aeabi_dcmplt>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f000 80ae 	beq.w	8006a48 <_dtoa_r+0x518>
 80068ec:	9b07      	ldr	r3, [sp, #28]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 80aa 	beq.w	8006a48 <_dtoa_r+0x518>
 80068f4:	9b00      	ldr	r3, [sp, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	dd37      	ble.n	800696a <_dtoa_r+0x43a>
 80068fa:	1e7b      	subs	r3, r7, #1
 80068fc:	9304      	str	r3, [sp, #16]
 80068fe:	4620      	mov	r0, r4
 8006900:	4b7d      	ldr	r3, [pc, #500]	@ (8006af8 <_dtoa_r+0x5c8>)
 8006902:	2200      	movs	r2, #0
 8006904:	4629      	mov	r1, r5
 8006906:	f7f9 fe97 	bl	8000638 <__aeabi_dmul>
 800690a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800690e:	9c00      	ldr	r4, [sp, #0]
 8006910:	3601      	adds	r6, #1
 8006912:	4630      	mov	r0, r6
 8006914:	f7f9 fe26 	bl	8000564 <__aeabi_i2d>
 8006918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800691c:	f7f9 fe8c 	bl	8000638 <__aeabi_dmul>
 8006920:	4b76      	ldr	r3, [pc, #472]	@ (8006afc <_dtoa_r+0x5cc>)
 8006922:	2200      	movs	r2, #0
 8006924:	f7f9 fcd2 	bl	80002cc <__adddf3>
 8006928:	4605      	mov	r5, r0
 800692a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800692e:	2c00      	cmp	r4, #0
 8006930:	f040 808d 	bne.w	8006a4e <_dtoa_r+0x51e>
 8006934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006938:	4b71      	ldr	r3, [pc, #452]	@ (8006b00 <_dtoa_r+0x5d0>)
 800693a:	2200      	movs	r2, #0
 800693c:	f7f9 fcc4 	bl	80002c8 <__aeabi_dsub>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006948:	462a      	mov	r2, r5
 800694a:	4633      	mov	r3, r6
 800694c:	f7fa f904 	bl	8000b58 <__aeabi_dcmpgt>
 8006950:	2800      	cmp	r0, #0
 8006952:	f040 828b 	bne.w	8006e6c <_dtoa_r+0x93c>
 8006956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800695a:	462a      	mov	r2, r5
 800695c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006960:	f7fa f8dc 	bl	8000b1c <__aeabi_dcmplt>
 8006964:	2800      	cmp	r0, #0
 8006966:	f040 8128 	bne.w	8006bba <_dtoa_r+0x68a>
 800696a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800696e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006972:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006974:	2b00      	cmp	r3, #0
 8006976:	f2c0 815a 	blt.w	8006c2e <_dtoa_r+0x6fe>
 800697a:	2f0e      	cmp	r7, #14
 800697c:	f300 8157 	bgt.w	8006c2e <_dtoa_r+0x6fe>
 8006980:	4b5a      	ldr	r3, [pc, #360]	@ (8006aec <_dtoa_r+0x5bc>)
 8006982:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006986:	ed93 7b00 	vldr	d7, [r3]
 800698a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800698c:	2b00      	cmp	r3, #0
 800698e:	ed8d 7b00 	vstr	d7, [sp]
 8006992:	da03      	bge.n	800699c <_dtoa_r+0x46c>
 8006994:	9b07      	ldr	r3, [sp, #28]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f340 8101 	ble.w	8006b9e <_dtoa_r+0x66e>
 800699c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80069a0:	4656      	mov	r6, sl
 80069a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069a6:	4620      	mov	r0, r4
 80069a8:	4629      	mov	r1, r5
 80069aa:	f7f9 ff6f 	bl	800088c <__aeabi_ddiv>
 80069ae:	f7fa f8f3 	bl	8000b98 <__aeabi_d2iz>
 80069b2:	4680      	mov	r8, r0
 80069b4:	f7f9 fdd6 	bl	8000564 <__aeabi_i2d>
 80069b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069bc:	f7f9 fe3c 	bl	8000638 <__aeabi_dmul>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4620      	mov	r0, r4
 80069c6:	4629      	mov	r1, r5
 80069c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069cc:	f7f9 fc7c 	bl	80002c8 <__aeabi_dsub>
 80069d0:	f806 4b01 	strb.w	r4, [r6], #1
 80069d4:	9d07      	ldr	r5, [sp, #28]
 80069d6:	eba6 040a 	sub.w	r4, r6, sl
 80069da:	42a5      	cmp	r5, r4
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	f040 8117 	bne.w	8006c12 <_dtoa_r+0x6e2>
 80069e4:	f7f9 fc72 	bl	80002cc <__adddf3>
 80069e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ec:	4604      	mov	r4, r0
 80069ee:	460d      	mov	r5, r1
 80069f0:	f7fa f8b2 	bl	8000b58 <__aeabi_dcmpgt>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	f040 80f9 	bne.w	8006bec <_dtoa_r+0x6bc>
 80069fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069fe:	4620      	mov	r0, r4
 8006a00:	4629      	mov	r1, r5
 8006a02:	f7fa f881 	bl	8000b08 <__aeabi_dcmpeq>
 8006a06:	b118      	cbz	r0, 8006a10 <_dtoa_r+0x4e0>
 8006a08:	f018 0f01 	tst.w	r8, #1
 8006a0c:	f040 80ee 	bne.w	8006bec <_dtoa_r+0x6bc>
 8006a10:	4649      	mov	r1, r9
 8006a12:	4658      	mov	r0, fp
 8006a14:	f000 fbda 	bl	80071cc <_Bfree>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	7033      	strb	r3, [r6, #0]
 8006a1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a1e:	3701      	adds	r7, #1
 8006a20:	601f      	str	r7, [r3, #0]
 8006a22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 831d 	beq.w	8007064 <_dtoa_r+0xb34>
 8006a2a:	601e      	str	r6, [r3, #0]
 8006a2c:	e31a      	b.n	8007064 <_dtoa_r+0xb34>
 8006a2e:	07e2      	lsls	r2, r4, #31
 8006a30:	d505      	bpl.n	8006a3e <_dtoa_r+0x50e>
 8006a32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a36:	f7f9 fdff 	bl	8000638 <__aeabi_dmul>
 8006a3a:	3601      	adds	r6, #1
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	1064      	asrs	r4, r4, #1
 8006a40:	3508      	adds	r5, #8
 8006a42:	e73f      	b.n	80068c4 <_dtoa_r+0x394>
 8006a44:	2602      	movs	r6, #2
 8006a46:	e742      	b.n	80068ce <_dtoa_r+0x39e>
 8006a48:	9c07      	ldr	r4, [sp, #28]
 8006a4a:	9704      	str	r7, [sp, #16]
 8006a4c:	e761      	b.n	8006912 <_dtoa_r+0x3e2>
 8006a4e:	4b27      	ldr	r3, [pc, #156]	@ (8006aec <_dtoa_r+0x5bc>)
 8006a50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a5a:	4454      	add	r4, sl
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	d053      	beq.n	8006b08 <_dtoa_r+0x5d8>
 8006a60:	4928      	ldr	r1, [pc, #160]	@ (8006b04 <_dtoa_r+0x5d4>)
 8006a62:	2000      	movs	r0, #0
 8006a64:	f7f9 ff12 	bl	800088c <__aeabi_ddiv>
 8006a68:	4633      	mov	r3, r6
 8006a6a:	462a      	mov	r2, r5
 8006a6c:	f7f9 fc2c 	bl	80002c8 <__aeabi_dsub>
 8006a70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a74:	4656      	mov	r6, sl
 8006a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a7a:	f7fa f88d 	bl	8000b98 <__aeabi_d2iz>
 8006a7e:	4605      	mov	r5, r0
 8006a80:	f7f9 fd70 	bl	8000564 <__aeabi_i2d>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a8c:	f7f9 fc1c 	bl	80002c8 <__aeabi_dsub>
 8006a90:	3530      	adds	r5, #48	@ 0x30
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a9a:	f806 5b01 	strb.w	r5, [r6], #1
 8006a9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006aa2:	f7fa f83b 	bl	8000b1c <__aeabi_dcmplt>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d171      	bne.n	8006b8e <_dtoa_r+0x65e>
 8006aaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aae:	4911      	ldr	r1, [pc, #68]	@ (8006af4 <_dtoa_r+0x5c4>)
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	f7f9 fc09 	bl	80002c8 <__aeabi_dsub>
 8006ab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006aba:	f7fa f82f 	bl	8000b1c <__aeabi_dcmplt>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f040 8095 	bne.w	8006bee <_dtoa_r+0x6be>
 8006ac4:	42a6      	cmp	r6, r4
 8006ac6:	f43f af50 	beq.w	800696a <_dtoa_r+0x43a>
 8006aca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ace:	4b0a      	ldr	r3, [pc, #40]	@ (8006af8 <_dtoa_r+0x5c8>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f7f9 fdb1 	bl	8000638 <__aeabi_dmul>
 8006ad6:	4b08      	ldr	r3, [pc, #32]	@ (8006af8 <_dtoa_r+0x5c8>)
 8006ad8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006adc:	2200      	movs	r2, #0
 8006ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ae2:	f7f9 fda9 	bl	8000638 <__aeabi_dmul>
 8006ae6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aea:	e7c4      	b.n	8006a76 <_dtoa_r+0x546>
 8006aec:	08008b28 	.word	0x08008b28
 8006af0:	08008b00 	.word	0x08008b00
 8006af4:	3ff00000 	.word	0x3ff00000
 8006af8:	40240000 	.word	0x40240000
 8006afc:	401c0000 	.word	0x401c0000
 8006b00:	40140000 	.word	0x40140000
 8006b04:	3fe00000 	.word	0x3fe00000
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f7f9 fd94 	bl	8000638 <__aeabi_dmul>
 8006b10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b14:	9415      	str	r4, [sp, #84]	@ 0x54
 8006b16:	4656      	mov	r6, sl
 8006b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b1c:	f7fa f83c 	bl	8000b98 <__aeabi_d2iz>
 8006b20:	4605      	mov	r5, r0
 8006b22:	f7f9 fd1f 	bl	8000564 <__aeabi_i2d>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b2e:	f7f9 fbcb 	bl	80002c8 <__aeabi_dsub>
 8006b32:	3530      	adds	r5, #48	@ 0x30
 8006b34:	f806 5b01 	strb.w	r5, [r6], #1
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	42a6      	cmp	r6, r4
 8006b3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b42:	f04f 0200 	mov.w	r2, #0
 8006b46:	d124      	bne.n	8006b92 <_dtoa_r+0x662>
 8006b48:	4bac      	ldr	r3, [pc, #688]	@ (8006dfc <_dtoa_r+0x8cc>)
 8006b4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b4e:	f7f9 fbbd 	bl	80002cc <__adddf3>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b5a:	f7f9 fffd 	bl	8000b58 <__aeabi_dcmpgt>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d145      	bne.n	8006bee <_dtoa_r+0x6be>
 8006b62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b66:	49a5      	ldr	r1, [pc, #660]	@ (8006dfc <_dtoa_r+0x8cc>)
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f7f9 fbad 	bl	80002c8 <__aeabi_dsub>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b76:	f7f9 ffd1 	bl	8000b1c <__aeabi_dcmplt>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	f43f aef5 	beq.w	800696a <_dtoa_r+0x43a>
 8006b80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006b82:	1e73      	subs	r3, r6, #1
 8006b84:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b8a:	2b30      	cmp	r3, #48	@ 0x30
 8006b8c:	d0f8      	beq.n	8006b80 <_dtoa_r+0x650>
 8006b8e:	9f04      	ldr	r7, [sp, #16]
 8006b90:	e73e      	b.n	8006a10 <_dtoa_r+0x4e0>
 8006b92:	4b9b      	ldr	r3, [pc, #620]	@ (8006e00 <_dtoa_r+0x8d0>)
 8006b94:	f7f9 fd50 	bl	8000638 <__aeabi_dmul>
 8006b98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b9c:	e7bc      	b.n	8006b18 <_dtoa_r+0x5e8>
 8006b9e:	d10c      	bne.n	8006bba <_dtoa_r+0x68a>
 8006ba0:	4b98      	ldr	r3, [pc, #608]	@ (8006e04 <_dtoa_r+0x8d4>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ba8:	f7f9 fd46 	bl	8000638 <__aeabi_dmul>
 8006bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bb0:	f7f9 ffc8 	bl	8000b44 <__aeabi_dcmpge>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	f000 8157 	beq.w	8006e68 <_dtoa_r+0x938>
 8006bba:	2400      	movs	r4, #0
 8006bbc:	4625      	mov	r5, r4
 8006bbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	9304      	str	r3, [sp, #16]
 8006bc4:	4656      	mov	r6, sl
 8006bc6:	2700      	movs	r7, #0
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4658      	mov	r0, fp
 8006bcc:	f000 fafe 	bl	80071cc <_Bfree>
 8006bd0:	2d00      	cmp	r5, #0
 8006bd2:	d0dc      	beq.n	8006b8e <_dtoa_r+0x65e>
 8006bd4:	b12f      	cbz	r7, 8006be2 <_dtoa_r+0x6b2>
 8006bd6:	42af      	cmp	r7, r5
 8006bd8:	d003      	beq.n	8006be2 <_dtoa_r+0x6b2>
 8006bda:	4639      	mov	r1, r7
 8006bdc:	4658      	mov	r0, fp
 8006bde:	f000 faf5 	bl	80071cc <_Bfree>
 8006be2:	4629      	mov	r1, r5
 8006be4:	4658      	mov	r0, fp
 8006be6:	f000 faf1 	bl	80071cc <_Bfree>
 8006bea:	e7d0      	b.n	8006b8e <_dtoa_r+0x65e>
 8006bec:	9704      	str	r7, [sp, #16]
 8006bee:	4633      	mov	r3, r6
 8006bf0:	461e      	mov	r6, r3
 8006bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bf6:	2a39      	cmp	r2, #57	@ 0x39
 8006bf8:	d107      	bne.n	8006c0a <_dtoa_r+0x6da>
 8006bfa:	459a      	cmp	sl, r3
 8006bfc:	d1f8      	bne.n	8006bf0 <_dtoa_r+0x6c0>
 8006bfe:	9a04      	ldr	r2, [sp, #16]
 8006c00:	3201      	adds	r2, #1
 8006c02:	9204      	str	r2, [sp, #16]
 8006c04:	2230      	movs	r2, #48	@ 0x30
 8006c06:	f88a 2000 	strb.w	r2, [sl]
 8006c0a:	781a      	ldrb	r2, [r3, #0]
 8006c0c:	3201      	adds	r2, #1
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	e7bd      	b.n	8006b8e <_dtoa_r+0x65e>
 8006c12:	4b7b      	ldr	r3, [pc, #492]	@ (8006e00 <_dtoa_r+0x8d0>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	f7f9 fd0f 	bl	8000638 <__aeabi_dmul>
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4604      	mov	r4, r0
 8006c20:	460d      	mov	r5, r1
 8006c22:	f7f9 ff71 	bl	8000b08 <__aeabi_dcmpeq>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f43f aebb 	beq.w	80069a2 <_dtoa_r+0x472>
 8006c2c:	e6f0      	b.n	8006a10 <_dtoa_r+0x4e0>
 8006c2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c30:	2a00      	cmp	r2, #0
 8006c32:	f000 80db 	beq.w	8006dec <_dtoa_r+0x8bc>
 8006c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c38:	2a01      	cmp	r2, #1
 8006c3a:	f300 80bf 	bgt.w	8006dbc <_dtoa_r+0x88c>
 8006c3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006c40:	2a00      	cmp	r2, #0
 8006c42:	f000 80b7 	beq.w	8006db4 <_dtoa_r+0x884>
 8006c46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c4c:	4646      	mov	r6, r8
 8006c4e:	9a08      	ldr	r2, [sp, #32]
 8006c50:	2101      	movs	r1, #1
 8006c52:	441a      	add	r2, r3
 8006c54:	4658      	mov	r0, fp
 8006c56:	4498      	add	r8, r3
 8006c58:	9208      	str	r2, [sp, #32]
 8006c5a:	f000 fb6b 	bl	8007334 <__i2b>
 8006c5e:	4605      	mov	r5, r0
 8006c60:	b15e      	cbz	r6, 8006c7a <_dtoa_r+0x74a>
 8006c62:	9b08      	ldr	r3, [sp, #32]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	dd08      	ble.n	8006c7a <_dtoa_r+0x74a>
 8006c68:	42b3      	cmp	r3, r6
 8006c6a:	9a08      	ldr	r2, [sp, #32]
 8006c6c:	bfa8      	it	ge
 8006c6e:	4633      	movge	r3, r6
 8006c70:	eba8 0803 	sub.w	r8, r8, r3
 8006c74:	1af6      	subs	r6, r6, r3
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	9308      	str	r3, [sp, #32]
 8006c7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c7c:	b1f3      	cbz	r3, 8006cbc <_dtoa_r+0x78c>
 8006c7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80b7 	beq.w	8006df4 <_dtoa_r+0x8c4>
 8006c86:	b18c      	cbz	r4, 8006cac <_dtoa_r+0x77c>
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	4658      	mov	r0, fp
 8006c8e:	f000 fc11 	bl	80074b4 <__pow5mult>
 8006c92:	464a      	mov	r2, r9
 8006c94:	4601      	mov	r1, r0
 8006c96:	4605      	mov	r5, r0
 8006c98:	4658      	mov	r0, fp
 8006c9a:	f000 fb61 	bl	8007360 <__multiply>
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	9004      	str	r0, [sp, #16]
 8006ca2:	4658      	mov	r0, fp
 8006ca4:	f000 fa92 	bl	80071cc <_Bfree>
 8006ca8:	9b04      	ldr	r3, [sp, #16]
 8006caa:	4699      	mov	r9, r3
 8006cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cae:	1b1a      	subs	r2, r3, r4
 8006cb0:	d004      	beq.n	8006cbc <_dtoa_r+0x78c>
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	4658      	mov	r0, fp
 8006cb6:	f000 fbfd 	bl	80074b4 <__pow5mult>
 8006cba:	4681      	mov	r9, r0
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	4658      	mov	r0, fp
 8006cc0:	f000 fb38 	bl	8007334 <__i2b>
 8006cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 81cf 	beq.w	800706c <_dtoa_r+0xb3c>
 8006cce:	461a      	mov	r2, r3
 8006cd0:	4601      	mov	r1, r0
 8006cd2:	4658      	mov	r0, fp
 8006cd4:	f000 fbee 	bl	80074b4 <__pow5mult>
 8006cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	4604      	mov	r4, r0
 8006cde:	f300 8095 	bgt.w	8006e0c <_dtoa_r+0x8dc>
 8006ce2:	9b02      	ldr	r3, [sp, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f040 8087 	bne.w	8006df8 <_dtoa_r+0x8c8>
 8006cea:	9b03      	ldr	r3, [sp, #12]
 8006cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f040 8089 	bne.w	8006e08 <_dtoa_r+0x8d8>
 8006cf6:	9b03      	ldr	r3, [sp, #12]
 8006cf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cfc:	0d1b      	lsrs	r3, r3, #20
 8006cfe:	051b      	lsls	r3, r3, #20
 8006d00:	b12b      	cbz	r3, 8006d0e <_dtoa_r+0x7de>
 8006d02:	9b08      	ldr	r3, [sp, #32]
 8006d04:	3301      	adds	r3, #1
 8006d06:	9308      	str	r3, [sp, #32]
 8006d08:	f108 0801 	add.w	r8, r8, #1
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 81b0 	beq.w	8007078 <_dtoa_r+0xb48>
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d1e:	6918      	ldr	r0, [r3, #16]
 8006d20:	f000 fabc 	bl	800729c <__hi0bits>
 8006d24:	f1c0 0020 	rsb	r0, r0, #32
 8006d28:	9b08      	ldr	r3, [sp, #32]
 8006d2a:	4418      	add	r0, r3
 8006d2c:	f010 001f 	ands.w	r0, r0, #31
 8006d30:	d077      	beq.n	8006e22 <_dtoa_r+0x8f2>
 8006d32:	f1c0 0320 	rsb	r3, r0, #32
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	dd6b      	ble.n	8006e12 <_dtoa_r+0x8e2>
 8006d3a:	9b08      	ldr	r3, [sp, #32]
 8006d3c:	f1c0 001c 	rsb	r0, r0, #28
 8006d40:	4403      	add	r3, r0
 8006d42:	4480      	add	r8, r0
 8006d44:	4406      	add	r6, r0
 8006d46:	9308      	str	r3, [sp, #32]
 8006d48:	f1b8 0f00 	cmp.w	r8, #0
 8006d4c:	dd05      	ble.n	8006d5a <_dtoa_r+0x82a>
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4642      	mov	r2, r8
 8006d52:	4658      	mov	r0, fp
 8006d54:	f000 fc08 	bl	8007568 <__lshift>
 8006d58:	4681      	mov	r9, r0
 8006d5a:	9b08      	ldr	r3, [sp, #32]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	dd05      	ble.n	8006d6c <_dtoa_r+0x83c>
 8006d60:	4621      	mov	r1, r4
 8006d62:	461a      	mov	r2, r3
 8006d64:	4658      	mov	r0, fp
 8006d66:	f000 fbff 	bl	8007568 <__lshift>
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d059      	beq.n	8006e26 <_dtoa_r+0x8f6>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4648      	mov	r0, r9
 8006d76:	f000 fc63 	bl	8007640 <__mcmp>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	da53      	bge.n	8006e26 <_dtoa_r+0x8f6>
 8006d7e:	1e7b      	subs	r3, r7, #1
 8006d80:	9304      	str	r3, [sp, #16]
 8006d82:	4649      	mov	r1, r9
 8006d84:	2300      	movs	r3, #0
 8006d86:	220a      	movs	r2, #10
 8006d88:	4658      	mov	r0, fp
 8006d8a:	f000 fa41 	bl	8007210 <__multadd>
 8006d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d90:	4681      	mov	r9, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 8172 	beq.w	800707c <_dtoa_r+0xb4c>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	220a      	movs	r2, #10
 8006d9e:	4658      	mov	r0, fp
 8006da0:	f000 fa36 	bl	8007210 <__multadd>
 8006da4:	9b00      	ldr	r3, [sp, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	4605      	mov	r5, r0
 8006daa:	dc67      	bgt.n	8006e7c <_dtoa_r+0x94c>
 8006dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	dc41      	bgt.n	8006e36 <_dtoa_r+0x906>
 8006db2:	e063      	b.n	8006e7c <_dtoa_r+0x94c>
 8006db4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006db6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006dba:	e746      	b.n	8006c4a <_dtoa_r+0x71a>
 8006dbc:	9b07      	ldr	r3, [sp, #28]
 8006dbe:	1e5c      	subs	r4, r3, #1
 8006dc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	bfbf      	itttt	lt
 8006dc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006dc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006dca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006dcc:	1ae3      	sublt	r3, r4, r3
 8006dce:	bfb4      	ite	lt
 8006dd0:	18d2      	addlt	r2, r2, r3
 8006dd2:	1b1c      	subge	r4, r3, r4
 8006dd4:	9b07      	ldr	r3, [sp, #28]
 8006dd6:	bfbc      	itt	lt
 8006dd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006dda:	2400      	movlt	r4, #0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bfb5      	itete	lt
 8006de0:	eba8 0603 	sublt.w	r6, r8, r3
 8006de4:	9b07      	ldrge	r3, [sp, #28]
 8006de6:	2300      	movlt	r3, #0
 8006de8:	4646      	movge	r6, r8
 8006dea:	e730      	b.n	8006c4e <_dtoa_r+0x71e>
 8006dec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006dee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006df0:	4646      	mov	r6, r8
 8006df2:	e735      	b.n	8006c60 <_dtoa_r+0x730>
 8006df4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006df6:	e75c      	b.n	8006cb2 <_dtoa_r+0x782>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e788      	b.n	8006d0e <_dtoa_r+0x7de>
 8006dfc:	3fe00000 	.word	0x3fe00000
 8006e00:	40240000 	.word	0x40240000
 8006e04:	40140000 	.word	0x40140000
 8006e08:	9b02      	ldr	r3, [sp, #8]
 8006e0a:	e780      	b.n	8006d0e <_dtoa_r+0x7de>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e10:	e782      	b.n	8006d18 <_dtoa_r+0x7e8>
 8006e12:	d099      	beq.n	8006d48 <_dtoa_r+0x818>
 8006e14:	9a08      	ldr	r2, [sp, #32]
 8006e16:	331c      	adds	r3, #28
 8006e18:	441a      	add	r2, r3
 8006e1a:	4498      	add	r8, r3
 8006e1c:	441e      	add	r6, r3
 8006e1e:	9208      	str	r2, [sp, #32]
 8006e20:	e792      	b.n	8006d48 <_dtoa_r+0x818>
 8006e22:	4603      	mov	r3, r0
 8006e24:	e7f6      	b.n	8006e14 <_dtoa_r+0x8e4>
 8006e26:	9b07      	ldr	r3, [sp, #28]
 8006e28:	9704      	str	r7, [sp, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	dc20      	bgt.n	8006e70 <_dtoa_r+0x940>
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	dd1e      	ble.n	8006e74 <_dtoa_r+0x944>
 8006e36:	9b00      	ldr	r3, [sp, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f47f aec0 	bne.w	8006bbe <_dtoa_r+0x68e>
 8006e3e:	4621      	mov	r1, r4
 8006e40:	2205      	movs	r2, #5
 8006e42:	4658      	mov	r0, fp
 8006e44:	f000 f9e4 	bl	8007210 <__multadd>
 8006e48:	4601      	mov	r1, r0
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	4648      	mov	r0, r9
 8006e4e:	f000 fbf7 	bl	8007640 <__mcmp>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	f77f aeb3 	ble.w	8006bbe <_dtoa_r+0x68e>
 8006e58:	4656      	mov	r6, sl
 8006e5a:	2331      	movs	r3, #49	@ 0x31
 8006e5c:	f806 3b01 	strb.w	r3, [r6], #1
 8006e60:	9b04      	ldr	r3, [sp, #16]
 8006e62:	3301      	adds	r3, #1
 8006e64:	9304      	str	r3, [sp, #16]
 8006e66:	e6ae      	b.n	8006bc6 <_dtoa_r+0x696>
 8006e68:	9c07      	ldr	r4, [sp, #28]
 8006e6a:	9704      	str	r7, [sp, #16]
 8006e6c:	4625      	mov	r5, r4
 8006e6e:	e7f3      	b.n	8006e58 <_dtoa_r+0x928>
 8006e70:	9b07      	ldr	r3, [sp, #28]
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 8104 	beq.w	8007084 <_dtoa_r+0xb54>
 8006e7c:	2e00      	cmp	r6, #0
 8006e7e:	dd05      	ble.n	8006e8c <_dtoa_r+0x95c>
 8006e80:	4629      	mov	r1, r5
 8006e82:	4632      	mov	r2, r6
 8006e84:	4658      	mov	r0, fp
 8006e86:	f000 fb6f 	bl	8007568 <__lshift>
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d05a      	beq.n	8006f48 <_dtoa_r+0xa18>
 8006e92:	6869      	ldr	r1, [r5, #4]
 8006e94:	4658      	mov	r0, fp
 8006e96:	f000 f959 	bl	800714c <_Balloc>
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	b928      	cbnz	r0, 8006eaa <_dtoa_r+0x97a>
 8006e9e:	4b84      	ldr	r3, [pc, #528]	@ (80070b0 <_dtoa_r+0xb80>)
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006ea6:	f7ff bb5a 	b.w	800655e <_dtoa_r+0x2e>
 8006eaa:	692a      	ldr	r2, [r5, #16]
 8006eac:	3202      	adds	r2, #2
 8006eae:	0092      	lsls	r2, r2, #2
 8006eb0:	f105 010c 	add.w	r1, r5, #12
 8006eb4:	300c      	adds	r0, #12
 8006eb6:	f7ff faa2 	bl	80063fe <memcpy>
 8006eba:	2201      	movs	r2, #1
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4658      	mov	r0, fp
 8006ec0:	f000 fb52 	bl	8007568 <__lshift>
 8006ec4:	f10a 0301 	add.w	r3, sl, #1
 8006ec8:	9307      	str	r3, [sp, #28]
 8006eca:	9b00      	ldr	r3, [sp, #0]
 8006ecc:	4453      	add	r3, sl
 8006ece:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ed0:	9b02      	ldr	r3, [sp, #8]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	462f      	mov	r7, r5
 8006ed8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eda:	4605      	mov	r5, r0
 8006edc:	9b07      	ldr	r3, [sp, #28]
 8006ede:	4621      	mov	r1, r4
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	4648      	mov	r0, r9
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	f7ff fa98 	bl	800641a <quorem>
 8006eea:	4639      	mov	r1, r7
 8006eec:	9002      	str	r0, [sp, #8]
 8006eee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ef2:	4648      	mov	r0, r9
 8006ef4:	f000 fba4 	bl	8007640 <__mcmp>
 8006ef8:	462a      	mov	r2, r5
 8006efa:	9008      	str	r0, [sp, #32]
 8006efc:	4621      	mov	r1, r4
 8006efe:	4658      	mov	r0, fp
 8006f00:	f000 fbba 	bl	8007678 <__mdiff>
 8006f04:	68c2      	ldr	r2, [r0, #12]
 8006f06:	4606      	mov	r6, r0
 8006f08:	bb02      	cbnz	r2, 8006f4c <_dtoa_r+0xa1c>
 8006f0a:	4601      	mov	r1, r0
 8006f0c:	4648      	mov	r0, r9
 8006f0e:	f000 fb97 	bl	8007640 <__mcmp>
 8006f12:	4602      	mov	r2, r0
 8006f14:	4631      	mov	r1, r6
 8006f16:	4658      	mov	r0, fp
 8006f18:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f1a:	f000 f957 	bl	80071cc <_Bfree>
 8006f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f22:	9e07      	ldr	r6, [sp, #28]
 8006f24:	ea43 0102 	orr.w	r1, r3, r2
 8006f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f2a:	4319      	orrs	r1, r3
 8006f2c:	d110      	bne.n	8006f50 <_dtoa_r+0xa20>
 8006f2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f32:	d029      	beq.n	8006f88 <_dtoa_r+0xa58>
 8006f34:	9b08      	ldr	r3, [sp, #32]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	dd02      	ble.n	8006f40 <_dtoa_r+0xa10>
 8006f3a:	9b02      	ldr	r3, [sp, #8]
 8006f3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f40:	9b00      	ldr	r3, [sp, #0]
 8006f42:	f883 8000 	strb.w	r8, [r3]
 8006f46:	e63f      	b.n	8006bc8 <_dtoa_r+0x698>
 8006f48:	4628      	mov	r0, r5
 8006f4a:	e7bb      	b.n	8006ec4 <_dtoa_r+0x994>
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	e7e1      	b.n	8006f14 <_dtoa_r+0x9e4>
 8006f50:	9b08      	ldr	r3, [sp, #32]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	db04      	blt.n	8006f60 <_dtoa_r+0xa30>
 8006f56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	d120      	bne.n	8006fa2 <_dtoa_r+0xa72>
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	dded      	ble.n	8006f40 <_dtoa_r+0xa10>
 8006f64:	4649      	mov	r1, r9
 8006f66:	2201      	movs	r2, #1
 8006f68:	4658      	mov	r0, fp
 8006f6a:	f000 fafd 	bl	8007568 <__lshift>
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4681      	mov	r9, r0
 8006f72:	f000 fb65 	bl	8007640 <__mcmp>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	dc03      	bgt.n	8006f82 <_dtoa_r+0xa52>
 8006f7a:	d1e1      	bne.n	8006f40 <_dtoa_r+0xa10>
 8006f7c:	f018 0f01 	tst.w	r8, #1
 8006f80:	d0de      	beq.n	8006f40 <_dtoa_r+0xa10>
 8006f82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f86:	d1d8      	bne.n	8006f3a <_dtoa_r+0xa0a>
 8006f88:	9a00      	ldr	r2, [sp, #0]
 8006f8a:	2339      	movs	r3, #57	@ 0x39
 8006f8c:	7013      	strb	r3, [r2, #0]
 8006f8e:	4633      	mov	r3, r6
 8006f90:	461e      	mov	r6, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f98:	2a39      	cmp	r2, #57	@ 0x39
 8006f9a:	d052      	beq.n	8007042 <_dtoa_r+0xb12>
 8006f9c:	3201      	adds	r2, #1
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	e612      	b.n	8006bc8 <_dtoa_r+0x698>
 8006fa2:	2a00      	cmp	r2, #0
 8006fa4:	dd07      	ble.n	8006fb6 <_dtoa_r+0xa86>
 8006fa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006faa:	d0ed      	beq.n	8006f88 <_dtoa_r+0xa58>
 8006fac:	9a00      	ldr	r2, [sp, #0]
 8006fae:	f108 0301 	add.w	r3, r8, #1
 8006fb2:	7013      	strb	r3, [r2, #0]
 8006fb4:	e608      	b.n	8006bc8 <_dtoa_r+0x698>
 8006fb6:	9b07      	ldr	r3, [sp, #28]
 8006fb8:	9a07      	ldr	r2, [sp, #28]
 8006fba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006fbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d028      	beq.n	8007016 <_dtoa_r+0xae6>
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	220a      	movs	r2, #10
 8006fca:	4658      	mov	r0, fp
 8006fcc:	f000 f920 	bl	8007210 <__multadd>
 8006fd0:	42af      	cmp	r7, r5
 8006fd2:	4681      	mov	r9, r0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	f04f 020a 	mov.w	r2, #10
 8006fdc:	4639      	mov	r1, r7
 8006fde:	4658      	mov	r0, fp
 8006fe0:	d107      	bne.n	8006ff2 <_dtoa_r+0xac2>
 8006fe2:	f000 f915 	bl	8007210 <__multadd>
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	4605      	mov	r5, r0
 8006fea:	9b07      	ldr	r3, [sp, #28]
 8006fec:	3301      	adds	r3, #1
 8006fee:	9307      	str	r3, [sp, #28]
 8006ff0:	e774      	b.n	8006edc <_dtoa_r+0x9ac>
 8006ff2:	f000 f90d 	bl	8007210 <__multadd>
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	4607      	mov	r7, r0
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	220a      	movs	r2, #10
 8006ffe:	4658      	mov	r0, fp
 8007000:	f000 f906 	bl	8007210 <__multadd>
 8007004:	4605      	mov	r5, r0
 8007006:	e7f0      	b.n	8006fea <_dtoa_r+0xaba>
 8007008:	9b00      	ldr	r3, [sp, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	bfcc      	ite	gt
 800700e:	461e      	movgt	r6, r3
 8007010:	2601      	movle	r6, #1
 8007012:	4456      	add	r6, sl
 8007014:	2700      	movs	r7, #0
 8007016:	4649      	mov	r1, r9
 8007018:	2201      	movs	r2, #1
 800701a:	4658      	mov	r0, fp
 800701c:	f000 faa4 	bl	8007568 <__lshift>
 8007020:	4621      	mov	r1, r4
 8007022:	4681      	mov	r9, r0
 8007024:	f000 fb0c 	bl	8007640 <__mcmp>
 8007028:	2800      	cmp	r0, #0
 800702a:	dcb0      	bgt.n	8006f8e <_dtoa_r+0xa5e>
 800702c:	d102      	bne.n	8007034 <_dtoa_r+0xb04>
 800702e:	f018 0f01 	tst.w	r8, #1
 8007032:	d1ac      	bne.n	8006f8e <_dtoa_r+0xa5e>
 8007034:	4633      	mov	r3, r6
 8007036:	461e      	mov	r6, r3
 8007038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800703c:	2a30      	cmp	r2, #48	@ 0x30
 800703e:	d0fa      	beq.n	8007036 <_dtoa_r+0xb06>
 8007040:	e5c2      	b.n	8006bc8 <_dtoa_r+0x698>
 8007042:	459a      	cmp	sl, r3
 8007044:	d1a4      	bne.n	8006f90 <_dtoa_r+0xa60>
 8007046:	9b04      	ldr	r3, [sp, #16]
 8007048:	3301      	adds	r3, #1
 800704a:	9304      	str	r3, [sp, #16]
 800704c:	2331      	movs	r3, #49	@ 0x31
 800704e:	f88a 3000 	strb.w	r3, [sl]
 8007052:	e5b9      	b.n	8006bc8 <_dtoa_r+0x698>
 8007054:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007056:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80070b4 <_dtoa_r+0xb84>
 800705a:	b11b      	cbz	r3, 8007064 <_dtoa_r+0xb34>
 800705c:	f10a 0308 	add.w	r3, sl, #8
 8007060:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	4650      	mov	r0, sl
 8007066:	b019      	add	sp, #100	@ 0x64
 8007068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800706e:	2b01      	cmp	r3, #1
 8007070:	f77f ae37 	ble.w	8006ce2 <_dtoa_r+0x7b2>
 8007074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007076:	930a      	str	r3, [sp, #40]	@ 0x28
 8007078:	2001      	movs	r0, #1
 800707a:	e655      	b.n	8006d28 <_dtoa_r+0x7f8>
 800707c:	9b00      	ldr	r3, [sp, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	f77f aed6 	ble.w	8006e30 <_dtoa_r+0x900>
 8007084:	4656      	mov	r6, sl
 8007086:	4621      	mov	r1, r4
 8007088:	4648      	mov	r0, r9
 800708a:	f7ff f9c6 	bl	800641a <quorem>
 800708e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007092:	f806 8b01 	strb.w	r8, [r6], #1
 8007096:	9b00      	ldr	r3, [sp, #0]
 8007098:	eba6 020a 	sub.w	r2, r6, sl
 800709c:	4293      	cmp	r3, r2
 800709e:	ddb3      	ble.n	8007008 <_dtoa_r+0xad8>
 80070a0:	4649      	mov	r1, r9
 80070a2:	2300      	movs	r3, #0
 80070a4:	220a      	movs	r2, #10
 80070a6:	4658      	mov	r0, fp
 80070a8:	f000 f8b2 	bl	8007210 <__multadd>
 80070ac:	4681      	mov	r9, r0
 80070ae:	e7ea      	b.n	8007086 <_dtoa_r+0xb56>
 80070b0:	08008a84 	.word	0x08008a84
 80070b4:	08008a08 	.word	0x08008a08

080070b8 <_free_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4605      	mov	r5, r0
 80070bc:	2900      	cmp	r1, #0
 80070be:	d041      	beq.n	8007144 <_free_r+0x8c>
 80070c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c4:	1f0c      	subs	r4, r1, #4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bfb8      	it	lt
 80070ca:	18e4      	addlt	r4, r4, r3
 80070cc:	f7fe fa4c 	bl	8005568 <__malloc_lock>
 80070d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007148 <_free_r+0x90>)
 80070d2:	6813      	ldr	r3, [r2, #0]
 80070d4:	b933      	cbnz	r3, 80070e4 <_free_r+0x2c>
 80070d6:	6063      	str	r3, [r4, #4]
 80070d8:	6014      	str	r4, [r2, #0]
 80070da:	4628      	mov	r0, r5
 80070dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e0:	f7fe ba48 	b.w	8005574 <__malloc_unlock>
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	d908      	bls.n	80070fa <_free_r+0x42>
 80070e8:	6820      	ldr	r0, [r4, #0]
 80070ea:	1821      	adds	r1, r4, r0
 80070ec:	428b      	cmp	r3, r1
 80070ee:	bf01      	itttt	eq
 80070f0:	6819      	ldreq	r1, [r3, #0]
 80070f2:	685b      	ldreq	r3, [r3, #4]
 80070f4:	1809      	addeq	r1, r1, r0
 80070f6:	6021      	streq	r1, [r4, #0]
 80070f8:	e7ed      	b.n	80070d6 <_free_r+0x1e>
 80070fa:	461a      	mov	r2, r3
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	b10b      	cbz	r3, 8007104 <_free_r+0x4c>
 8007100:	42a3      	cmp	r3, r4
 8007102:	d9fa      	bls.n	80070fa <_free_r+0x42>
 8007104:	6811      	ldr	r1, [r2, #0]
 8007106:	1850      	adds	r0, r2, r1
 8007108:	42a0      	cmp	r0, r4
 800710a:	d10b      	bne.n	8007124 <_free_r+0x6c>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	4401      	add	r1, r0
 8007110:	1850      	adds	r0, r2, r1
 8007112:	4283      	cmp	r3, r0
 8007114:	6011      	str	r1, [r2, #0]
 8007116:	d1e0      	bne.n	80070da <_free_r+0x22>
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	6053      	str	r3, [r2, #4]
 800711e:	4408      	add	r0, r1
 8007120:	6010      	str	r0, [r2, #0]
 8007122:	e7da      	b.n	80070da <_free_r+0x22>
 8007124:	d902      	bls.n	800712c <_free_r+0x74>
 8007126:	230c      	movs	r3, #12
 8007128:	602b      	str	r3, [r5, #0]
 800712a:	e7d6      	b.n	80070da <_free_r+0x22>
 800712c:	6820      	ldr	r0, [r4, #0]
 800712e:	1821      	adds	r1, r4, r0
 8007130:	428b      	cmp	r3, r1
 8007132:	bf04      	itt	eq
 8007134:	6819      	ldreq	r1, [r3, #0]
 8007136:	685b      	ldreq	r3, [r3, #4]
 8007138:	6063      	str	r3, [r4, #4]
 800713a:	bf04      	itt	eq
 800713c:	1809      	addeq	r1, r1, r0
 800713e:	6021      	streq	r1, [r4, #0]
 8007140:	6054      	str	r4, [r2, #4]
 8007142:	e7ca      	b.n	80070da <_free_r+0x22>
 8007144:	bd38      	pop	{r3, r4, r5, pc}
 8007146:	bf00      	nop
 8007148:	20000a5c 	.word	0x20000a5c

0800714c <_Balloc>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	69c6      	ldr	r6, [r0, #28]
 8007150:	4604      	mov	r4, r0
 8007152:	460d      	mov	r5, r1
 8007154:	b976      	cbnz	r6, 8007174 <_Balloc+0x28>
 8007156:	2010      	movs	r0, #16
 8007158:	f7fe f95c 	bl	8005414 <malloc>
 800715c:	4602      	mov	r2, r0
 800715e:	61e0      	str	r0, [r4, #28]
 8007160:	b920      	cbnz	r0, 800716c <_Balloc+0x20>
 8007162:	4b18      	ldr	r3, [pc, #96]	@ (80071c4 <_Balloc+0x78>)
 8007164:	4818      	ldr	r0, [pc, #96]	@ (80071c8 <_Balloc+0x7c>)
 8007166:	216b      	movs	r1, #107	@ 0x6b
 8007168:	f000 ff5e 	bl	8008028 <__assert_func>
 800716c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007170:	6006      	str	r6, [r0, #0]
 8007172:	60c6      	str	r6, [r0, #12]
 8007174:	69e6      	ldr	r6, [r4, #28]
 8007176:	68f3      	ldr	r3, [r6, #12]
 8007178:	b183      	cbz	r3, 800719c <_Balloc+0x50>
 800717a:	69e3      	ldr	r3, [r4, #28]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007182:	b9b8      	cbnz	r0, 80071b4 <_Balloc+0x68>
 8007184:	2101      	movs	r1, #1
 8007186:	fa01 f605 	lsl.w	r6, r1, r5
 800718a:	1d72      	adds	r2, r6, #5
 800718c:	0092      	lsls	r2, r2, #2
 800718e:	4620      	mov	r0, r4
 8007190:	f000 ff68 	bl	8008064 <_calloc_r>
 8007194:	b160      	cbz	r0, 80071b0 <_Balloc+0x64>
 8007196:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800719a:	e00e      	b.n	80071ba <_Balloc+0x6e>
 800719c:	2221      	movs	r2, #33	@ 0x21
 800719e:	2104      	movs	r1, #4
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 ff5f 	bl	8008064 <_calloc_r>
 80071a6:	69e3      	ldr	r3, [r4, #28]
 80071a8:	60f0      	str	r0, [r6, #12]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e4      	bne.n	800717a <_Balloc+0x2e>
 80071b0:	2000      	movs	r0, #0
 80071b2:	bd70      	pop	{r4, r5, r6, pc}
 80071b4:	6802      	ldr	r2, [r0, #0]
 80071b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071ba:	2300      	movs	r3, #0
 80071bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071c0:	e7f7      	b.n	80071b2 <_Balloc+0x66>
 80071c2:	bf00      	nop
 80071c4:	08008a15 	.word	0x08008a15
 80071c8:	08008a95 	.word	0x08008a95

080071cc <_Bfree>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	69c6      	ldr	r6, [r0, #28]
 80071d0:	4605      	mov	r5, r0
 80071d2:	460c      	mov	r4, r1
 80071d4:	b976      	cbnz	r6, 80071f4 <_Bfree+0x28>
 80071d6:	2010      	movs	r0, #16
 80071d8:	f7fe f91c 	bl	8005414 <malloc>
 80071dc:	4602      	mov	r2, r0
 80071de:	61e8      	str	r0, [r5, #28]
 80071e0:	b920      	cbnz	r0, 80071ec <_Bfree+0x20>
 80071e2:	4b09      	ldr	r3, [pc, #36]	@ (8007208 <_Bfree+0x3c>)
 80071e4:	4809      	ldr	r0, [pc, #36]	@ (800720c <_Bfree+0x40>)
 80071e6:	218f      	movs	r1, #143	@ 0x8f
 80071e8:	f000 ff1e 	bl	8008028 <__assert_func>
 80071ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071f0:	6006      	str	r6, [r0, #0]
 80071f2:	60c6      	str	r6, [r0, #12]
 80071f4:	b13c      	cbz	r4, 8007206 <_Bfree+0x3a>
 80071f6:	69eb      	ldr	r3, [r5, #28]
 80071f8:	6862      	ldr	r2, [r4, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007200:	6021      	str	r1, [r4, #0]
 8007202:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	08008a15 	.word	0x08008a15
 800720c:	08008a95 	.word	0x08008a95

08007210 <__multadd>:
 8007210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007214:	690d      	ldr	r5, [r1, #16]
 8007216:	4607      	mov	r7, r0
 8007218:	460c      	mov	r4, r1
 800721a:	461e      	mov	r6, r3
 800721c:	f101 0c14 	add.w	ip, r1, #20
 8007220:	2000      	movs	r0, #0
 8007222:	f8dc 3000 	ldr.w	r3, [ip]
 8007226:	b299      	uxth	r1, r3
 8007228:	fb02 6101 	mla	r1, r2, r1, r6
 800722c:	0c1e      	lsrs	r6, r3, #16
 800722e:	0c0b      	lsrs	r3, r1, #16
 8007230:	fb02 3306 	mla	r3, r2, r6, r3
 8007234:	b289      	uxth	r1, r1
 8007236:	3001      	adds	r0, #1
 8007238:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800723c:	4285      	cmp	r5, r0
 800723e:	f84c 1b04 	str.w	r1, [ip], #4
 8007242:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007246:	dcec      	bgt.n	8007222 <__multadd+0x12>
 8007248:	b30e      	cbz	r6, 800728e <__multadd+0x7e>
 800724a:	68a3      	ldr	r3, [r4, #8]
 800724c:	42ab      	cmp	r3, r5
 800724e:	dc19      	bgt.n	8007284 <__multadd+0x74>
 8007250:	6861      	ldr	r1, [r4, #4]
 8007252:	4638      	mov	r0, r7
 8007254:	3101      	adds	r1, #1
 8007256:	f7ff ff79 	bl	800714c <_Balloc>
 800725a:	4680      	mov	r8, r0
 800725c:	b928      	cbnz	r0, 800726a <__multadd+0x5a>
 800725e:	4602      	mov	r2, r0
 8007260:	4b0c      	ldr	r3, [pc, #48]	@ (8007294 <__multadd+0x84>)
 8007262:	480d      	ldr	r0, [pc, #52]	@ (8007298 <__multadd+0x88>)
 8007264:	21ba      	movs	r1, #186	@ 0xba
 8007266:	f000 fedf 	bl	8008028 <__assert_func>
 800726a:	6922      	ldr	r2, [r4, #16]
 800726c:	3202      	adds	r2, #2
 800726e:	f104 010c 	add.w	r1, r4, #12
 8007272:	0092      	lsls	r2, r2, #2
 8007274:	300c      	adds	r0, #12
 8007276:	f7ff f8c2 	bl	80063fe <memcpy>
 800727a:	4621      	mov	r1, r4
 800727c:	4638      	mov	r0, r7
 800727e:	f7ff ffa5 	bl	80071cc <_Bfree>
 8007282:	4644      	mov	r4, r8
 8007284:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007288:	3501      	adds	r5, #1
 800728a:	615e      	str	r6, [r3, #20]
 800728c:	6125      	str	r5, [r4, #16]
 800728e:	4620      	mov	r0, r4
 8007290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007294:	08008a84 	.word	0x08008a84
 8007298:	08008a95 	.word	0x08008a95

0800729c <__hi0bits>:
 800729c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80072a0:	4603      	mov	r3, r0
 80072a2:	bf36      	itet	cc
 80072a4:	0403      	lslcc	r3, r0, #16
 80072a6:	2000      	movcs	r0, #0
 80072a8:	2010      	movcc	r0, #16
 80072aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072ae:	bf3c      	itt	cc
 80072b0:	021b      	lslcc	r3, r3, #8
 80072b2:	3008      	addcc	r0, #8
 80072b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072b8:	bf3c      	itt	cc
 80072ba:	011b      	lslcc	r3, r3, #4
 80072bc:	3004      	addcc	r0, #4
 80072be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c2:	bf3c      	itt	cc
 80072c4:	009b      	lslcc	r3, r3, #2
 80072c6:	3002      	addcc	r0, #2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	db05      	blt.n	80072d8 <__hi0bits+0x3c>
 80072cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80072d0:	f100 0001 	add.w	r0, r0, #1
 80072d4:	bf08      	it	eq
 80072d6:	2020      	moveq	r0, #32
 80072d8:	4770      	bx	lr

080072da <__lo0bits>:
 80072da:	6803      	ldr	r3, [r0, #0]
 80072dc:	4602      	mov	r2, r0
 80072de:	f013 0007 	ands.w	r0, r3, #7
 80072e2:	d00b      	beq.n	80072fc <__lo0bits+0x22>
 80072e4:	07d9      	lsls	r1, r3, #31
 80072e6:	d421      	bmi.n	800732c <__lo0bits+0x52>
 80072e8:	0798      	lsls	r0, r3, #30
 80072ea:	bf49      	itett	mi
 80072ec:	085b      	lsrmi	r3, r3, #1
 80072ee:	089b      	lsrpl	r3, r3, #2
 80072f0:	2001      	movmi	r0, #1
 80072f2:	6013      	strmi	r3, [r2, #0]
 80072f4:	bf5c      	itt	pl
 80072f6:	6013      	strpl	r3, [r2, #0]
 80072f8:	2002      	movpl	r0, #2
 80072fa:	4770      	bx	lr
 80072fc:	b299      	uxth	r1, r3
 80072fe:	b909      	cbnz	r1, 8007304 <__lo0bits+0x2a>
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	2010      	movs	r0, #16
 8007304:	b2d9      	uxtb	r1, r3
 8007306:	b909      	cbnz	r1, 800730c <__lo0bits+0x32>
 8007308:	3008      	adds	r0, #8
 800730a:	0a1b      	lsrs	r3, r3, #8
 800730c:	0719      	lsls	r1, r3, #28
 800730e:	bf04      	itt	eq
 8007310:	091b      	lsreq	r3, r3, #4
 8007312:	3004      	addeq	r0, #4
 8007314:	0799      	lsls	r1, r3, #30
 8007316:	bf04      	itt	eq
 8007318:	089b      	lsreq	r3, r3, #2
 800731a:	3002      	addeq	r0, #2
 800731c:	07d9      	lsls	r1, r3, #31
 800731e:	d403      	bmi.n	8007328 <__lo0bits+0x4e>
 8007320:	085b      	lsrs	r3, r3, #1
 8007322:	f100 0001 	add.w	r0, r0, #1
 8007326:	d003      	beq.n	8007330 <__lo0bits+0x56>
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	4770      	bx	lr
 800732c:	2000      	movs	r0, #0
 800732e:	4770      	bx	lr
 8007330:	2020      	movs	r0, #32
 8007332:	4770      	bx	lr

08007334 <__i2b>:
 8007334:	b510      	push	{r4, lr}
 8007336:	460c      	mov	r4, r1
 8007338:	2101      	movs	r1, #1
 800733a:	f7ff ff07 	bl	800714c <_Balloc>
 800733e:	4602      	mov	r2, r0
 8007340:	b928      	cbnz	r0, 800734e <__i2b+0x1a>
 8007342:	4b05      	ldr	r3, [pc, #20]	@ (8007358 <__i2b+0x24>)
 8007344:	4805      	ldr	r0, [pc, #20]	@ (800735c <__i2b+0x28>)
 8007346:	f240 1145 	movw	r1, #325	@ 0x145
 800734a:	f000 fe6d 	bl	8008028 <__assert_func>
 800734e:	2301      	movs	r3, #1
 8007350:	6144      	str	r4, [r0, #20]
 8007352:	6103      	str	r3, [r0, #16]
 8007354:	bd10      	pop	{r4, pc}
 8007356:	bf00      	nop
 8007358:	08008a84 	.word	0x08008a84
 800735c:	08008a95 	.word	0x08008a95

08007360 <__multiply>:
 8007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	4614      	mov	r4, r2
 8007366:	690a      	ldr	r2, [r1, #16]
 8007368:	6923      	ldr	r3, [r4, #16]
 800736a:	429a      	cmp	r2, r3
 800736c:	bfa8      	it	ge
 800736e:	4623      	movge	r3, r4
 8007370:	460f      	mov	r7, r1
 8007372:	bfa4      	itt	ge
 8007374:	460c      	movge	r4, r1
 8007376:	461f      	movge	r7, r3
 8007378:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800737c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007380:	68a3      	ldr	r3, [r4, #8]
 8007382:	6861      	ldr	r1, [r4, #4]
 8007384:	eb0a 0609 	add.w	r6, sl, r9
 8007388:	42b3      	cmp	r3, r6
 800738a:	b085      	sub	sp, #20
 800738c:	bfb8      	it	lt
 800738e:	3101      	addlt	r1, #1
 8007390:	f7ff fedc 	bl	800714c <_Balloc>
 8007394:	b930      	cbnz	r0, 80073a4 <__multiply+0x44>
 8007396:	4602      	mov	r2, r0
 8007398:	4b44      	ldr	r3, [pc, #272]	@ (80074ac <__multiply+0x14c>)
 800739a:	4845      	ldr	r0, [pc, #276]	@ (80074b0 <__multiply+0x150>)
 800739c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80073a0:	f000 fe42 	bl	8008028 <__assert_func>
 80073a4:	f100 0514 	add.w	r5, r0, #20
 80073a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073ac:	462b      	mov	r3, r5
 80073ae:	2200      	movs	r2, #0
 80073b0:	4543      	cmp	r3, r8
 80073b2:	d321      	bcc.n	80073f8 <__multiply+0x98>
 80073b4:	f107 0114 	add.w	r1, r7, #20
 80073b8:	f104 0214 	add.w	r2, r4, #20
 80073bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80073c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80073c4:	9302      	str	r3, [sp, #8]
 80073c6:	1b13      	subs	r3, r2, r4
 80073c8:	3b15      	subs	r3, #21
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	3304      	adds	r3, #4
 80073d0:	f104 0715 	add.w	r7, r4, #21
 80073d4:	42ba      	cmp	r2, r7
 80073d6:	bf38      	it	cc
 80073d8:	2304      	movcc	r3, #4
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	9b02      	ldr	r3, [sp, #8]
 80073de:	9103      	str	r1, [sp, #12]
 80073e0:	428b      	cmp	r3, r1
 80073e2:	d80c      	bhi.n	80073fe <__multiply+0x9e>
 80073e4:	2e00      	cmp	r6, #0
 80073e6:	dd03      	ble.n	80073f0 <__multiply+0x90>
 80073e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d05b      	beq.n	80074a8 <__multiply+0x148>
 80073f0:	6106      	str	r6, [r0, #16]
 80073f2:	b005      	add	sp, #20
 80073f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f8:	f843 2b04 	str.w	r2, [r3], #4
 80073fc:	e7d8      	b.n	80073b0 <__multiply+0x50>
 80073fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8007402:	f1ba 0f00 	cmp.w	sl, #0
 8007406:	d024      	beq.n	8007452 <__multiply+0xf2>
 8007408:	f104 0e14 	add.w	lr, r4, #20
 800740c:	46a9      	mov	r9, r5
 800740e:	f04f 0c00 	mov.w	ip, #0
 8007412:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007416:	f8d9 3000 	ldr.w	r3, [r9]
 800741a:	fa1f fb87 	uxth.w	fp, r7
 800741e:	b29b      	uxth	r3, r3
 8007420:	fb0a 330b 	mla	r3, sl, fp, r3
 8007424:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007428:	f8d9 7000 	ldr.w	r7, [r9]
 800742c:	4463      	add	r3, ip
 800742e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007432:	fb0a c70b 	mla	r7, sl, fp, ip
 8007436:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800743a:	b29b      	uxth	r3, r3
 800743c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007440:	4572      	cmp	r2, lr
 8007442:	f849 3b04 	str.w	r3, [r9], #4
 8007446:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800744a:	d8e2      	bhi.n	8007412 <__multiply+0xb2>
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	f845 c003 	str.w	ip, [r5, r3]
 8007452:	9b03      	ldr	r3, [sp, #12]
 8007454:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007458:	3104      	adds	r1, #4
 800745a:	f1b9 0f00 	cmp.w	r9, #0
 800745e:	d021      	beq.n	80074a4 <__multiply+0x144>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	f104 0c14 	add.w	ip, r4, #20
 8007466:	46ae      	mov	lr, r5
 8007468:	f04f 0a00 	mov.w	sl, #0
 800746c:	f8bc b000 	ldrh.w	fp, [ip]
 8007470:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007474:	fb09 770b 	mla	r7, r9, fp, r7
 8007478:	4457      	add	r7, sl
 800747a:	b29b      	uxth	r3, r3
 800747c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007480:	f84e 3b04 	str.w	r3, [lr], #4
 8007484:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007488:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800748c:	f8be 3000 	ldrh.w	r3, [lr]
 8007490:	fb09 330a 	mla	r3, r9, sl, r3
 8007494:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007498:	4562      	cmp	r2, ip
 800749a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800749e:	d8e5      	bhi.n	800746c <__multiply+0x10c>
 80074a0:	9f01      	ldr	r7, [sp, #4]
 80074a2:	51eb      	str	r3, [r5, r7]
 80074a4:	3504      	adds	r5, #4
 80074a6:	e799      	b.n	80073dc <__multiply+0x7c>
 80074a8:	3e01      	subs	r6, #1
 80074aa:	e79b      	b.n	80073e4 <__multiply+0x84>
 80074ac:	08008a84 	.word	0x08008a84
 80074b0:	08008a95 	.word	0x08008a95

080074b4 <__pow5mult>:
 80074b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b8:	4615      	mov	r5, r2
 80074ba:	f012 0203 	ands.w	r2, r2, #3
 80074be:	4607      	mov	r7, r0
 80074c0:	460e      	mov	r6, r1
 80074c2:	d007      	beq.n	80074d4 <__pow5mult+0x20>
 80074c4:	4c25      	ldr	r4, [pc, #148]	@ (800755c <__pow5mult+0xa8>)
 80074c6:	3a01      	subs	r2, #1
 80074c8:	2300      	movs	r3, #0
 80074ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074ce:	f7ff fe9f 	bl	8007210 <__multadd>
 80074d2:	4606      	mov	r6, r0
 80074d4:	10ad      	asrs	r5, r5, #2
 80074d6:	d03d      	beq.n	8007554 <__pow5mult+0xa0>
 80074d8:	69fc      	ldr	r4, [r7, #28]
 80074da:	b97c      	cbnz	r4, 80074fc <__pow5mult+0x48>
 80074dc:	2010      	movs	r0, #16
 80074de:	f7fd ff99 	bl	8005414 <malloc>
 80074e2:	4602      	mov	r2, r0
 80074e4:	61f8      	str	r0, [r7, #28]
 80074e6:	b928      	cbnz	r0, 80074f4 <__pow5mult+0x40>
 80074e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007560 <__pow5mult+0xac>)
 80074ea:	481e      	ldr	r0, [pc, #120]	@ (8007564 <__pow5mult+0xb0>)
 80074ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80074f0:	f000 fd9a 	bl	8008028 <__assert_func>
 80074f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074f8:	6004      	str	r4, [r0, #0]
 80074fa:	60c4      	str	r4, [r0, #12]
 80074fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007500:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007504:	b94c      	cbnz	r4, 800751a <__pow5mult+0x66>
 8007506:	f240 2171 	movw	r1, #625	@ 0x271
 800750a:	4638      	mov	r0, r7
 800750c:	f7ff ff12 	bl	8007334 <__i2b>
 8007510:	2300      	movs	r3, #0
 8007512:	f8c8 0008 	str.w	r0, [r8, #8]
 8007516:	4604      	mov	r4, r0
 8007518:	6003      	str	r3, [r0, #0]
 800751a:	f04f 0900 	mov.w	r9, #0
 800751e:	07eb      	lsls	r3, r5, #31
 8007520:	d50a      	bpl.n	8007538 <__pow5mult+0x84>
 8007522:	4631      	mov	r1, r6
 8007524:	4622      	mov	r2, r4
 8007526:	4638      	mov	r0, r7
 8007528:	f7ff ff1a 	bl	8007360 <__multiply>
 800752c:	4631      	mov	r1, r6
 800752e:	4680      	mov	r8, r0
 8007530:	4638      	mov	r0, r7
 8007532:	f7ff fe4b 	bl	80071cc <_Bfree>
 8007536:	4646      	mov	r6, r8
 8007538:	106d      	asrs	r5, r5, #1
 800753a:	d00b      	beq.n	8007554 <__pow5mult+0xa0>
 800753c:	6820      	ldr	r0, [r4, #0]
 800753e:	b938      	cbnz	r0, 8007550 <__pow5mult+0x9c>
 8007540:	4622      	mov	r2, r4
 8007542:	4621      	mov	r1, r4
 8007544:	4638      	mov	r0, r7
 8007546:	f7ff ff0b 	bl	8007360 <__multiply>
 800754a:	6020      	str	r0, [r4, #0]
 800754c:	f8c0 9000 	str.w	r9, [r0]
 8007550:	4604      	mov	r4, r0
 8007552:	e7e4      	b.n	800751e <__pow5mult+0x6a>
 8007554:	4630      	mov	r0, r6
 8007556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755a:	bf00      	nop
 800755c:	08008af0 	.word	0x08008af0
 8007560:	08008a15 	.word	0x08008a15
 8007564:	08008a95 	.word	0x08008a95

08007568 <__lshift>:
 8007568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800756c:	460c      	mov	r4, r1
 800756e:	6849      	ldr	r1, [r1, #4]
 8007570:	6923      	ldr	r3, [r4, #16]
 8007572:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007576:	68a3      	ldr	r3, [r4, #8]
 8007578:	4607      	mov	r7, r0
 800757a:	4691      	mov	r9, r2
 800757c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007580:	f108 0601 	add.w	r6, r8, #1
 8007584:	42b3      	cmp	r3, r6
 8007586:	db0b      	blt.n	80075a0 <__lshift+0x38>
 8007588:	4638      	mov	r0, r7
 800758a:	f7ff fddf 	bl	800714c <_Balloc>
 800758e:	4605      	mov	r5, r0
 8007590:	b948      	cbnz	r0, 80075a6 <__lshift+0x3e>
 8007592:	4602      	mov	r2, r0
 8007594:	4b28      	ldr	r3, [pc, #160]	@ (8007638 <__lshift+0xd0>)
 8007596:	4829      	ldr	r0, [pc, #164]	@ (800763c <__lshift+0xd4>)
 8007598:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800759c:	f000 fd44 	bl	8008028 <__assert_func>
 80075a0:	3101      	adds	r1, #1
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	e7ee      	b.n	8007584 <__lshift+0x1c>
 80075a6:	2300      	movs	r3, #0
 80075a8:	f100 0114 	add.w	r1, r0, #20
 80075ac:	f100 0210 	add.w	r2, r0, #16
 80075b0:	4618      	mov	r0, r3
 80075b2:	4553      	cmp	r3, sl
 80075b4:	db33      	blt.n	800761e <__lshift+0xb6>
 80075b6:	6920      	ldr	r0, [r4, #16]
 80075b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075bc:	f104 0314 	add.w	r3, r4, #20
 80075c0:	f019 091f 	ands.w	r9, r9, #31
 80075c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075cc:	d02b      	beq.n	8007626 <__lshift+0xbe>
 80075ce:	f1c9 0e20 	rsb	lr, r9, #32
 80075d2:	468a      	mov	sl, r1
 80075d4:	2200      	movs	r2, #0
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	fa00 f009 	lsl.w	r0, r0, r9
 80075dc:	4310      	orrs	r0, r2
 80075de:	f84a 0b04 	str.w	r0, [sl], #4
 80075e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e6:	459c      	cmp	ip, r3
 80075e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80075ec:	d8f3      	bhi.n	80075d6 <__lshift+0x6e>
 80075ee:	ebac 0304 	sub.w	r3, ip, r4
 80075f2:	3b15      	subs	r3, #21
 80075f4:	f023 0303 	bic.w	r3, r3, #3
 80075f8:	3304      	adds	r3, #4
 80075fa:	f104 0015 	add.w	r0, r4, #21
 80075fe:	4584      	cmp	ip, r0
 8007600:	bf38      	it	cc
 8007602:	2304      	movcc	r3, #4
 8007604:	50ca      	str	r2, [r1, r3]
 8007606:	b10a      	cbz	r2, 800760c <__lshift+0xa4>
 8007608:	f108 0602 	add.w	r6, r8, #2
 800760c:	3e01      	subs	r6, #1
 800760e:	4638      	mov	r0, r7
 8007610:	612e      	str	r6, [r5, #16]
 8007612:	4621      	mov	r1, r4
 8007614:	f7ff fdda 	bl	80071cc <_Bfree>
 8007618:	4628      	mov	r0, r5
 800761a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007622:	3301      	adds	r3, #1
 8007624:	e7c5      	b.n	80075b2 <__lshift+0x4a>
 8007626:	3904      	subs	r1, #4
 8007628:	f853 2b04 	ldr.w	r2, [r3], #4
 800762c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007630:	459c      	cmp	ip, r3
 8007632:	d8f9      	bhi.n	8007628 <__lshift+0xc0>
 8007634:	e7ea      	b.n	800760c <__lshift+0xa4>
 8007636:	bf00      	nop
 8007638:	08008a84 	.word	0x08008a84
 800763c:	08008a95 	.word	0x08008a95

08007640 <__mcmp>:
 8007640:	690a      	ldr	r2, [r1, #16]
 8007642:	4603      	mov	r3, r0
 8007644:	6900      	ldr	r0, [r0, #16]
 8007646:	1a80      	subs	r0, r0, r2
 8007648:	b530      	push	{r4, r5, lr}
 800764a:	d10e      	bne.n	800766a <__mcmp+0x2a>
 800764c:	3314      	adds	r3, #20
 800764e:	3114      	adds	r1, #20
 8007650:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007654:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007658:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800765c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007660:	4295      	cmp	r5, r2
 8007662:	d003      	beq.n	800766c <__mcmp+0x2c>
 8007664:	d205      	bcs.n	8007672 <__mcmp+0x32>
 8007666:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800766a:	bd30      	pop	{r4, r5, pc}
 800766c:	42a3      	cmp	r3, r4
 800766e:	d3f3      	bcc.n	8007658 <__mcmp+0x18>
 8007670:	e7fb      	b.n	800766a <__mcmp+0x2a>
 8007672:	2001      	movs	r0, #1
 8007674:	e7f9      	b.n	800766a <__mcmp+0x2a>
	...

08007678 <__mdiff>:
 8007678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	4689      	mov	r9, r1
 800767e:	4606      	mov	r6, r0
 8007680:	4611      	mov	r1, r2
 8007682:	4648      	mov	r0, r9
 8007684:	4614      	mov	r4, r2
 8007686:	f7ff ffdb 	bl	8007640 <__mcmp>
 800768a:	1e05      	subs	r5, r0, #0
 800768c:	d112      	bne.n	80076b4 <__mdiff+0x3c>
 800768e:	4629      	mov	r1, r5
 8007690:	4630      	mov	r0, r6
 8007692:	f7ff fd5b 	bl	800714c <_Balloc>
 8007696:	4602      	mov	r2, r0
 8007698:	b928      	cbnz	r0, 80076a6 <__mdiff+0x2e>
 800769a:	4b3f      	ldr	r3, [pc, #252]	@ (8007798 <__mdiff+0x120>)
 800769c:	f240 2137 	movw	r1, #567	@ 0x237
 80076a0:	483e      	ldr	r0, [pc, #248]	@ (800779c <__mdiff+0x124>)
 80076a2:	f000 fcc1 	bl	8008028 <__assert_func>
 80076a6:	2301      	movs	r3, #1
 80076a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076ac:	4610      	mov	r0, r2
 80076ae:	b003      	add	sp, #12
 80076b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b4:	bfbc      	itt	lt
 80076b6:	464b      	movlt	r3, r9
 80076b8:	46a1      	movlt	r9, r4
 80076ba:	4630      	mov	r0, r6
 80076bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076c0:	bfba      	itte	lt
 80076c2:	461c      	movlt	r4, r3
 80076c4:	2501      	movlt	r5, #1
 80076c6:	2500      	movge	r5, #0
 80076c8:	f7ff fd40 	bl	800714c <_Balloc>
 80076cc:	4602      	mov	r2, r0
 80076ce:	b918      	cbnz	r0, 80076d8 <__mdiff+0x60>
 80076d0:	4b31      	ldr	r3, [pc, #196]	@ (8007798 <__mdiff+0x120>)
 80076d2:	f240 2145 	movw	r1, #581	@ 0x245
 80076d6:	e7e3      	b.n	80076a0 <__mdiff+0x28>
 80076d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80076dc:	6926      	ldr	r6, [r4, #16]
 80076de:	60c5      	str	r5, [r0, #12]
 80076e0:	f109 0310 	add.w	r3, r9, #16
 80076e4:	f109 0514 	add.w	r5, r9, #20
 80076e8:	f104 0e14 	add.w	lr, r4, #20
 80076ec:	f100 0b14 	add.w	fp, r0, #20
 80076f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80076f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	46d9      	mov	r9, fp
 80076fc:	f04f 0c00 	mov.w	ip, #0
 8007700:	9b01      	ldr	r3, [sp, #4]
 8007702:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007706:	f853 af04 	ldr.w	sl, [r3, #4]!
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	fa1f f38a 	uxth.w	r3, sl
 8007710:	4619      	mov	r1, r3
 8007712:	b283      	uxth	r3, r0
 8007714:	1acb      	subs	r3, r1, r3
 8007716:	0c00      	lsrs	r0, r0, #16
 8007718:	4463      	add	r3, ip
 800771a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800771e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007722:	b29b      	uxth	r3, r3
 8007724:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007728:	4576      	cmp	r6, lr
 800772a:	f849 3b04 	str.w	r3, [r9], #4
 800772e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007732:	d8e5      	bhi.n	8007700 <__mdiff+0x88>
 8007734:	1b33      	subs	r3, r6, r4
 8007736:	3b15      	subs	r3, #21
 8007738:	f023 0303 	bic.w	r3, r3, #3
 800773c:	3415      	adds	r4, #21
 800773e:	3304      	adds	r3, #4
 8007740:	42a6      	cmp	r6, r4
 8007742:	bf38      	it	cc
 8007744:	2304      	movcc	r3, #4
 8007746:	441d      	add	r5, r3
 8007748:	445b      	add	r3, fp
 800774a:	461e      	mov	r6, r3
 800774c:	462c      	mov	r4, r5
 800774e:	4544      	cmp	r4, r8
 8007750:	d30e      	bcc.n	8007770 <__mdiff+0xf8>
 8007752:	f108 0103 	add.w	r1, r8, #3
 8007756:	1b49      	subs	r1, r1, r5
 8007758:	f021 0103 	bic.w	r1, r1, #3
 800775c:	3d03      	subs	r5, #3
 800775e:	45a8      	cmp	r8, r5
 8007760:	bf38      	it	cc
 8007762:	2100      	movcc	r1, #0
 8007764:	440b      	add	r3, r1
 8007766:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800776a:	b191      	cbz	r1, 8007792 <__mdiff+0x11a>
 800776c:	6117      	str	r7, [r2, #16]
 800776e:	e79d      	b.n	80076ac <__mdiff+0x34>
 8007770:	f854 1b04 	ldr.w	r1, [r4], #4
 8007774:	46e6      	mov	lr, ip
 8007776:	0c08      	lsrs	r0, r1, #16
 8007778:	fa1c fc81 	uxtah	ip, ip, r1
 800777c:	4471      	add	r1, lr
 800777e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007782:	b289      	uxth	r1, r1
 8007784:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007788:	f846 1b04 	str.w	r1, [r6], #4
 800778c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007790:	e7dd      	b.n	800774e <__mdiff+0xd6>
 8007792:	3f01      	subs	r7, #1
 8007794:	e7e7      	b.n	8007766 <__mdiff+0xee>
 8007796:	bf00      	nop
 8007798:	08008a84 	.word	0x08008a84
 800779c:	08008a95 	.word	0x08008a95

080077a0 <__d2b>:
 80077a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077a4:	460f      	mov	r7, r1
 80077a6:	2101      	movs	r1, #1
 80077a8:	ec59 8b10 	vmov	r8, r9, d0
 80077ac:	4616      	mov	r6, r2
 80077ae:	f7ff fccd 	bl	800714c <_Balloc>
 80077b2:	4604      	mov	r4, r0
 80077b4:	b930      	cbnz	r0, 80077c4 <__d2b+0x24>
 80077b6:	4602      	mov	r2, r0
 80077b8:	4b23      	ldr	r3, [pc, #140]	@ (8007848 <__d2b+0xa8>)
 80077ba:	4824      	ldr	r0, [pc, #144]	@ (800784c <__d2b+0xac>)
 80077bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80077c0:	f000 fc32 	bl	8008028 <__assert_func>
 80077c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80077c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077cc:	b10d      	cbz	r5, 80077d2 <__d2b+0x32>
 80077ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077d2:	9301      	str	r3, [sp, #4]
 80077d4:	f1b8 0300 	subs.w	r3, r8, #0
 80077d8:	d023      	beq.n	8007822 <__d2b+0x82>
 80077da:	4668      	mov	r0, sp
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	f7ff fd7c 	bl	80072da <__lo0bits>
 80077e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077e6:	b1d0      	cbz	r0, 800781e <__d2b+0x7e>
 80077e8:	f1c0 0320 	rsb	r3, r0, #32
 80077ec:	fa02 f303 	lsl.w	r3, r2, r3
 80077f0:	430b      	orrs	r3, r1
 80077f2:	40c2      	lsrs	r2, r0
 80077f4:	6163      	str	r3, [r4, #20]
 80077f6:	9201      	str	r2, [sp, #4]
 80077f8:	9b01      	ldr	r3, [sp, #4]
 80077fa:	61a3      	str	r3, [r4, #24]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	bf0c      	ite	eq
 8007800:	2201      	moveq	r2, #1
 8007802:	2202      	movne	r2, #2
 8007804:	6122      	str	r2, [r4, #16]
 8007806:	b1a5      	cbz	r5, 8007832 <__d2b+0x92>
 8007808:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800780c:	4405      	add	r5, r0
 800780e:	603d      	str	r5, [r7, #0]
 8007810:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007814:	6030      	str	r0, [r6, #0]
 8007816:	4620      	mov	r0, r4
 8007818:	b003      	add	sp, #12
 800781a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800781e:	6161      	str	r1, [r4, #20]
 8007820:	e7ea      	b.n	80077f8 <__d2b+0x58>
 8007822:	a801      	add	r0, sp, #4
 8007824:	f7ff fd59 	bl	80072da <__lo0bits>
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	6163      	str	r3, [r4, #20]
 800782c:	3020      	adds	r0, #32
 800782e:	2201      	movs	r2, #1
 8007830:	e7e8      	b.n	8007804 <__d2b+0x64>
 8007832:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007836:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800783a:	6038      	str	r0, [r7, #0]
 800783c:	6918      	ldr	r0, [r3, #16]
 800783e:	f7ff fd2d 	bl	800729c <__hi0bits>
 8007842:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007846:	e7e5      	b.n	8007814 <__d2b+0x74>
 8007848:	08008a84 	.word	0x08008a84
 800784c:	08008a95 	.word	0x08008a95

08007850 <_malloc_usable_size_r>:
 8007850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007854:	1f18      	subs	r0, r3, #4
 8007856:	2b00      	cmp	r3, #0
 8007858:	bfbc      	itt	lt
 800785a:	580b      	ldrlt	r3, [r1, r0]
 800785c:	18c0      	addlt	r0, r0, r3
 800785e:	4770      	bx	lr

08007860 <__ssputs_r>:
 8007860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007864:	688e      	ldr	r6, [r1, #8]
 8007866:	461f      	mov	r7, r3
 8007868:	42be      	cmp	r6, r7
 800786a:	680b      	ldr	r3, [r1, #0]
 800786c:	4682      	mov	sl, r0
 800786e:	460c      	mov	r4, r1
 8007870:	4690      	mov	r8, r2
 8007872:	d82d      	bhi.n	80078d0 <__ssputs_r+0x70>
 8007874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007878:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800787c:	d026      	beq.n	80078cc <__ssputs_r+0x6c>
 800787e:	6965      	ldr	r5, [r4, #20]
 8007880:	6909      	ldr	r1, [r1, #16]
 8007882:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007886:	eba3 0901 	sub.w	r9, r3, r1
 800788a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800788e:	1c7b      	adds	r3, r7, #1
 8007890:	444b      	add	r3, r9
 8007892:	106d      	asrs	r5, r5, #1
 8007894:	429d      	cmp	r5, r3
 8007896:	bf38      	it	cc
 8007898:	461d      	movcc	r5, r3
 800789a:	0553      	lsls	r3, r2, #21
 800789c:	d527      	bpl.n	80078ee <__ssputs_r+0x8e>
 800789e:	4629      	mov	r1, r5
 80078a0:	f7fd fde2 	bl	8005468 <_malloc_r>
 80078a4:	4606      	mov	r6, r0
 80078a6:	b360      	cbz	r0, 8007902 <__ssputs_r+0xa2>
 80078a8:	6921      	ldr	r1, [r4, #16]
 80078aa:	464a      	mov	r2, r9
 80078ac:	f7fe fda7 	bl	80063fe <memcpy>
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80078b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ba:	81a3      	strh	r3, [r4, #12]
 80078bc:	6126      	str	r6, [r4, #16]
 80078be:	6165      	str	r5, [r4, #20]
 80078c0:	444e      	add	r6, r9
 80078c2:	eba5 0509 	sub.w	r5, r5, r9
 80078c6:	6026      	str	r6, [r4, #0]
 80078c8:	60a5      	str	r5, [r4, #8]
 80078ca:	463e      	mov	r6, r7
 80078cc:	42be      	cmp	r6, r7
 80078ce:	d900      	bls.n	80078d2 <__ssputs_r+0x72>
 80078d0:	463e      	mov	r6, r7
 80078d2:	6820      	ldr	r0, [r4, #0]
 80078d4:	4632      	mov	r2, r6
 80078d6:	4641      	mov	r1, r8
 80078d8:	f000 fb6a 	bl	8007fb0 <memmove>
 80078dc:	68a3      	ldr	r3, [r4, #8]
 80078de:	1b9b      	subs	r3, r3, r6
 80078e0:	60a3      	str	r3, [r4, #8]
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	4433      	add	r3, r6
 80078e6:	6023      	str	r3, [r4, #0]
 80078e8:	2000      	movs	r0, #0
 80078ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ee:	462a      	mov	r2, r5
 80078f0:	f7fd fe46 	bl	8005580 <_realloc_r>
 80078f4:	4606      	mov	r6, r0
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d1e0      	bne.n	80078bc <__ssputs_r+0x5c>
 80078fa:	6921      	ldr	r1, [r4, #16]
 80078fc:	4650      	mov	r0, sl
 80078fe:	f7ff fbdb 	bl	80070b8 <_free_r>
 8007902:	230c      	movs	r3, #12
 8007904:	f8ca 3000 	str.w	r3, [sl]
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800790e:	81a3      	strh	r3, [r4, #12]
 8007910:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007914:	e7e9      	b.n	80078ea <__ssputs_r+0x8a>
	...

08007918 <_svfiprintf_r>:
 8007918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791c:	4698      	mov	r8, r3
 800791e:	898b      	ldrh	r3, [r1, #12]
 8007920:	061b      	lsls	r3, r3, #24
 8007922:	b09d      	sub	sp, #116	@ 0x74
 8007924:	4607      	mov	r7, r0
 8007926:	460d      	mov	r5, r1
 8007928:	4614      	mov	r4, r2
 800792a:	d510      	bpl.n	800794e <_svfiprintf_r+0x36>
 800792c:	690b      	ldr	r3, [r1, #16]
 800792e:	b973      	cbnz	r3, 800794e <_svfiprintf_r+0x36>
 8007930:	2140      	movs	r1, #64	@ 0x40
 8007932:	f7fd fd99 	bl	8005468 <_malloc_r>
 8007936:	6028      	str	r0, [r5, #0]
 8007938:	6128      	str	r0, [r5, #16]
 800793a:	b930      	cbnz	r0, 800794a <_svfiprintf_r+0x32>
 800793c:	230c      	movs	r3, #12
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007944:	b01d      	add	sp, #116	@ 0x74
 8007946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794a:	2340      	movs	r3, #64	@ 0x40
 800794c:	616b      	str	r3, [r5, #20]
 800794e:	2300      	movs	r3, #0
 8007950:	9309      	str	r3, [sp, #36]	@ 0x24
 8007952:	2320      	movs	r3, #32
 8007954:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007958:	f8cd 800c 	str.w	r8, [sp, #12]
 800795c:	2330      	movs	r3, #48	@ 0x30
 800795e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007afc <_svfiprintf_r+0x1e4>
 8007962:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007966:	f04f 0901 	mov.w	r9, #1
 800796a:	4623      	mov	r3, r4
 800796c:	469a      	mov	sl, r3
 800796e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007972:	b10a      	cbz	r2, 8007978 <_svfiprintf_r+0x60>
 8007974:	2a25      	cmp	r2, #37	@ 0x25
 8007976:	d1f9      	bne.n	800796c <_svfiprintf_r+0x54>
 8007978:	ebba 0b04 	subs.w	fp, sl, r4
 800797c:	d00b      	beq.n	8007996 <_svfiprintf_r+0x7e>
 800797e:	465b      	mov	r3, fp
 8007980:	4622      	mov	r2, r4
 8007982:	4629      	mov	r1, r5
 8007984:	4638      	mov	r0, r7
 8007986:	f7ff ff6b 	bl	8007860 <__ssputs_r>
 800798a:	3001      	adds	r0, #1
 800798c:	f000 80a7 	beq.w	8007ade <_svfiprintf_r+0x1c6>
 8007990:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007992:	445a      	add	r2, fp
 8007994:	9209      	str	r2, [sp, #36]	@ 0x24
 8007996:	f89a 3000 	ldrb.w	r3, [sl]
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 809f 	beq.w	8007ade <_svfiprintf_r+0x1c6>
 80079a0:	2300      	movs	r3, #0
 80079a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079aa:	f10a 0a01 	add.w	sl, sl, #1
 80079ae:	9304      	str	r3, [sp, #16]
 80079b0:	9307      	str	r3, [sp, #28]
 80079b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80079b8:	4654      	mov	r4, sl
 80079ba:	2205      	movs	r2, #5
 80079bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c0:	484e      	ldr	r0, [pc, #312]	@ (8007afc <_svfiprintf_r+0x1e4>)
 80079c2:	f7f8 fc25 	bl	8000210 <memchr>
 80079c6:	9a04      	ldr	r2, [sp, #16]
 80079c8:	b9d8      	cbnz	r0, 8007a02 <_svfiprintf_r+0xea>
 80079ca:	06d0      	lsls	r0, r2, #27
 80079cc:	bf44      	itt	mi
 80079ce:	2320      	movmi	r3, #32
 80079d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079d4:	0711      	lsls	r1, r2, #28
 80079d6:	bf44      	itt	mi
 80079d8:	232b      	movmi	r3, #43	@ 0x2b
 80079da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079de:	f89a 3000 	ldrb.w	r3, [sl]
 80079e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80079e4:	d015      	beq.n	8007a12 <_svfiprintf_r+0xfa>
 80079e6:	9a07      	ldr	r2, [sp, #28]
 80079e8:	4654      	mov	r4, sl
 80079ea:	2000      	movs	r0, #0
 80079ec:	f04f 0c0a 	mov.w	ip, #10
 80079f0:	4621      	mov	r1, r4
 80079f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079f6:	3b30      	subs	r3, #48	@ 0x30
 80079f8:	2b09      	cmp	r3, #9
 80079fa:	d94b      	bls.n	8007a94 <_svfiprintf_r+0x17c>
 80079fc:	b1b0      	cbz	r0, 8007a2c <_svfiprintf_r+0x114>
 80079fe:	9207      	str	r2, [sp, #28]
 8007a00:	e014      	b.n	8007a2c <_svfiprintf_r+0x114>
 8007a02:	eba0 0308 	sub.w	r3, r0, r8
 8007a06:	fa09 f303 	lsl.w	r3, r9, r3
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	46a2      	mov	sl, r4
 8007a10:	e7d2      	b.n	80079b8 <_svfiprintf_r+0xa0>
 8007a12:	9b03      	ldr	r3, [sp, #12]
 8007a14:	1d19      	adds	r1, r3, #4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	9103      	str	r1, [sp, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	bfbb      	ittet	lt
 8007a1e:	425b      	neglt	r3, r3
 8007a20:	f042 0202 	orrlt.w	r2, r2, #2
 8007a24:	9307      	strge	r3, [sp, #28]
 8007a26:	9307      	strlt	r3, [sp, #28]
 8007a28:	bfb8      	it	lt
 8007a2a:	9204      	strlt	r2, [sp, #16]
 8007a2c:	7823      	ldrb	r3, [r4, #0]
 8007a2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a30:	d10a      	bne.n	8007a48 <_svfiprintf_r+0x130>
 8007a32:	7863      	ldrb	r3, [r4, #1]
 8007a34:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a36:	d132      	bne.n	8007a9e <_svfiprintf_r+0x186>
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	1d1a      	adds	r2, r3, #4
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	9203      	str	r2, [sp, #12]
 8007a40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a44:	3402      	adds	r4, #2
 8007a46:	9305      	str	r3, [sp, #20]
 8007a48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b0c <_svfiprintf_r+0x1f4>
 8007a4c:	7821      	ldrb	r1, [r4, #0]
 8007a4e:	2203      	movs	r2, #3
 8007a50:	4650      	mov	r0, sl
 8007a52:	f7f8 fbdd 	bl	8000210 <memchr>
 8007a56:	b138      	cbz	r0, 8007a68 <_svfiprintf_r+0x150>
 8007a58:	9b04      	ldr	r3, [sp, #16]
 8007a5a:	eba0 000a 	sub.w	r0, r0, sl
 8007a5e:	2240      	movs	r2, #64	@ 0x40
 8007a60:	4082      	lsls	r2, r0
 8007a62:	4313      	orrs	r3, r2
 8007a64:	3401      	adds	r4, #1
 8007a66:	9304      	str	r3, [sp, #16]
 8007a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a6c:	4824      	ldr	r0, [pc, #144]	@ (8007b00 <_svfiprintf_r+0x1e8>)
 8007a6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a72:	2206      	movs	r2, #6
 8007a74:	f7f8 fbcc 	bl	8000210 <memchr>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d036      	beq.n	8007aea <_svfiprintf_r+0x1d2>
 8007a7c:	4b21      	ldr	r3, [pc, #132]	@ (8007b04 <_svfiprintf_r+0x1ec>)
 8007a7e:	bb1b      	cbnz	r3, 8007ac8 <_svfiprintf_r+0x1b0>
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	3307      	adds	r3, #7
 8007a84:	f023 0307 	bic.w	r3, r3, #7
 8007a88:	3308      	adds	r3, #8
 8007a8a:	9303      	str	r3, [sp, #12]
 8007a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a8e:	4433      	add	r3, r6
 8007a90:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a92:	e76a      	b.n	800796a <_svfiprintf_r+0x52>
 8007a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a98:	460c      	mov	r4, r1
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	e7a8      	b.n	80079f0 <_svfiprintf_r+0xd8>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	3401      	adds	r4, #1
 8007aa2:	9305      	str	r3, [sp, #20]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f04f 0c0a 	mov.w	ip, #10
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ab0:	3a30      	subs	r2, #48	@ 0x30
 8007ab2:	2a09      	cmp	r2, #9
 8007ab4:	d903      	bls.n	8007abe <_svfiprintf_r+0x1a6>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0c6      	beq.n	8007a48 <_svfiprintf_r+0x130>
 8007aba:	9105      	str	r1, [sp, #20]
 8007abc:	e7c4      	b.n	8007a48 <_svfiprintf_r+0x130>
 8007abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e7f0      	b.n	8007aaa <_svfiprintf_r+0x192>
 8007ac8:	ab03      	add	r3, sp, #12
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	462a      	mov	r2, r5
 8007ace:	4b0e      	ldr	r3, [pc, #56]	@ (8007b08 <_svfiprintf_r+0x1f0>)
 8007ad0:	a904      	add	r1, sp, #16
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	f7fd fe22 	bl	800571c <_printf_float>
 8007ad8:	1c42      	adds	r2, r0, #1
 8007ada:	4606      	mov	r6, r0
 8007adc:	d1d6      	bne.n	8007a8c <_svfiprintf_r+0x174>
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	065b      	lsls	r3, r3, #25
 8007ae2:	f53f af2d 	bmi.w	8007940 <_svfiprintf_r+0x28>
 8007ae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ae8:	e72c      	b.n	8007944 <_svfiprintf_r+0x2c>
 8007aea:	ab03      	add	r3, sp, #12
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	462a      	mov	r2, r5
 8007af0:	4b05      	ldr	r3, [pc, #20]	@ (8007b08 <_svfiprintf_r+0x1f0>)
 8007af2:	a904      	add	r1, sp, #16
 8007af4:	4638      	mov	r0, r7
 8007af6:	f7fe f8a9 	bl	8005c4c <_printf_i>
 8007afa:	e7ed      	b.n	8007ad8 <_svfiprintf_r+0x1c0>
 8007afc:	08008bf0 	.word	0x08008bf0
 8007b00:	08008bfa 	.word	0x08008bfa
 8007b04:	0800571d 	.word	0x0800571d
 8007b08:	08007861 	.word	0x08007861
 8007b0c:	08008bf6 	.word	0x08008bf6

08007b10 <__sfputc_r>:
 8007b10:	6893      	ldr	r3, [r2, #8]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	b410      	push	{r4}
 8007b18:	6093      	str	r3, [r2, #8]
 8007b1a:	da08      	bge.n	8007b2e <__sfputc_r+0x1e>
 8007b1c:	6994      	ldr	r4, [r2, #24]
 8007b1e:	42a3      	cmp	r3, r4
 8007b20:	db01      	blt.n	8007b26 <__sfputc_r+0x16>
 8007b22:	290a      	cmp	r1, #10
 8007b24:	d103      	bne.n	8007b2e <__sfputc_r+0x1e>
 8007b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b2a:	f7fe bb44 	b.w	80061b6 <__swbuf_r>
 8007b2e:	6813      	ldr	r3, [r2, #0]
 8007b30:	1c58      	adds	r0, r3, #1
 8007b32:	6010      	str	r0, [r2, #0]
 8007b34:	7019      	strb	r1, [r3, #0]
 8007b36:	4608      	mov	r0, r1
 8007b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <__sfputs_r>:
 8007b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b40:	4606      	mov	r6, r0
 8007b42:	460f      	mov	r7, r1
 8007b44:	4614      	mov	r4, r2
 8007b46:	18d5      	adds	r5, r2, r3
 8007b48:	42ac      	cmp	r4, r5
 8007b4a:	d101      	bne.n	8007b50 <__sfputs_r+0x12>
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e007      	b.n	8007b60 <__sfputs_r+0x22>
 8007b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b54:	463a      	mov	r2, r7
 8007b56:	4630      	mov	r0, r6
 8007b58:	f7ff ffda 	bl	8007b10 <__sfputc_r>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d1f3      	bne.n	8007b48 <__sfputs_r+0xa>
 8007b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b64 <_vfiprintf_r>:
 8007b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b68:	460d      	mov	r5, r1
 8007b6a:	b09d      	sub	sp, #116	@ 0x74
 8007b6c:	4614      	mov	r4, r2
 8007b6e:	4698      	mov	r8, r3
 8007b70:	4606      	mov	r6, r0
 8007b72:	b118      	cbz	r0, 8007b7c <_vfiprintf_r+0x18>
 8007b74:	6a03      	ldr	r3, [r0, #32]
 8007b76:	b90b      	cbnz	r3, 8007b7c <_vfiprintf_r+0x18>
 8007b78:	f7fe fa14 	bl	8005fa4 <__sinit>
 8007b7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b7e:	07d9      	lsls	r1, r3, #31
 8007b80:	d405      	bmi.n	8007b8e <_vfiprintf_r+0x2a>
 8007b82:	89ab      	ldrh	r3, [r5, #12]
 8007b84:	059a      	lsls	r2, r3, #22
 8007b86:	d402      	bmi.n	8007b8e <_vfiprintf_r+0x2a>
 8007b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b8a:	f7fe fc36 	bl	80063fa <__retarget_lock_acquire_recursive>
 8007b8e:	89ab      	ldrh	r3, [r5, #12]
 8007b90:	071b      	lsls	r3, r3, #28
 8007b92:	d501      	bpl.n	8007b98 <_vfiprintf_r+0x34>
 8007b94:	692b      	ldr	r3, [r5, #16]
 8007b96:	b99b      	cbnz	r3, 8007bc0 <_vfiprintf_r+0x5c>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f7fe fb4a 	bl	8006234 <__swsetup_r>
 8007ba0:	b170      	cbz	r0, 8007bc0 <_vfiprintf_r+0x5c>
 8007ba2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ba4:	07dc      	lsls	r4, r3, #31
 8007ba6:	d504      	bpl.n	8007bb2 <_vfiprintf_r+0x4e>
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bac:	b01d      	add	sp, #116	@ 0x74
 8007bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb2:	89ab      	ldrh	r3, [r5, #12]
 8007bb4:	0598      	lsls	r0, r3, #22
 8007bb6:	d4f7      	bmi.n	8007ba8 <_vfiprintf_r+0x44>
 8007bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bba:	f7fe fc1f 	bl	80063fc <__retarget_lock_release_recursive>
 8007bbe:	e7f3      	b.n	8007ba8 <_vfiprintf_r+0x44>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bc4:	2320      	movs	r3, #32
 8007bc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bca:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bce:	2330      	movs	r3, #48	@ 0x30
 8007bd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007d80 <_vfiprintf_r+0x21c>
 8007bd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bd8:	f04f 0901 	mov.w	r9, #1
 8007bdc:	4623      	mov	r3, r4
 8007bde:	469a      	mov	sl, r3
 8007be0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007be4:	b10a      	cbz	r2, 8007bea <_vfiprintf_r+0x86>
 8007be6:	2a25      	cmp	r2, #37	@ 0x25
 8007be8:	d1f9      	bne.n	8007bde <_vfiprintf_r+0x7a>
 8007bea:	ebba 0b04 	subs.w	fp, sl, r4
 8007bee:	d00b      	beq.n	8007c08 <_vfiprintf_r+0xa4>
 8007bf0:	465b      	mov	r3, fp
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f7ff ffa1 	bl	8007b3e <__sfputs_r>
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	f000 80a7 	beq.w	8007d50 <_vfiprintf_r+0x1ec>
 8007c02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c04:	445a      	add	r2, fp
 8007c06:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c08:	f89a 3000 	ldrb.w	r3, [sl]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 809f 	beq.w	8007d50 <_vfiprintf_r+0x1ec>
 8007c12:	2300      	movs	r3, #0
 8007c14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c1c:	f10a 0a01 	add.w	sl, sl, #1
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	9307      	str	r3, [sp, #28]
 8007c24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c28:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c2a:	4654      	mov	r4, sl
 8007c2c:	2205      	movs	r2, #5
 8007c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c32:	4853      	ldr	r0, [pc, #332]	@ (8007d80 <_vfiprintf_r+0x21c>)
 8007c34:	f7f8 faec 	bl	8000210 <memchr>
 8007c38:	9a04      	ldr	r2, [sp, #16]
 8007c3a:	b9d8      	cbnz	r0, 8007c74 <_vfiprintf_r+0x110>
 8007c3c:	06d1      	lsls	r1, r2, #27
 8007c3e:	bf44      	itt	mi
 8007c40:	2320      	movmi	r3, #32
 8007c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c46:	0713      	lsls	r3, r2, #28
 8007c48:	bf44      	itt	mi
 8007c4a:	232b      	movmi	r3, #43	@ 0x2b
 8007c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c50:	f89a 3000 	ldrb.w	r3, [sl]
 8007c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c56:	d015      	beq.n	8007c84 <_vfiprintf_r+0x120>
 8007c58:	9a07      	ldr	r2, [sp, #28]
 8007c5a:	4654      	mov	r4, sl
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	f04f 0c0a 	mov.w	ip, #10
 8007c62:	4621      	mov	r1, r4
 8007c64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c68:	3b30      	subs	r3, #48	@ 0x30
 8007c6a:	2b09      	cmp	r3, #9
 8007c6c:	d94b      	bls.n	8007d06 <_vfiprintf_r+0x1a2>
 8007c6e:	b1b0      	cbz	r0, 8007c9e <_vfiprintf_r+0x13a>
 8007c70:	9207      	str	r2, [sp, #28]
 8007c72:	e014      	b.n	8007c9e <_vfiprintf_r+0x13a>
 8007c74:	eba0 0308 	sub.w	r3, r0, r8
 8007c78:	fa09 f303 	lsl.w	r3, r9, r3
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	46a2      	mov	sl, r4
 8007c82:	e7d2      	b.n	8007c2a <_vfiprintf_r+0xc6>
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	1d19      	adds	r1, r3, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	9103      	str	r1, [sp, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bfbb      	ittet	lt
 8007c90:	425b      	neglt	r3, r3
 8007c92:	f042 0202 	orrlt.w	r2, r2, #2
 8007c96:	9307      	strge	r3, [sp, #28]
 8007c98:	9307      	strlt	r3, [sp, #28]
 8007c9a:	bfb8      	it	lt
 8007c9c:	9204      	strlt	r2, [sp, #16]
 8007c9e:	7823      	ldrb	r3, [r4, #0]
 8007ca0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ca2:	d10a      	bne.n	8007cba <_vfiprintf_r+0x156>
 8007ca4:	7863      	ldrb	r3, [r4, #1]
 8007ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ca8:	d132      	bne.n	8007d10 <_vfiprintf_r+0x1ac>
 8007caa:	9b03      	ldr	r3, [sp, #12]
 8007cac:	1d1a      	adds	r2, r3, #4
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	9203      	str	r2, [sp, #12]
 8007cb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cb6:	3402      	adds	r4, #2
 8007cb8:	9305      	str	r3, [sp, #20]
 8007cba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007d90 <_vfiprintf_r+0x22c>
 8007cbe:	7821      	ldrb	r1, [r4, #0]
 8007cc0:	2203      	movs	r2, #3
 8007cc2:	4650      	mov	r0, sl
 8007cc4:	f7f8 faa4 	bl	8000210 <memchr>
 8007cc8:	b138      	cbz	r0, 8007cda <_vfiprintf_r+0x176>
 8007cca:	9b04      	ldr	r3, [sp, #16]
 8007ccc:	eba0 000a 	sub.w	r0, r0, sl
 8007cd0:	2240      	movs	r2, #64	@ 0x40
 8007cd2:	4082      	lsls	r2, r0
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	3401      	adds	r4, #1
 8007cd8:	9304      	str	r3, [sp, #16]
 8007cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cde:	4829      	ldr	r0, [pc, #164]	@ (8007d84 <_vfiprintf_r+0x220>)
 8007ce0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ce4:	2206      	movs	r2, #6
 8007ce6:	f7f8 fa93 	bl	8000210 <memchr>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d03f      	beq.n	8007d6e <_vfiprintf_r+0x20a>
 8007cee:	4b26      	ldr	r3, [pc, #152]	@ (8007d88 <_vfiprintf_r+0x224>)
 8007cf0:	bb1b      	cbnz	r3, 8007d3a <_vfiprintf_r+0x1d6>
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	3307      	adds	r3, #7
 8007cf6:	f023 0307 	bic.w	r3, r3, #7
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	9303      	str	r3, [sp, #12]
 8007cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d00:	443b      	add	r3, r7
 8007d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d04:	e76a      	b.n	8007bdc <_vfiprintf_r+0x78>
 8007d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	2001      	movs	r0, #1
 8007d0e:	e7a8      	b.n	8007c62 <_vfiprintf_r+0xfe>
 8007d10:	2300      	movs	r3, #0
 8007d12:	3401      	adds	r4, #1
 8007d14:	9305      	str	r3, [sp, #20]
 8007d16:	4619      	mov	r1, r3
 8007d18:	f04f 0c0a 	mov.w	ip, #10
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d22:	3a30      	subs	r2, #48	@ 0x30
 8007d24:	2a09      	cmp	r2, #9
 8007d26:	d903      	bls.n	8007d30 <_vfiprintf_r+0x1cc>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0c6      	beq.n	8007cba <_vfiprintf_r+0x156>
 8007d2c:	9105      	str	r1, [sp, #20]
 8007d2e:	e7c4      	b.n	8007cba <_vfiprintf_r+0x156>
 8007d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d34:	4604      	mov	r4, r0
 8007d36:	2301      	movs	r3, #1
 8007d38:	e7f0      	b.n	8007d1c <_vfiprintf_r+0x1b8>
 8007d3a:	ab03      	add	r3, sp, #12
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	462a      	mov	r2, r5
 8007d40:	4b12      	ldr	r3, [pc, #72]	@ (8007d8c <_vfiprintf_r+0x228>)
 8007d42:	a904      	add	r1, sp, #16
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7fd fce9 	bl	800571c <_printf_float>
 8007d4a:	4607      	mov	r7, r0
 8007d4c:	1c78      	adds	r0, r7, #1
 8007d4e:	d1d6      	bne.n	8007cfe <_vfiprintf_r+0x19a>
 8007d50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d52:	07d9      	lsls	r1, r3, #31
 8007d54:	d405      	bmi.n	8007d62 <_vfiprintf_r+0x1fe>
 8007d56:	89ab      	ldrh	r3, [r5, #12]
 8007d58:	059a      	lsls	r2, r3, #22
 8007d5a:	d402      	bmi.n	8007d62 <_vfiprintf_r+0x1fe>
 8007d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d5e:	f7fe fb4d 	bl	80063fc <__retarget_lock_release_recursive>
 8007d62:	89ab      	ldrh	r3, [r5, #12]
 8007d64:	065b      	lsls	r3, r3, #25
 8007d66:	f53f af1f 	bmi.w	8007ba8 <_vfiprintf_r+0x44>
 8007d6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d6c:	e71e      	b.n	8007bac <_vfiprintf_r+0x48>
 8007d6e:	ab03      	add	r3, sp, #12
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	462a      	mov	r2, r5
 8007d74:	4b05      	ldr	r3, [pc, #20]	@ (8007d8c <_vfiprintf_r+0x228>)
 8007d76:	a904      	add	r1, sp, #16
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f7fd ff67 	bl	8005c4c <_printf_i>
 8007d7e:	e7e4      	b.n	8007d4a <_vfiprintf_r+0x1e6>
 8007d80:	08008bf0 	.word	0x08008bf0
 8007d84:	08008bfa 	.word	0x08008bfa
 8007d88:	0800571d 	.word	0x0800571d
 8007d8c:	08007b3f 	.word	0x08007b3f
 8007d90:	08008bf6 	.word	0x08008bf6

08007d94 <__sflush_r>:
 8007d94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9c:	0716      	lsls	r6, r2, #28
 8007d9e:	4605      	mov	r5, r0
 8007da0:	460c      	mov	r4, r1
 8007da2:	d454      	bmi.n	8007e4e <__sflush_r+0xba>
 8007da4:	684b      	ldr	r3, [r1, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	dc02      	bgt.n	8007db0 <__sflush_r+0x1c>
 8007daa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dd48      	ble.n	8007e42 <__sflush_r+0xae>
 8007db0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007db2:	2e00      	cmp	r6, #0
 8007db4:	d045      	beq.n	8007e42 <__sflush_r+0xae>
 8007db6:	2300      	movs	r3, #0
 8007db8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007dbc:	682f      	ldr	r7, [r5, #0]
 8007dbe:	6a21      	ldr	r1, [r4, #32]
 8007dc0:	602b      	str	r3, [r5, #0]
 8007dc2:	d030      	beq.n	8007e26 <__sflush_r+0x92>
 8007dc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	0759      	lsls	r1, r3, #29
 8007dca:	d505      	bpl.n	8007dd8 <__sflush_r+0x44>
 8007dcc:	6863      	ldr	r3, [r4, #4]
 8007dce:	1ad2      	subs	r2, r2, r3
 8007dd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007dd2:	b10b      	cbz	r3, 8007dd8 <__sflush_r+0x44>
 8007dd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dd6:	1ad2      	subs	r2, r2, r3
 8007dd8:	2300      	movs	r3, #0
 8007dda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ddc:	6a21      	ldr	r1, [r4, #32]
 8007dde:	4628      	mov	r0, r5
 8007de0:	47b0      	blx	r6
 8007de2:	1c43      	adds	r3, r0, #1
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	d106      	bne.n	8007df6 <__sflush_r+0x62>
 8007de8:	6829      	ldr	r1, [r5, #0]
 8007dea:	291d      	cmp	r1, #29
 8007dec:	d82b      	bhi.n	8007e46 <__sflush_r+0xb2>
 8007dee:	4a2a      	ldr	r2, [pc, #168]	@ (8007e98 <__sflush_r+0x104>)
 8007df0:	410a      	asrs	r2, r1
 8007df2:	07d6      	lsls	r6, r2, #31
 8007df4:	d427      	bmi.n	8007e46 <__sflush_r+0xb2>
 8007df6:	2200      	movs	r2, #0
 8007df8:	6062      	str	r2, [r4, #4]
 8007dfa:	04d9      	lsls	r1, r3, #19
 8007dfc:	6922      	ldr	r2, [r4, #16]
 8007dfe:	6022      	str	r2, [r4, #0]
 8007e00:	d504      	bpl.n	8007e0c <__sflush_r+0x78>
 8007e02:	1c42      	adds	r2, r0, #1
 8007e04:	d101      	bne.n	8007e0a <__sflush_r+0x76>
 8007e06:	682b      	ldr	r3, [r5, #0]
 8007e08:	b903      	cbnz	r3, 8007e0c <__sflush_r+0x78>
 8007e0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e0e:	602f      	str	r7, [r5, #0]
 8007e10:	b1b9      	cbz	r1, 8007e42 <__sflush_r+0xae>
 8007e12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e16:	4299      	cmp	r1, r3
 8007e18:	d002      	beq.n	8007e20 <__sflush_r+0x8c>
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	f7ff f94c 	bl	80070b8 <_free_r>
 8007e20:	2300      	movs	r3, #0
 8007e22:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e24:	e00d      	b.n	8007e42 <__sflush_r+0xae>
 8007e26:	2301      	movs	r3, #1
 8007e28:	4628      	mov	r0, r5
 8007e2a:	47b0      	blx	r6
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	1c50      	adds	r0, r2, #1
 8007e30:	d1c9      	bne.n	8007dc6 <__sflush_r+0x32>
 8007e32:	682b      	ldr	r3, [r5, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0c6      	beq.n	8007dc6 <__sflush_r+0x32>
 8007e38:	2b1d      	cmp	r3, #29
 8007e3a:	d001      	beq.n	8007e40 <__sflush_r+0xac>
 8007e3c:	2b16      	cmp	r3, #22
 8007e3e:	d11e      	bne.n	8007e7e <__sflush_r+0xea>
 8007e40:	602f      	str	r7, [r5, #0]
 8007e42:	2000      	movs	r0, #0
 8007e44:	e022      	b.n	8007e8c <__sflush_r+0xf8>
 8007e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e4a:	b21b      	sxth	r3, r3
 8007e4c:	e01b      	b.n	8007e86 <__sflush_r+0xf2>
 8007e4e:	690f      	ldr	r7, [r1, #16]
 8007e50:	2f00      	cmp	r7, #0
 8007e52:	d0f6      	beq.n	8007e42 <__sflush_r+0xae>
 8007e54:	0793      	lsls	r3, r2, #30
 8007e56:	680e      	ldr	r6, [r1, #0]
 8007e58:	bf08      	it	eq
 8007e5a:	694b      	ldreq	r3, [r1, #20]
 8007e5c:	600f      	str	r7, [r1, #0]
 8007e5e:	bf18      	it	ne
 8007e60:	2300      	movne	r3, #0
 8007e62:	eba6 0807 	sub.w	r8, r6, r7
 8007e66:	608b      	str	r3, [r1, #8]
 8007e68:	f1b8 0f00 	cmp.w	r8, #0
 8007e6c:	dde9      	ble.n	8007e42 <__sflush_r+0xae>
 8007e6e:	6a21      	ldr	r1, [r4, #32]
 8007e70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e72:	4643      	mov	r3, r8
 8007e74:	463a      	mov	r2, r7
 8007e76:	4628      	mov	r0, r5
 8007e78:	47b0      	blx	r6
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	dc08      	bgt.n	8007e90 <__sflush_r+0xfc>
 8007e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e90:	4407      	add	r7, r0
 8007e92:	eba8 0800 	sub.w	r8, r8, r0
 8007e96:	e7e7      	b.n	8007e68 <__sflush_r+0xd4>
 8007e98:	dfbffffe 	.word	0xdfbffffe

08007e9c <_fflush_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	690b      	ldr	r3, [r1, #16]
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	b913      	cbnz	r3, 8007eac <_fflush_r+0x10>
 8007ea6:	2500      	movs	r5, #0
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	b118      	cbz	r0, 8007eb6 <_fflush_r+0x1a>
 8007eae:	6a03      	ldr	r3, [r0, #32]
 8007eb0:	b90b      	cbnz	r3, 8007eb6 <_fflush_r+0x1a>
 8007eb2:	f7fe f877 	bl	8005fa4 <__sinit>
 8007eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0f3      	beq.n	8007ea6 <_fflush_r+0xa>
 8007ebe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ec0:	07d0      	lsls	r0, r2, #31
 8007ec2:	d404      	bmi.n	8007ece <_fflush_r+0x32>
 8007ec4:	0599      	lsls	r1, r3, #22
 8007ec6:	d402      	bmi.n	8007ece <_fflush_r+0x32>
 8007ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eca:	f7fe fa96 	bl	80063fa <__retarget_lock_acquire_recursive>
 8007ece:	4628      	mov	r0, r5
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	f7ff ff5f 	bl	8007d94 <__sflush_r>
 8007ed6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ed8:	07da      	lsls	r2, r3, #31
 8007eda:	4605      	mov	r5, r0
 8007edc:	d4e4      	bmi.n	8007ea8 <_fflush_r+0xc>
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	059b      	lsls	r3, r3, #22
 8007ee2:	d4e1      	bmi.n	8007ea8 <_fflush_r+0xc>
 8007ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ee6:	f7fe fa89 	bl	80063fc <__retarget_lock_release_recursive>
 8007eea:	e7dd      	b.n	8007ea8 <_fflush_r+0xc>

08007eec <__swhatbuf_r>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	460c      	mov	r4, r1
 8007ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	b096      	sub	sp, #88	@ 0x58
 8007ef8:	4615      	mov	r5, r2
 8007efa:	461e      	mov	r6, r3
 8007efc:	da0d      	bge.n	8007f1a <__swhatbuf_r+0x2e>
 8007efe:	89a3      	ldrh	r3, [r4, #12]
 8007f00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f04:	f04f 0100 	mov.w	r1, #0
 8007f08:	bf14      	ite	ne
 8007f0a:	2340      	movne	r3, #64	@ 0x40
 8007f0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f10:	2000      	movs	r0, #0
 8007f12:	6031      	str	r1, [r6, #0]
 8007f14:	602b      	str	r3, [r5, #0]
 8007f16:	b016      	add	sp, #88	@ 0x58
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	466a      	mov	r2, sp
 8007f1c:	f000 f862 	bl	8007fe4 <_fstat_r>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	dbec      	blt.n	8007efe <__swhatbuf_r+0x12>
 8007f24:	9901      	ldr	r1, [sp, #4]
 8007f26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f2e:	4259      	negs	r1, r3
 8007f30:	4159      	adcs	r1, r3
 8007f32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f36:	e7eb      	b.n	8007f10 <__swhatbuf_r+0x24>

08007f38 <__smakebuf_r>:
 8007f38:	898b      	ldrh	r3, [r1, #12]
 8007f3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f3c:	079d      	lsls	r5, r3, #30
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460c      	mov	r4, r1
 8007f42:	d507      	bpl.n	8007f54 <__smakebuf_r+0x1c>
 8007f44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	6123      	str	r3, [r4, #16]
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	6163      	str	r3, [r4, #20]
 8007f50:	b003      	add	sp, #12
 8007f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f54:	ab01      	add	r3, sp, #4
 8007f56:	466a      	mov	r2, sp
 8007f58:	f7ff ffc8 	bl	8007eec <__swhatbuf_r>
 8007f5c:	9f00      	ldr	r7, [sp, #0]
 8007f5e:	4605      	mov	r5, r0
 8007f60:	4639      	mov	r1, r7
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7fd fa80 	bl	8005468 <_malloc_r>
 8007f68:	b948      	cbnz	r0, 8007f7e <__smakebuf_r+0x46>
 8007f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6e:	059a      	lsls	r2, r3, #22
 8007f70:	d4ee      	bmi.n	8007f50 <__smakebuf_r+0x18>
 8007f72:	f023 0303 	bic.w	r3, r3, #3
 8007f76:	f043 0302 	orr.w	r3, r3, #2
 8007f7a:	81a3      	strh	r3, [r4, #12]
 8007f7c:	e7e2      	b.n	8007f44 <__smakebuf_r+0xc>
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	6020      	str	r0, [r4, #0]
 8007f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f86:	81a3      	strh	r3, [r4, #12]
 8007f88:	9b01      	ldr	r3, [sp, #4]
 8007f8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f8e:	b15b      	cbz	r3, 8007fa8 <__smakebuf_r+0x70>
 8007f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f94:	4630      	mov	r0, r6
 8007f96:	f000 f837 	bl	8008008 <_isatty_r>
 8007f9a:	b128      	cbz	r0, 8007fa8 <__smakebuf_r+0x70>
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	f023 0303 	bic.w	r3, r3, #3
 8007fa2:	f043 0301 	orr.w	r3, r3, #1
 8007fa6:	81a3      	strh	r3, [r4, #12]
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	431d      	orrs	r5, r3
 8007fac:	81a5      	strh	r5, [r4, #12]
 8007fae:	e7cf      	b.n	8007f50 <__smakebuf_r+0x18>

08007fb0 <memmove>:
 8007fb0:	4288      	cmp	r0, r1
 8007fb2:	b510      	push	{r4, lr}
 8007fb4:	eb01 0402 	add.w	r4, r1, r2
 8007fb8:	d902      	bls.n	8007fc0 <memmove+0x10>
 8007fba:	4284      	cmp	r4, r0
 8007fbc:	4623      	mov	r3, r4
 8007fbe:	d807      	bhi.n	8007fd0 <memmove+0x20>
 8007fc0:	1e43      	subs	r3, r0, #1
 8007fc2:	42a1      	cmp	r1, r4
 8007fc4:	d008      	beq.n	8007fd8 <memmove+0x28>
 8007fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fce:	e7f8      	b.n	8007fc2 <memmove+0x12>
 8007fd0:	4402      	add	r2, r0
 8007fd2:	4601      	mov	r1, r0
 8007fd4:	428a      	cmp	r2, r1
 8007fd6:	d100      	bne.n	8007fda <memmove+0x2a>
 8007fd8:	bd10      	pop	{r4, pc}
 8007fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fe2:	e7f7      	b.n	8007fd4 <memmove+0x24>

08007fe4 <_fstat_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4d07      	ldr	r5, [pc, #28]	@ (8008004 <_fstat_r+0x20>)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4604      	mov	r4, r0
 8007fec:	4608      	mov	r0, r1
 8007fee:	4611      	mov	r1, r2
 8007ff0:	602b      	str	r3, [r5, #0]
 8007ff2:	f000 f8d1 	bl	8008198 <_fstat>
 8007ff6:	1c43      	adds	r3, r0, #1
 8007ff8:	d102      	bne.n	8008000 <_fstat_r+0x1c>
 8007ffa:	682b      	ldr	r3, [r5, #0]
 8007ffc:	b103      	cbz	r3, 8008000 <_fstat_r+0x1c>
 8007ffe:	6023      	str	r3, [r4, #0]
 8008000:	bd38      	pop	{r3, r4, r5, pc}
 8008002:	bf00      	nop
 8008004:	20000b9c 	.word	0x20000b9c

08008008 <_isatty_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4d06      	ldr	r5, [pc, #24]	@ (8008024 <_isatty_r+0x1c>)
 800800c:	2300      	movs	r3, #0
 800800e:	4604      	mov	r4, r0
 8008010:	4608      	mov	r0, r1
 8008012:	602b      	str	r3, [r5, #0]
 8008014:	f000 f8d0 	bl	80081b8 <_isatty>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d102      	bne.n	8008022 <_isatty_r+0x1a>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	b103      	cbz	r3, 8008022 <_isatty_r+0x1a>
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	20000b9c 	.word	0x20000b9c

08008028 <__assert_func>:
 8008028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800802a:	4614      	mov	r4, r2
 800802c:	461a      	mov	r2, r3
 800802e:	4b09      	ldr	r3, [pc, #36]	@ (8008054 <__assert_func+0x2c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4605      	mov	r5, r0
 8008034:	68d8      	ldr	r0, [r3, #12]
 8008036:	b954      	cbnz	r4, 800804e <__assert_func+0x26>
 8008038:	4b07      	ldr	r3, [pc, #28]	@ (8008058 <__assert_func+0x30>)
 800803a:	461c      	mov	r4, r3
 800803c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008040:	9100      	str	r1, [sp, #0]
 8008042:	462b      	mov	r3, r5
 8008044:	4905      	ldr	r1, [pc, #20]	@ (800805c <__assert_func+0x34>)
 8008046:	f000 f841 	bl	80080cc <fiprintf>
 800804a:	f000 f851 	bl	80080f0 <abort>
 800804e:	4b04      	ldr	r3, [pc, #16]	@ (8008060 <__assert_func+0x38>)
 8008050:	e7f4      	b.n	800803c <__assert_func+0x14>
 8008052:	bf00      	nop
 8008054:	200006a4 	.word	0x200006a4
 8008058:	08008c46 	.word	0x08008c46
 800805c:	08008c18 	.word	0x08008c18
 8008060:	08008c0b 	.word	0x08008c0b

08008064 <_calloc_r>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	fba1 5402 	umull	r5, r4, r1, r2
 800806a:	b93c      	cbnz	r4, 800807c <_calloc_r+0x18>
 800806c:	4629      	mov	r1, r5
 800806e:	f7fd f9fb 	bl	8005468 <_malloc_r>
 8008072:	4606      	mov	r6, r0
 8008074:	b928      	cbnz	r0, 8008082 <_calloc_r+0x1e>
 8008076:	2600      	movs	r6, #0
 8008078:	4630      	mov	r0, r6
 800807a:	bd70      	pop	{r4, r5, r6, pc}
 800807c:	220c      	movs	r2, #12
 800807e:	6002      	str	r2, [r0, #0]
 8008080:	e7f9      	b.n	8008076 <_calloc_r+0x12>
 8008082:	462a      	mov	r2, r5
 8008084:	4621      	mov	r1, r4
 8008086:	f7fe f92b 	bl	80062e0 <memset>
 800808a:	e7f5      	b.n	8008078 <_calloc_r+0x14>

0800808c <__ascii_mbtowc>:
 800808c:	b082      	sub	sp, #8
 800808e:	b901      	cbnz	r1, 8008092 <__ascii_mbtowc+0x6>
 8008090:	a901      	add	r1, sp, #4
 8008092:	b142      	cbz	r2, 80080a6 <__ascii_mbtowc+0x1a>
 8008094:	b14b      	cbz	r3, 80080aa <__ascii_mbtowc+0x1e>
 8008096:	7813      	ldrb	r3, [r2, #0]
 8008098:	600b      	str	r3, [r1, #0]
 800809a:	7812      	ldrb	r2, [r2, #0]
 800809c:	1e10      	subs	r0, r2, #0
 800809e:	bf18      	it	ne
 80080a0:	2001      	movne	r0, #1
 80080a2:	b002      	add	sp, #8
 80080a4:	4770      	bx	lr
 80080a6:	4610      	mov	r0, r2
 80080a8:	e7fb      	b.n	80080a2 <__ascii_mbtowc+0x16>
 80080aa:	f06f 0001 	mvn.w	r0, #1
 80080ae:	e7f8      	b.n	80080a2 <__ascii_mbtowc+0x16>

080080b0 <__ascii_wctomb>:
 80080b0:	4603      	mov	r3, r0
 80080b2:	4608      	mov	r0, r1
 80080b4:	b141      	cbz	r1, 80080c8 <__ascii_wctomb+0x18>
 80080b6:	2aff      	cmp	r2, #255	@ 0xff
 80080b8:	d904      	bls.n	80080c4 <__ascii_wctomb+0x14>
 80080ba:	228a      	movs	r2, #138	@ 0x8a
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080c2:	4770      	bx	lr
 80080c4:	700a      	strb	r2, [r1, #0]
 80080c6:	2001      	movs	r0, #1
 80080c8:	4770      	bx	lr
	...

080080cc <fiprintf>:
 80080cc:	b40e      	push	{r1, r2, r3}
 80080ce:	b503      	push	{r0, r1, lr}
 80080d0:	4601      	mov	r1, r0
 80080d2:	ab03      	add	r3, sp, #12
 80080d4:	4805      	ldr	r0, [pc, #20]	@ (80080ec <fiprintf+0x20>)
 80080d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080da:	6800      	ldr	r0, [r0, #0]
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	f7ff fd41 	bl	8007b64 <_vfiprintf_r>
 80080e2:	b002      	add	sp, #8
 80080e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080e8:	b003      	add	sp, #12
 80080ea:	4770      	bx	lr
 80080ec:	200006a4 	.word	0x200006a4

080080f0 <abort>:
 80080f0:	b508      	push	{r3, lr}
 80080f2:	2006      	movs	r0, #6
 80080f4:	f000 f82c 	bl	8008150 <raise>
 80080f8:	2001      	movs	r0, #1
 80080fa:	f000 f885 	bl	8008208 <_exit>

080080fe <_raise_r>:
 80080fe:	291f      	cmp	r1, #31
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4605      	mov	r5, r0
 8008104:	460c      	mov	r4, r1
 8008106:	d904      	bls.n	8008112 <_raise_r+0x14>
 8008108:	2316      	movs	r3, #22
 800810a:	6003      	str	r3, [r0, #0]
 800810c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008110:	bd38      	pop	{r3, r4, r5, pc}
 8008112:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008114:	b112      	cbz	r2, 800811c <_raise_r+0x1e>
 8008116:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800811a:	b94b      	cbnz	r3, 8008130 <_raise_r+0x32>
 800811c:	4628      	mov	r0, r5
 800811e:	f000 f831 	bl	8008184 <_getpid_r>
 8008122:	4622      	mov	r2, r4
 8008124:	4601      	mov	r1, r0
 8008126:	4628      	mov	r0, r5
 8008128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800812c:	f000 b818 	b.w	8008160 <_kill_r>
 8008130:	2b01      	cmp	r3, #1
 8008132:	d00a      	beq.n	800814a <_raise_r+0x4c>
 8008134:	1c59      	adds	r1, r3, #1
 8008136:	d103      	bne.n	8008140 <_raise_r+0x42>
 8008138:	2316      	movs	r3, #22
 800813a:	6003      	str	r3, [r0, #0]
 800813c:	2001      	movs	r0, #1
 800813e:	e7e7      	b.n	8008110 <_raise_r+0x12>
 8008140:	2100      	movs	r1, #0
 8008142:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008146:	4620      	mov	r0, r4
 8008148:	4798      	blx	r3
 800814a:	2000      	movs	r0, #0
 800814c:	e7e0      	b.n	8008110 <_raise_r+0x12>
	...

08008150 <raise>:
 8008150:	4b02      	ldr	r3, [pc, #8]	@ (800815c <raise+0xc>)
 8008152:	4601      	mov	r1, r0
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f7ff bfd2 	b.w	80080fe <_raise_r>
 800815a:	bf00      	nop
 800815c:	200006a4 	.word	0x200006a4

08008160 <_kill_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4d07      	ldr	r5, [pc, #28]	@ (8008180 <_kill_r+0x20>)
 8008164:	2300      	movs	r3, #0
 8008166:	4604      	mov	r4, r0
 8008168:	4608      	mov	r0, r1
 800816a:	4611      	mov	r1, r2
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	f000 f82b 	bl	80081c8 <_kill>
 8008172:	1c43      	adds	r3, r0, #1
 8008174:	d102      	bne.n	800817c <_kill_r+0x1c>
 8008176:	682b      	ldr	r3, [r5, #0]
 8008178:	b103      	cbz	r3, 800817c <_kill_r+0x1c>
 800817a:	6023      	str	r3, [r4, #0]
 800817c:	bd38      	pop	{r3, r4, r5, pc}
 800817e:	bf00      	nop
 8008180:	20000b9c 	.word	0x20000b9c

08008184 <_getpid_r>:
 8008184:	f000 b810 	b.w	80081a8 <_getpid>

08008188 <_close>:
 8008188:	4b02      	ldr	r3, [pc, #8]	@ (8008194 <_close+0xc>)
 800818a:	2258      	movs	r2, #88	@ 0x58
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008192:	4770      	bx	lr
 8008194:	20000b9c 	.word	0x20000b9c

08008198 <_fstat>:
 8008198:	4b02      	ldr	r3, [pc, #8]	@ (80081a4 <_fstat+0xc>)
 800819a:	2258      	movs	r2, #88	@ 0x58
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081a2:	4770      	bx	lr
 80081a4:	20000b9c 	.word	0x20000b9c

080081a8 <_getpid>:
 80081a8:	4b02      	ldr	r3, [pc, #8]	@ (80081b4 <_getpid+0xc>)
 80081aa:	2258      	movs	r2, #88	@ 0x58
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081b2:	4770      	bx	lr
 80081b4:	20000b9c 	.word	0x20000b9c

080081b8 <_isatty>:
 80081b8:	4b02      	ldr	r3, [pc, #8]	@ (80081c4 <_isatty+0xc>)
 80081ba:	2258      	movs	r2, #88	@ 0x58
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	2000      	movs	r0, #0
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	20000b9c 	.word	0x20000b9c

080081c8 <_kill>:
 80081c8:	4b02      	ldr	r3, [pc, #8]	@ (80081d4 <_kill+0xc>)
 80081ca:	2258      	movs	r2, #88	@ 0x58
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081d2:	4770      	bx	lr
 80081d4:	20000b9c 	.word	0x20000b9c

080081d8 <_lseek>:
 80081d8:	4b02      	ldr	r3, [pc, #8]	@ (80081e4 <_lseek+0xc>)
 80081da:	2258      	movs	r2, #88	@ 0x58
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081e2:	4770      	bx	lr
 80081e4:	20000b9c 	.word	0x20000b9c

080081e8 <_read>:
 80081e8:	4b02      	ldr	r3, [pc, #8]	@ (80081f4 <_read+0xc>)
 80081ea:	2258      	movs	r2, #88	@ 0x58
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081f2:	4770      	bx	lr
 80081f4:	20000b9c 	.word	0x20000b9c

080081f8 <_write>:
 80081f8:	4b02      	ldr	r3, [pc, #8]	@ (8008204 <_write+0xc>)
 80081fa:	2258      	movs	r2, #88	@ 0x58
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008202:	4770      	bx	lr
 8008204:	20000b9c 	.word	0x20000b9c

08008208 <_exit>:
 8008208:	e7fe      	b.n	8008208 <_exit>
	...

0800820c <_init>:
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820e:	bf00      	nop
 8008210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008212:	bc08      	pop	{r3}
 8008214:	469e      	mov	lr, r3
 8008216:	4770      	bx	lr

08008218 <_fini>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	bf00      	nop
 800821c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821e:	bc08      	pop	{r3}
 8008220:	469e      	mov	lr, r3
 8008222:	4770      	bx	lr
